общий модуль - АФМ_ИзменениеТиповогоФункционала


#Если Клиент Тогда

Процедура ПриНачалеРаботыСистемы() Экспорт
	
	// АФМ_АдминистрированиеРаботыПользователей
	АФМ_АдминистрированиеРаботыПользователейКлиент.ПриНачалеРаботыСистемы();
	// Конец АФМ_АдминистрированиеРаботыПользователей
	
	// АФМ_ОбновлениеКэшируемыхДанных
	АФМ_ОбновлениеКэшируемыхДанных.ПриНачалеРаботыСистемы();
	// Конец АФМ_ОбновлениеКэшируемыхДанных
	
КонецПроцедуры

Процедура ВедомостьПодобрать(Форма) Экспорт
	
	МножественныйВыбор = Истина;
	
	АдресСпискаПодобранныхСотрудников = АФМ_ИзменениеТиповогоФункционалаВызовСервера.АдресСпискаПодобранныхСотрудников(Форма.Объект.Состав, Форма.УникальныйИдентификатор);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПоказыватьСотрудниковПодчиненныхПодразделений", Истина);
	
	//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000006417 16.06.2016	
	
	//КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(Форма.Элементы.Состав, Форма.Объект.Организация, Форма.Объект.Подразделение, 
	//	Форма.Объект.ПериодРегистрации, МножественныйВыбор, АдресСпискаПодобранныхСотрудников, ПараметрыОткрытия);
	
	ДатаНачалаВыбора = НачалоМесяца(Форма.Объект.ПериодРегистрации);
	ДатаОкончанияВыбора = КонецМесяца(Форма.Объект.ПериодРегистрации);
	
	Попытка
		Если НЕ НачалоМесяца(Форма.Объект.АФМ_ПериодРегистрации) = НачалоМесяца(Форма.Объект.ПериодРегистрации) Тогда
			ДатаНачалаВыбора = НачалоМесяца(Форма.Объект.АФМ_ПериодРегистрации);
			ДатаОкончанияВыбора = КонецМесяца(Форма.Объект.АФМ_ПериодРегистрации);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Форма.Элементы.Состав,
		Форма.Объект.Организация, ,
		ДатаНачалаВыбора, 
		ДатаОкончанияВыбора,
		МножественныйВыбор,
		АдресСпискаПодобранныхСотрудников,
		ПараметрыОткрытия);
	//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000006417 16.06.2016
		
КонецПроцедуры

Функция ФизическиеЛицаИзСотрудников(МассивСотрудники) Экспорт
	Возврат АФМ_ИзменениеТиповогоФункционалаВызовСервера.ФизическиеЛицаИзСотрудников(МассивСотрудники);
КонецФункции

Функция МассивСтруктурПоказателей(ЭлементФормы) Экспорт
	МассивПоказателей	= Новый Массив;
	УФ	= ВернутьУправляемуюФормуВладельца(ЭлементФормы);
	Если Не УФ = Неопределено Тогда
		ИмяРеквизитаНачисление	= "";
		Если ТипЗнч(УФ.Объект.Ссылка) = Тип("ДокументСсылка.Премия") Тогда
			ИмяРеквизитаНачисление	= "ВидПремии";
		ИначеЕсли ТипЗнч(УФ.Объект.Ссылка) = Тип("ДокументСсылка.ДоходВНатуральнойФорме")
			Или ТипЗнч(УФ.Объект.Ссылка) = Тип("ДокументСсылка.РазовоеНачисление") Тогда
			ИмяРеквизитаНачисление	= "Начисление";
		ИначеЕсли ТипЗнч(УФ.Объект.Ссылка) = Тип("ДокументСсылка.МатериальнаяПомощь") Тогда
			ИмяРеквизитаНачисление	= "ВидРасчета";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяРеквизитаНачисление) Тогда
			АФМ_ИзменениеТиповогоФункционалаВызовСервера.ЗаполнитьМассивПоказателей(УФ.Объект.Ссылка, МассивПоказателей, УФ.Объект[ИмяРеквизитаНачисление]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивПоказателей;
КонецФункции

Функция ВернутьУправляемуюФормуВладельца(ЭлементФормы) Экспорт
	Если ТипЗнч(ЭлементФормы) = Тип("УправляемаяФорма") Тогда
		Возврат ЭлементФормы;
	Иначе
		Попытка
			Возврат ВернутьУправляемуюФормуВладельца(ЭлементФормы.Родитель);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
КонецФункции

Процедура ЗаписатьВоВладельцаФормыСтруктуруПоказателейПоСотрудникам(ФормаВыбора) Экспорт
	Если ФормаВыбора.АФМ_СписокПоказателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	УФ	= ВернутьУправляемуюФормуВладельца(ФормаВыбора.ВладелецФормы);
	Если Не УФ = Неопределено Тогда
		Если ФормаВыбора.АФМ_ИспользоватьПоказателиРасчета Тогда
			УФ.АФМ_СтруктураПоказателейПоСотрудникам	= ФормаВыбора.АФМ_СтруктураПоказателейПоСотрудникам;
		Иначе
			УФ.АФМ_СтруктураПоказателейПоСотрудникам	= Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

#Если Не (ТонкийКлиент Или ВебКлиент) Тогда

Процедура ЗаполнитьЗначенияПоказателей(ЭтаФорма, ИмяТЧ) Экспорт
	
	Попытка //Дебов Игорь, добавил исключение т.к. некоторые документы не открывались (при создании нового)
	
		Если Не ЭтаФорма.АФМ_СтруктураПоказателейПоСотрудникам = Неопределено И ЭтаФорма.Объект[ИмяТЧ].Количество() > 0 Тогда
			Для Каждого ДанныеПоСотруднику Из ЭтаФорма.АФМ_СтруктураПоказателейПоСотрудникам.МассивПоказателейПоСотрудникам Цикл
				СтрокиНачислений = ЭтаФорма.Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Сотрудник", ДанныеПоСотруднику.Сотрудник));
				Если СтрокиНачислений.Количество() > 0 Тогда
					СтрокаНачисления = СтрокиНачислений[0];
					Для Каждого ПоказательПоСотруднику Из ДанныеПоСотруднику.СтруктураПоказателей Цикл
						СтрокаНачисления[ПоказательПоСотруднику.Ключ]	= ПоказательПоСотруднику.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВедомостьОрганизацияПриИзмененииНаСервере(Форма) Экспорт
	ЗаполнитьОтветственногоБухгалтера(Форма);
КонецПроцедуры

Процедура ЗаполнитьОтветственногоБухгалтера(Объект, Знач Организация = Неопределено) Экспорт
	
	ЭтоУправляемаяФорма	= (ТипЗнч(Объект) = Тип("УправляемаяФорма"));
	
	ОрганизацияОбъекта	= ?(ЭтоУправляемаяФорма, Объект.Объект.Организация, Объект.Организация);
	Если Не ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияОбъекта) Тогда
		Организация	= ОрганизацияОбъекта;
	КонецЕсли;
	
	ОтветственныйБухгалтер	= Справочники.ФизическиеЛица.ПустаяСсылка();
	Если ЗначениеЗаполнено(Организация) Тогда
		ОтветственныйБухгалтер	= АФМ_ПредопределенныеДанные.ПолучитьПредопределенноеЗначение(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ОтветственныйБухгалтер, Организация);
	КонецЕсли;
		
	Если ЭтоУправляемаяФорма Тогда
		Объект.Объект.Бухгалтер	= ОтветственныйБухгалтер;
	Иначе
		Объект.Бухгалтер	= ОтветственныйБухгалтер;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьКомпенсацииЗаЗадержку(Основания, Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Данные.Сотрудник,
	               |	Данные.Подразделение,
	               |	Данные.СтатьяФинансирования,
	               |	Данные.СуммаКВыплате КАК КВыплате,
	               |	Данные.ПериодВзаиморасчетов
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Сотрудник КАК Сотрудник,
	               |		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Подразделение КАК Подразделение,
	               |		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.СтатьяФинансирования КАК СтатьяФинансирования,
	               |		СУММА(ВедомостьНаВыплатуЗарплатыВБанкЗарплата.КВыплате) КАК СуммаКВыплате,
	               |		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов
	               |	ИЗ
	               |		Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьНаВыплатуЗарплатыВБанкЗарплата
	               |	ГДЕ
	               |		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка В(&ДокументыОснования)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Сотрудник,
	               |		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Подразделение,
	               |		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.СтатьяФинансирования,
	               |		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.ПериодВзаиморасчетов
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Сотрудник,
	               |		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Подразделение,
	               |		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.СтатьяФинансирования,
	               |		СУММА(ВедомостьНаВыплатуЗарплатыВКассуЗарплата.КВыплате),
	               |		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.ПериодВзаиморасчетов
	               |	ИЗ
	               |		Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК ВедомостьНаВыплатуЗарплатыВКассуЗарплата
	               |	ГДЕ
	               |		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Ссылка В(&ДокументыОснования)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Сотрудник,
	               |		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Подразделение,
	               |		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.СтатьяФинансирования,
	               |		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.ПериодВзаиморасчетов
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.Сотрудник,
	               |		ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.Подразделение,
	               |		ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.СтатьяФинансирования,
	               |		СУММА(ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.КВыплате),
	               |		ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.ПериодВзаиморасчетов
	               |	ИЗ
	               |		Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата
	               |	ГДЕ
	               |		ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.Ссылка В(&ДокументыОснования)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.Сотрудник,
	               |		ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.Подразделение,
	               |		ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.СтатьяФинансирования,
	               |		ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.ПериодВзаиморасчетов
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.Сотрудник,
	               |		ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.Подразделение,
	               |		ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.СтатьяФинансирования,
	               |		СУММА(ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.КВыплате),
	               |		ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.ПериодВзаиморасчетов
	               |	ИЗ
	               |		Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата
	               |	ГДЕ
	               |		ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.Ссылка В(&ДокументыОснования)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.Сотрудник,
	               |		ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.Подразделение,
	               |		ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.СтатьяФинансирования,
	               |		ВедомостьНаВыплатуЗарплатыРаздатчикомЗарплата.ПериодВзаиморасчетов) КАК Данные
	               |ГДЕ
	               |	Данные.Сотрудник В(&Сотрудники)";
				   
	Запрос.УстановитьПараметр("ДокументыОснования", Основания);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);

	
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	НоваяСтрока = Объект.Начисления.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);		
	//КонецЦикла;	 
	
	НевыплаченнаяЗарплата = Запрос.Выполнить().Выгрузить();
	
	Возврат НевыплаченнаяЗарплата;   
	
КонецФункции

#КонецЕсли

#Если Сервер Тогда
	
#Область ИзменениеТиповыхОтчетов

Процедура ПриСозданииФормыОтчетаНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИмяОтчета		= ИмяОтчета(Форма);
	КлючВарианта	= Форма.Параметры.КлючВарианта;
	
	
КонецПроцедуры

Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ИмяОтчета		= ИмяОтчета(Форма);
	КлючВарианта	= КлючВарианта(Форма);
	
	Если ИмяОтчета = "АнализНачисленийИУдержаний" Тогда
		Если КлючВарианта = "РасчетныйЛисток" Тогда
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьТарифнуюСтавку", "Выводить тарифную ставку", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьВычеты", "Выводить стандартные вычеты", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			
			//--> АФМ-Серверс Дебов Игорь ДМ0000006169 16.05.2016
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_НеВыводитьСНулевымДолгом", "Не выводить расчетные листки по уволенным сотрудникам с нулевым сальдо", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
			//<-- АФМ-Серверс Дебов Игорь ДМ0000006169 16.05.2016
		
		ИначеЕсли КлючВарианта = "ПолныйСводНачисленийУдержанийИВыплат" Тогда
			//--> АФМ-Серверс Дебов Игорь ДМ0000006460 12.04.2016
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_РазбиватьПоПериодуДействий", "Разбивать суммы начислений и удержаний по периодам действия", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			ДобавитьОтборВНастройки(НовыеНастройкиКД, "ФизическоеЛицо", "Физическое лицо",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, ВидСравненияКомпоновкиДанных.Равно);
			ДобавитьОтборВНастройки(НовыеНастройкиКД, "ФизическоеЛицо.Родитель", "Сотрудник.Физическое лицо",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный, ВидСравненияКомпоновкиДанных.ВИерархии);
			//<-- АФМ-Серверс Дебов Игорь ДМ0000006460 12.04.2016
			
			//--> АФМ-Серверс Дебов Игорь ДМ0000006316 16.08.2016
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
				ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_Проект", "Проект", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка(), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			Иначе
				ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_Проект", "Проект", Справочники.ГруппыСотрудников.ПустаяСсылка(), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			КонецЕсли;
			//<-- АФМ-Серверс Дебов Игорь ДМ0000006316 16.08.2016
			
		ИначеЕсли КлючВарианта = "Т51" Тогда
			//--> АФМ-Серверс Дебов Игорь ДМ0000007190 05.05.2016
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			ДобавитьОтборВНастройки(НовыеНастройкиКД, "Сотрудник", "Сотрудник",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, ВидСравненияКомпоновкиДанных.Равно);
			ДобавитьОтборВНастройки(НовыеНастройкиКД, "Сотрудник.ФизическоеЛицо.Родитель", "Сотрудник.Физическое лицо",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, ВидСравненияКомпоновкиДанных.ВИерархии);
			//<-- АФМ-Серверс Дебов Игорь ДМ0000007190 05.05.2016
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "ШтатноеРасписаниеНачисления" Тогда
		Если КлючВарианта = "Т3" Тогда
			//--> АФМ-Серверс Уфимцев Заявка №8962 16.02.2016
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
			//<-- АФМ-Серверс Уфимцев Заявка №8962 16.02.2016
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "УнифицированнаяФормаТ13" Тогда
		Если КлючВарианта = "УнифицированнаяФормаТ13" Тогда
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "Табель с неутвержденными документами",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_СобственнаяФормаЦИУС", "По форме ЦИУС", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "АнализВзносовВФонды" Тогда
		Если КлючВарианта = "АнализВзносовВФонды" Тогда
			//--> АФМ-Серверс Дебов Игорь ДМ0000007167
			ДобавитьОтборВНастройки(НовыеНастройкиКД, "ФизическоеЛицо.Родитель", "Сотрудник.Физическое лицо",, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный, ВидСравненияКомпоновкиДанных.ВИерархии);
			//<-- АФМ-Серверс Дебов Игорь ДМ0000007167
			
			//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000007342 25.05.2016
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
			//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000007342 25.05.2016
			
			//--> АФМ-Серверс Дебов Игорь ДМ0000006316 29.07.2016
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
				ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_Проект", "Проект", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка(), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			Иначе
				ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_Проект", "Проект", Справочники.ГруппыСотрудников.ПустаяСсылка(), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			КонецЕсли;
			//<-- АФМ-Серверс Дебов Игорь ДМ0000006316 29.07.2016
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "НаградыСотрудников" Тогда
		Если КлючВарианта = "НаградыСотрудников" Тогда
			//--> АФМ-Серверс Дебов Игорь Заявка 000000008697 18.06.2016
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
			//<-- АФМ-Серверс Дебов Игорь Заявка 000000008697 18.06.2016
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "ОтчетыПоСотрудникам" Тогда
		Если КлючВарианта = "ШтатныеСотрудники" Тогда
			//--> АФМ-Серверс Дебов Игорь Заявка 000000008671 18.06.2016
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "Вывести форму - реестр сотрудников с окладом и надбавками", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			//<-- АФМ-Серверс Дебов Игорь Заявка 000000008671 18.06.2016
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "РегистрНалоговогоУчетаПоНДФЛ" Тогда
		Если КлючВарианта = "РегистрНалоговогоУчетаПоНДФЛ" Тогда
			//--> АФМ-Серверс Дебов Игорь ДМ0000007208
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			//<-- АФМ-Серверс Дебов Игорь ДМ0000007208
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "РеестрПолучателейСтраховогоОбеспечения" Тогда
		Если КлючВарианта = "РеестрПолучателейСтраховогоОбеспечения" Тогда
			//--> АФМ-Серверс Дебов Игорь ДМ0000007213
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			//<-- АФМ-Серверс Дебов Игорь ДМ0000007213
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "СостояниеШтатногоРасписания" Тогда
		Если КлючВарианта = "ШтатнаяРасстановка" Тогда
			//--> АФМ-Серверс Дебов Игорь 000000008963 27.05.2016
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			//<-- АФМ-Серверс Дебов Игорь 000000008963 27.05.2016
			
			//--> АФМ-Серверс Дебов Игорь ДМ0000006160 18.06.2016
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_СводнаяШтатнаяРасстановка", "Сводная штатная расстановка", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьВакансии", "Выводить вакансии", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВременноНеРаботающие", "Выводить данные о временно неработающих", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			ДобавитьПараметрВНастройки(НовыеНастройкиКД, "АФМ_ВыводитьВнеШтатногоРасписания", "Выводить ВНЕ штатного расписания", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			//<-- АФМ-Серверс Дебов Игорь ДМ0000006160 18.06.2016
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОтчет(Отчет) Экспорт
	
	//--> Дебов Игорь Заявка ДМ0000007150
	//	при [Заполнении] регл. отчетности у переменной [Отчет] тип значения = стурктура
	Попытка
		ИмяОтчета = Отчет.Метаданные().Имя;
	Исключение
		Возврат;
	КонецПопытки;
	//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000007150
	
	КлючВарианта = КлючВарианта(Отчет.КомпоновщикНастроек);
	
	ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_ВыводитьПоФормеЦИУС", "По форме ЦИУС");
	
	Если ИмяОтчета = "ШтатноеРасписаниеНачисления" Тогда
		//--> АФМ-Серверс Уфимцев Заявка №8962 12.02.2016
		Если КлючВарианта = "Т3" Тогда
			ШтатноеРасписаниеНачисления_ТЗ_ИзменитьСхему(Отчет);
		КонецЕсли;
		//<-- АФМ-Серверс Уфимцев Заявка №8962 12.02.2016 
		
	ИначеЕсли ИмяОтчета = "АнализНачисленийИУдержаний" Тогда
		//--> АФМ-Серверс Дебов Игорь ДМ0000006460
		ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_РазбиватьПоПериодуДействий", "Разбивать суммы начислений и удержаний по периодам действия");
		//<-- АФМ-Серверс Дебов Игорь ДМ0000006460
		
		//--> АФМ-Серверс Дебов Игорь ДМ0000006169
		ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_ВыводитьТарифнуюСтавку", "Выводить тарифную ставку");
		ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_ВыводитьВычеты", "Выводить стандартные вычеты");
		//<-- АФМ-Серверс Дебов Игорь ДМ0000006169
		
		//--> АФМ-Серверс Дебов Игорь ДМ0000006169 16.05.2016
		ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_НеВыводитьСНулевымДолгом", "Не выводить расчетные листки по уволенным сотрудникам с нулевым сальдо");
		//<-- АФМ-Серверс Дебов Игорь ДМ0000006169 16.05.2016
		
		//--> АФМ-Серверс Дебов Игорь ДМ0000006316 16.08.2016
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
			ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_Проект", "Проект", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка(), Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
		Иначе
			ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_Проект", "Проект", Справочники.ГруппыСотрудников.ПустаяСсылка(), Новый ОписаниеТипов("СправочникСсылка.ГруппыСотрудников"));
		КонецЕсли;
		//<-- АФМ-Серверс Дебов Игорь ДМ0000006316 16.08.2016
		
	ИначеЕсли ИмяОтчета = "УнифицированнаяФормаТ13" Тогда
		//--> АФМ-Серверс Дебов Игорь ДМ0000007474 15.07.2016
		ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_СобственнаяФормаЦИУС", "По форме ЦИУС");
		//<-- АФМ-Серверс Дебов Игорь ДМ0000007474 15.07.2016
		
	ИначеЕсли ИмяОтчета = "АнализВзносовВФонды" Тогда
		//--> АФМ-Серверс Дебов Игорь ДМ0000006316 29.07.2016
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
			ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_Проект", "Проект", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка(), Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
		Иначе
			ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_Проект", "Проект", Справочники.ГруппыСотрудников.ПустаяСсылка(), Новый ОписаниеТипов("СправочникСсылка.ГруппыСотрудников"));
		КонецЕсли;
		//<-- АФМ-Серверс Дебов Игорь ДМ0000006316 29.07.2016
		
	ИначеЕсли ИмяОтчета = "РегистрНалоговогоУчетаПоНДФЛ" Тогда
		
		
	ИначеЕсли ИмяОтчета = "РеестрПолучателейСтраховогоОбеспечения" Тогда
		//--> АФМ-Серверс Дебов Игорь ДМ0000007213
		Если КлючВарианта = "" ИЛИ КлючВарианта = "РеестрПолучателейСтраховогоОбеспечения" Тогда
			РеестрПолучателейСтраховогоОбеспечения_ИзменениеСхемыСКД(Отчет);
		КонецЕсли;
		//<-- АФМ-Серверс Дебов Игорь ДМ0000007213 
		
	ИначеЕсли ИмяОтчета = "НаградыСотрудников" Тогда
		
		
	ИначеЕсли ИмяОтчета = "ОтчетыПоСотрудникам" Тогда
		//--> АФМ-Серверс Дебов Игорь ДМ0000007968 21.07.2016
		Если КлючВарианта = "Т2" Тогда
			ОтчетыПоСотрудникам_Т2_ИзменитьСхему(Отчет);
		КонецЕсли;
		//<-- АФМ-Серверс Дебов Игорь ДМ0000007968 21.07.2016
		
	ИначеЕсли ИмяОтчета = "СостояниеШтатногоРасписания" Тогда
		//--> АФМ-Серверс Дебов Игорь ДМ0000006160 18.06.2016
		ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_СводнаяШтатнаяРасстановка", "Сводная штатная расстановка");
		ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_ВыводитьВакансии", "Выводить вакансии");
		ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_ВременноНеРаботающие", "Выводить данные о временно неработающих");
		ДобавитьПараметрВСхемуКомпоновки(Отчет.СхемаКомпоновкиДанных, "АФМ_ВыводитьВнеШтатногоРасписания", "Выводить ВНЕ штатного расписания");
		//<-- АФМ-Серверс Дебов Игорь ДМ0000006160 18.06.2016
		
		//--> АФМ-Серверс Дебов Игорь ДМ0000008195 05.10.2016
		СостояниеШтатногоРасписания_ШтатнаяРасстановка_ИзменитьСхему(Отчет);
		//<-- АФМ-Серверс Дебов Игорь ДМ0000008195 05.10.2016
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ИмяОтчета		= СокрЛП(Контекст.Метаданные.Имя);
	
	//Если ИмяОтчета = "..." Тогда
	//	
	//КонецЕсли;
	
КонецПроцедуры

Функция ПриКомпоновкеРезультата(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	ИмяОтчета		= Отчет.Метаданные().Имя;
	КлючВарианта	= КлючВарианта(Отчет.КомпоновщикНастроек);
	
	ВыводитьПоФормеЦИУС = (ЗначениеПараметра(Отчет.КомпоновщикНастроек.ПолучитьНастройки(), "АФМ_ВыводитьПоФормеЦИУС") = Истина);
	
	ОтчетСформирован	= Истина;
	
	Если ИмяОтчета = "АнализНачисленийИУдержаний" Тогда
		Если КлючВарианта = "РасчетныйЛисток" И ВыводитьПоФормеЦИУС Тогда
			// --> АФМ-Серверс, Кинчев, заявка №ДМ0000007702, 10.08.2016
			Если Истина Тогда
				АнализНачисленийИУдержаний_РасчетныйЛисток_РаздельныеЛисты(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
			Иначе
				//--> АФМ-Серверс Таширев ДМ0000006169
				АнализНачисленийИУдержаний_РасчетныйЛисток(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
				//<-- АФМ-Серверс Таширев ДМ0000006169
			КонецЕсли;
			// <-- АФМ-Серверс, Кинчев, заявка №ДМ0000007702, 10.08.2016
			
		ИначеЕсли КлючВарианта = "ПолныйСводНачисленийУдержанийИВыплат" И ВыводитьПоФормеЦИУС Тогда
			//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000006460
			АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
			//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000006460
			
		ИначеЕсли КлючВарианта = "Т51" И ВыводитьПоФормеЦИУС Тогда
			//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000007190 05.05.2016
			АнализНачисленийИУдержаний_Т51(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
			//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000007190 05.05.2016
			
		Иначе
			ОтчетСформирован	= Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "ШтатноеРасписаниеНачисления" Тогда
		Если КлючВарианта = "Т3" И ВыводитьПоФормеЦИУС Тогда
			//--> АФМ-Серверс Уфимцев Заявка №8962 12.02.2016 	
			ШтатноеРасписаниеНачисления_ТЗ_ВывестиРезультат(Отчет, ДокументРезультат, СтандартнаяОбработка);
			//<-- АФМ-Серверс Уфимцев Заявка №8962 12.02.2016 
		
		Иначе
			ОтчетСформирован	= Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяОтчета = "УнифицированнаяФормаТ13" Тогда
		Если КлючВарианта = "УнифицированнаяФормаТ13" И ВыводитьПоФормеЦИУС Тогда
			//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000006781
			УнифицированнаяФормаТ13_ИзменениеЗапросаСхемыСКД(Отчет);
			ОтчетСформирован	= Ложь;
			//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000006781
		
		Иначе
			ОтчетСформирован = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "РеестрПолучателейСтраховогоОбеспечения" Тогда
		Если КлючВарианта = "РеестрПолучателейСтраховогоОбеспечения" И ВыводитьПоФормеЦИУС Тогда
			//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000007213
			РеестрПолучателейСтраховогоОбеспечения_ВыводОтчета(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
			ОтчетСформирован = Истина;
			//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000007213
		
		Иначе
			ОтчетСформирован = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "СостояниеШтатногоРасписания" Тогда
		Если КлючВарианта = "ШтатнаяРасстановка" И ВыводитьПоФормеЦИУС Тогда
			//--> АФМ-Серверс Дебов Игорь Заявка 000000008963 27.05.2016
			СостояниеШтатногоРасписания_ШтатнаяРасстановка(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
			ОтчетСформирован = Истина;
			//<-- АФМ-Серверс Дебов Игорь Заявка 000000008963 27.05.2016
		
		Иначе
			ОтчетСформирован = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "НаградыСотрудников" Тогда
		Если КлючВарианта = "НаградыСотрудников" И ВыводитьПоФормеЦИУС Тогда
			//--> АФМ-Серверс Дебов Игорь Заявка 000000008697 18.06.2016
			НаградыСотрудников_ВыводОтчета(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
			ОтчетСформирован = Истина;
			//<-- АФМ-Серверс Дебов Игорь Заявка 000000008697 18.06.2016
		
		Иначе
			ОтчетСформирован = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяОтчета = "ОтчетыПоСотрудникам" Тогда
		Если КлючВарианта = "ШтатныеСотрудники" И ВыводитьПоФормеЦИУС Тогда
			//--> АФМ-Серверс Дебов Игорь Заявка 000000008671 18.06.2016
			ОтчетыПоСотрудникам_ШтатныеСотрудники_ВыводОтчета(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
			ОтчетСформирован = Истина;
			//<-- АФМ-Серверс Дебов Игорь Заявка 000000008671 18.06.2016
			
		ИначеЕсли КлючВарианта = "Т2" Тогда
			//--> АФМ-Серверс Дебов Игорь ДМ0000007968 21.07.2016
			ОтчетыПоСотрудникам_Т2_ИзменитьСхему(Отчет);
			ОтчетСформирован = Ложь;
			//<-- АФМ-Серверс Дебов Игорь ДМ0000007968 21.07.2016
		
		Иначе
			ОтчетСформирован = Ложь;
		КонецЕсли;
		
	Иначе
		ОтчетСформирован	= Ложь;
	КонецЕсли;
	
	Возврат ОтчетСформирован;
	
КонецФункции

Функция ИмяОтчета(Форма)
	
	ИмяФормы			= Форма.ИмяФормы;
	Поз					= Найти(ИмяФормы, ".");
	Поз2				= Поз + Найти(Сред(ИмяФормы, Поз+1), ".");
	ПолноеИмяОбъекта	= Сред(ИмяФормы, Поз+1, Поз2-Поз-1);
	
	Возврат ПолноеИмяОбъекта;
	
КонецФункции

Функция КлючВарианта(Объект)
	
	КлючВарианта	= "";
	
	ТипОбъекта	= ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("УправляемаяФорма") Тогда
		КлючВарианта = Объект.КлючТекущегоВарианта;
		
	ИначеЕсли ТипОбъекта = Тип("КомпоновщикНастроекКомпоновкиДанных")
		Или ТипОбъекта = Тип("НастройкиКомпоновкиДанных") Тогда
		
		Настройки	= ?(ТипОбъекта = Тип("КомпоновщикНастроекКомпоновкиДанных"), Объект.ПолучитьНастройки(), Объект);
		ПользовательскиеНастройки	= ?(ТипОбъекта = Тип("КомпоновщикНастроекКомпоновкиДанных"), Объект.ПользовательскиеНастройки, Неопределено);
		
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КлючВарианта"));
		Если ЗначениеПараметра <> Неопределено
			И ЗначениеПараметра.Использование
			И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
			КлючВарианта = ЗначениеПараметра.Значение;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КлючВарианта)
			И Настройки.ДополнительныеСвойства.Свойство("КлючВарианта")
			И ЗначениеЗаполнено(Настройки.ДополнительныеСвойства.КлючВарианта) Тогда
			КлючВарианта = Настройки.ДополнительныеСвойства.КлючВарианта;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КлючВарианта)
			И ПользовательскиеНастройки <> Неопределено
			И ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта")
			И ЗначениеЗаполнено(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта) Тогда
			КлючВарианта = ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КлючВарианта;
	
КонецФункции

Процедура ДобавитьПараметрВСхемуКомпоновки(СхемаКомпоновки, ИмяПараметра, ЗаголовокПараметра = Неопределено, ЗначениеПараметра = Неопределено, ТипЗначения = Неопределено, ОграничениеИспользования = Ложь)
		КоллекцияПараметров = СхемаКомпоновки.Параметры;
		ПараметрСКД = КоллекцияПараметров.Найти(ИмяПараметра);
		Если ПараметрСКД = Неопределено Тогда
			ПараметрСКД = КоллекцияПараметров.Добавить();
			ПараметрСКД.Имя				= ИмяПараметра;
			ПараметрСКД.Заголовок		= ?(ЗначениеЗаполнено(ЗаголовокПараметра), ЗаголовокПараметра, ИмяПараметра);
			ПараметрСКД.Использование	= ИспользованиеПараметраКомпоновкиДанных.Всегда;
			
			Если ТипЗначения = Неопределено Тогда
				ТипЗначения = Новый ОписаниеТипов("Булево");
			КонецЕсли;
			ПараметрСКД.ТипЗначения		= ТипЗначения;
			
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				ПараметрСКД.Значение = ЗначениеПараметра;
			Иначе	
				 Если ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
					ПараметрСКД.Значение = Истина;
				Иначе
					ПараметрСКД.Значение = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрСКД.ОграничениеИспользования = ОграничениеИспользования;
		КонецЕсли;
КонецПроцедуры

Процедура ДобавитьПараметрВНастройки(НастройкиКомпоновки, ИмяПараметра, Представление = Неопределено, Значение = Истина, РежимОтображения = Неопределено)
	
	ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметра = НастройкиКомпоновки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
	
	Если ЗначениеПараметра = Неопределено Тогда
		
		Попытка //Дебов Игорь, добавил исключение т.к. не выводилась расшифровка полей
		
			ЗначениеПараметра = НастройкиКомпоновки.ПараметрыДанных.Элементы.Добавить();
			ЗначениеПараметра.Параметр		= ПараметрКомпоновкиДанных;
			ЗначениеПараметра.Использование	= Истина;
			ЗначениеПараметра.Значение		= Значение;
			
			Если ЗначениеЗаполнено(Представление) Тогда
				ЗначениеПараметра.ПредставлениеПользовательскойНастройки	= Представление;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РежимОтображения) Тогда
				ЗначениеПараметра.РежимОтображения 	= РежимОтображения;
				ЗначениеПараметра.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

//--> АФМ-Серверс Дебов Игорь ДМ0000006460 12.04.2016
Процедура ДобавитьОтборВНастройки(НастройкиКомпоновки, ИмяПараметра, Представление = Неопределено, Значение = Истина, РежимОтображения = Неопределено, ВидСравнения)
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПараметра);
	
	ОтборУстановлен=Ложь;
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение=ПолеКомпоновкиДанных Тогда
			ОтборУстановлен=Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборУстановлен = Ложь Тогда
		
		НовыйОтбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения=ВидСравнения;
		НовыйОтбор.Использование=Ложь;
		НовыйОтбор.ЛевоеЗначение=ПолеКомпоновкиДанных;
		НовыйОтбор.ПравоеЗначение=Справочники.Сотрудники.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Представление) Тогда
			НовыйОтбор.ПредставлениеПользовательскойНастройки	= Представление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РежимОтображения) Тогда
			НовыйОтбор.РежимОтображения 	= РежимОтображения;
			НовыйОтбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//<-- АФМ-Серверс Дебов Игорь ДМ0000006460 12.04.2016

Функция ЗначениеПараметра(Настройки, ИмяПараметра) Экспорт
	
	Результат	= Неопределено;
	
	ПараметрКомпоновки	= Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметра	= Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновки);
	Если Не ЗначениеПараметра = Неопределено И ЗначениеПараметра.Использование Тогда
		Результат	= ЗначениеПараметра.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область Отчет_НачисленийИУдержаний

#Область Т51

//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000007190 05.05.2016
Процедура АнализНачисленийИУдержаний_Т51(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	Попытка
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ51_АФМ";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		
		Если Не ЕстьГруппировкаПоПодразделению Тогда
			Для каждого ЭлементСортировки Из НастройкиОтчета.Порядок.Элементы Цикл
				Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение.РеквизитДопУпорядочивания") Тогда
					ЭлементСортировки.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//даты и период
		ПериодНачало=Дата(1,1,1);
		ПериодКонец=Дата(1,1,1);
		ПериодОтчетаТекст="";
		
		ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если Не ПараметрПериод = Неопределено Тогда
			ПериодНачало=ПараметрПериод.Значение.ДатаНачала;
			ПериодКонец=ПараметрПериод.Значение.ДатаОкончания;
			Если Год(ПериодНачало)=Год(ПериодКонец) И Месяц(ПериодНачало)=Месяц(ПериодКонец) Тогда
				ПериодОтчетаТекст=Формат(ПериодКонец,"ДФ='ММММ гггг'")+" г.";
			Иначе
				ПериодОтчетаТекст=" период с "+Формат(ПериодНачало,"ДФ=dd.MM.yyyy")+" по "+Формат(ПериодКонец,"ДФ=dd.MM.yyyy");
			КонецЕсли;
		КонецЕсли;
		
		ПодписиОтветственный = Справочники.ФизическиеЛица.ПустаяСсылка();
		ПодписиОтветственныйДолжность = Справочники.Должности.ПустаяСсылка();
		
		ПараметрОтветсвенный = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Ответственный"));
		Если Не ПараметрОтветсвенный = Неопределено И ЗначениеЗаполнено(ПараметрОтветсвенный.Значение) Тогда
			ПодписиОтветственный = ПараметрОтветсвенный.Значение; 
		КонецЕсли;
		ПараметрОтветсвенныйДолжность = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьОтветственного"));
		Если Не ПараметрОтветсвенныйДолжность = Неопределено И ЗначениеЗаполнено(ПараметрОтветсвенныйДолжность.Значение) Тогда
			ПодписиОтветственныйДолжность = ПараметрОтветсвенныйДолжность.Значение; 
		КонецЕсли;
		
		СтруктураПериода=Новый Структура();
		СтруктураПериода.Вставить("ПериодНачало", ПериодНачало);
		СтруктураПериода.Вставить("ПериодКонец", ПериодКонец);
		СтруктураПериода.Вставить("ПериодОтчетаТекст", ПериодОтчетаТекст);
		СтруктураПериода.Вставить("ПодписиОтветственный", ПодписиОтветственный);
		СтруктураПериода.Вставить("ПодписиОтветственныйДолжность", ПодписиОтветственныйДолжность);
		
		//--> изменим настройки варианта
		АнализНачисленийИУдержаний_Т51_ИзменитьНастройки(НастройкиОтчета, ЕстьГруппировкаПоПодразделению);
		//<--
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета("Т51", НастройкиОтчета);
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Отчет.СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.АФМ_ПФ_MXL_Т51");
		
		Макеты = Новый Структура("ШапкаДокумента,ШапкаЧасть1,ШапкаНачислено,ШапкаЧасть2,ШапкаНатуральныеДоходы,ШапкаЧасть3,ШапкаУдержано,ШапкаЧасть4,
								|СтрокаЧасть1,СтрокаНачислено,СтрокаЧасть2,СтрокаНатуральныеДоходы,СтрокаЧасть3,СтрокаУдержано,СтрокаЧасть4,
								|ИтогоПоСтраницеЧасть1,ИтогоПоСтраницеНачислено,ИтогоПоСтраницеЧасть2,ИтогоПоСтраницеНатуральныеДоходы,ИтогоПоСтраницеЧасть3,ИтогоПоСтраницеУдержано,ИтогоПоСтраницеЧасть4,
								|ИтогоПоВедомостиЧасть1,ИтогоПоВедомостиНачислено,ИтогоПоВедомостиЧасть2,ИтогоПоВедомостиНатуральныеДоходы,ИтогоПоВедомостиЧасть3,ИтогоПоВедомостиУдержано,ИтогоПоВедомостиЧасть4,
								|ПустаяСтрока,Подвал");
		
		Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		
		Макеты.ШапкаЧасть1 = Макет.ПолучитьОбласть("Шапка|Часть1");
		Макеты.ШапкаНачислено = Макет.ПолучитьОбласть("Шапка|Начислено");
		Макеты.ШапкаЧасть2 = Макет.ПолучитьОбласть("Шапка|Часть2");
		Макеты.ШапкаНатуральныеДоходы = Макет.ПолучитьОбласть("Шапка|НатуральныеДоходы");
		Макеты.ШапкаЧасть3 = Макет.ПолучитьОбласть("Шапка|Часть3");
		Макеты.ШапкаУдержано = Макет.ПолучитьОбласть("Шапка|Удержано");
		Макеты.ШапкаЧасть4 = Макет.ПолучитьОбласть("Шапка|Часть4");
		
		Макеты.СтрокаЧасть1 = Макет.ПолучитьОбласть("Строка|Часть1");
		Макеты.СтрокаНачислено = Макет.ПолучитьОбласть("Строка|Начислено");
		Макеты.СтрокаЧасть2 = Макет.ПолучитьОбласть("Строка|Часть2");
		Макеты.СтрокаНатуральныеДоходы = Макет.ПолучитьОбласть("Строка|НатуральныеДоходы");
		Макеты.СтрокаЧасть3 = Макет.ПолучитьОбласть("Строка|Часть3");
		Макеты.СтрокаУдержано = Макет.ПолучитьОбласть("Строка|Удержано");
		Макеты.СтрокаЧасть4 = Макет.ПолучитьОбласть("Строка|Часть4");
		
		Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
		Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
		
		Макеты.ИтогоПоСтраницеЧасть1 = Макет.ПолучитьОбласть("ИтогоПоСтранице|Часть1");
		Макеты.ИтогоПоСтраницеНачислено = Макет.ПолучитьОбласть("ИтогоПоСтранице|Начислено");
		Макеты.ИтогоПоСтраницеЧасть2 = Макет.ПолучитьОбласть("ИтогоПоСтранице|Часть2");
		Макеты.ИтогоПоСтраницеНатуральныеДоходы = Макет.ПолучитьОбласть("ИтогоПоСтранице|НатуральныеДоходы");
		Макеты.ИтогоПоСтраницеЧасть3 = Макет.ПолучитьОбласть("ИтогоПоСтранице|Часть3");
		Макеты.ИтогоПоСтраницеУдержано = Макет.ПолучитьОбласть("ИтогоПоСтранице|Удержано");
		Макеты.ИтогоПоСтраницеЧасть4 = Макет.ПолучитьОбласть("ИтогоПоСтранице|Часть4");
		
		Макеты.ИтогоПоВедомостиЧасть1 = Макет.ПолучитьОбласть("ИтогоПоВедомости|Часть1");
		Макеты.ИтогоПоВедомостиНачислено = Макет.ПолучитьОбласть("ИтогоПоВедомости|Начислено");
		Макеты.ИтогоПоВедомостиЧасть2 = Макет.ПолучитьОбласть("ИтогоПоВедомости|Часть2");
		Макеты.ИтогоПоВедомостиНатуральныеДоходы = Макет.ПолучитьОбласть("ИтогоПоВедомости|НатуральныеДоходы");
		Макеты.ИтогоПоВедомостиЧасть3 = Макет.ПолучитьОбласть("ИтогоПоВедомости|Часть3");
		Макеты.ИтогоПоВедомостиУдержано = Макет.ПолучитьОбласть("ИтогоПоВедомости|Удержано");
		Макеты.ИтогоПоВедомостиЧасть4 = Макет.ПолучитьОбласть("ИтогоПоВедомости|Часть4");
		
		Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
				АнализНачисленийИУдержаний_Т51_ВывестиОрганизациюТ51(СтрокаОрганизации, 
					ДокументРезультат, 
					Макеты, 
					ЕстьГруппировкаПоПодразделению, 
					СоответствиеПользовательскихПолей,
					"Т51",
					СтруктураПериода);
			КонецЦикла;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета [Расчетная ведомость ЦИУС] внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;	
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ИзменитьНастройки(НастройкиОтчета, ЕстьГруппировкаПоПодразделению)
	
	//типовые изменения
	СтруктураЗамен=Новый Структура();
	СтруктураЗамен.Вставить("ПКДГоловнойСотрудник", Новый ПолеКомпоновкиДанных("ГоловнойСотрудник"));
	СтруктураЗамен.Вставить("ПКДСотрудник", Новый ПолеКомпоновкиДанных("Сотрудник"));
	
	СтруктураЗамен.Вставить("ПКДДолжность1", Новый ПолеКомпоновкиДанных("ДолжностьГоловногоСотрудникаНаКонецПериода"));
	СтруктураЗамен.Вставить("ПКДДолжность2", Новый ПолеКомпоновкиДанных("ДолжностьГоловногоСотрудникаНаКонецПериода.НаименованиеКраткое"));
	СтруктураЗамен.Вставить("ПКДДолжность3", Новый ПолеКомпоновкиДанных("ДолжностьГоловногоСотрудникаНаКонецПериода.РеквизитДопУпорядочивания"));
	СтруктураЗамен.Вставить("ПКДДолжность4", Новый ПолеКомпоновкиДанных("ДолжностьНаКонецПериода"));
	СтруктураЗамен.Вставить("ПКДДолжность5", Новый ПолеКомпоновкиДанных("ДолжностьНаКонецПериода.НаименованиеКраткое"));
	
	СтруктураЗамен.Вставить("ПКДГоловнойСотрудник2", Новый ПолеКомпоновкиДанных("ГоловнойСотрудник.ФизическоеЛицо.ФИО"));
	СтруктураЗамен.Вставить("ПКДГоловнойСотрудник3", Новый ПолеКомпоновкиДанных("ГоловнойСотрудник.Код"));
	
	СтруктураЗамен.Вставить("ПКДСотрудник2", Новый ПолеКомпоновкиДанных("Сотрудник.ФизическоеЛицо.ФИО"));
	СтруктураЗамен.Вставить("ПКДСотрудник3", Новый ПолеКомпоновкиДанных("Сотрудник.Код"));
	СтруктураЗамен.Вставить("ПКДСотрудник4", Новый ПолеКомпоновкиДанных("Сотрудник.УточнениеНаименования"));
	
	СтруктураЗамен.Вставить("ПКДФизическоеЛицо", Новый ПолеКомпоновкиДанных("ФизическоеЛицо"));
	СтруктураЗамен.Вставить("ПКДФизическоеЛицо2", Новый ПолеКомпоновкиДанных("ФизическоеЛицо.ФИО"));
	СтруктураЗамен.Вставить("ПКДФизическоеЛицо3", Новый ПолеКомпоновкиДанных("ФизическоеЛицо.Код"));
	СтруктураЗамен.Вставить("ПКДФизическоеЛицо4", Новый ПолеКомпоновкиДанных("ФизическоеЛицо.УточнениеНаименования"));
	
	АнализНачисленийИУдержаний_Т51_Группировка(НастройкиОтчета.Структура, ЕстьГруппировкаПоПодразделению, СтруктураЗамен);
	
	//отключим детализацию по - МесяцНачисления
	ГруппировкаМесяцНачисления=НастройкиОтчета.Структура[0];
	ГруппировкаМесяцНачисления.ПоляГруппировки.Элементы.Очистить();
	НовоеПоле = ГруппировкаМесяцНачисления.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПериодФормированияОтчета");//ПериодФормированияОтчета
	
	Для Каждого ПользовательскоеПоле Из НастройкиОтчета.ПользовательскиеПоля.Элементы Цикл
		
		Если ПользовательскоеПоле.Заголовок="ОтчетныйПериодС" Тогда
			//изменяем т.к. меняем МесяцНачисления
			ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей("ПериодФормированияОтчета");
			
		ИначеЕсли ПользовательскоеПоле.Заголовок="ОтчетныйПериодПо" Тогда
			//изменяем т.к. меняем МесяцНачисления
			ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей("ПериодФормированияОтчета");
			
		ИначеЕсли ПользовательскоеПоле.Заголовок="ПорядокГоловногоСотрудника" Тогда
			//изменяем т.к. меняем Сотрудника на ФизЛицо
			ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей("Истина");
			ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Истина");
		КонецЕсли;
		
	КонецЦикла;
	
	//добавим новые поля
	АФМСальдоНаНачалоТекст="Выбор
	|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдоПериода)
	|			Тогда Сумма
	|		Иначе 0
	|Конец";
	АнализНачисленийИУдержаний_Т51_ДобавлениеПользовательскогоПоля(НастройкиОтчета, "АФМСальдоНаНачало", АФМСальдоНаНачалоТекст);
	
	АФМСальдоНаКонецТекст="Выбор
	|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдоПериода)
	|			Тогда Сумма
	|		Иначе 0
	|Конец";
	АнализНачисленийИУдержаний_Т51_ДобавлениеПользовательскогоПоля(НастройкиОтчета, "АФМСальдоНаКонец", АФМСальдоНаКонецТекст);
	
	АФМВсегоУдержаноТекст="Выбор
	|	Когда ВидРасчета = Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|		ИЛИ Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано) 
	|		Тогда Сумма
	|	Иначе 0
	|Конец";
	АнализНачисленийИУдержаний_Т51_ДобавлениеПользовательскогоПоля(НастройкиОтчета, "АФМВсегоУдержано", АФМВсегоУдержаноТекст);
	
	АФМВыплатаТекст="Выбор
	|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
	|			Тогда Сумма
	|		Иначе 0
	|Конец";
	АнализНачисленийИУдержаний_Т51_ДобавлениеПользовательскогоПоля(НастройкиОтчета, "АФМВыплата", АФМВыплатаТекст);
	
	
	АФМВыплатаТекст="Выбор
	|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|		И НЕ ВидРасчета = Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено)
	|		И НЕ ВидРасчета = Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету)
	|			Тогда Сумма
	|		Иначе 0
	|Конец";
	АнализНачисленийИУдержаний_Т51_ДобавлениеПользовательскогоПоля(НастройкиОтчета, "АФМВсегоНатуральныеДоходы", АФМВыплатаТекст);
	
	АФМПогашеноТекст="0";
	АнализНачисленийИУдержаний_Т51_ДобавлениеПользовательскогоПоля(НастройкиОтчета, "АФМПогашено", АФМПогашеноТекст);
	
	//добавим группировку по ВР для начисления и удержания з/п
	ВеткаПоПодразделению=НастройкиОтчета.Структура[0].Структура[0].Структура[0].Структура[0].Структура[0];
	АнализНачисленийИУдержаний_Т51_ДобавленитьДеталицазиюВР(ВеткаПоПодразделению);
	
	ВеткаПоСотруднику=НастройкиОтчета.Структура[0].Структура[0].Структура[1].Структура[0];
	АнализНачисленийИУдержаний_Т51_ДобавленитьДеталицазиюВР(ВеткаПоСотруднику);
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_Группировка(Структура, ЕстьГруппировкаПоПодразделению, СтруктураЗамен)
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		
		//изменение группировки в зависимости от настроек
		Если ЭлементСтруктуры.Имя = "Подразделение" Тогда
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Истина;
			Иначе
				ЭлементСтруктуры.Использование = Ложь;
			КонецЕсли;
			
		ИначеЕсли ЭлементСтруктуры.Имя = "Сотрудник" Тогда
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Ложь;
			Иначе
				ЭлементСтруктуры.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//заменим Сотрудника на ФизЛицо
		//	+ отключим группировки по должности, т.к. нужно выводить сводную цифру
		Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если ПолеГруппировки.Поле=СтруктураЗамен.ПКДГоловнойСотрудник ИЛИ ПолеГруппировки.Поле=СтруктураЗамен.ПКДСотрудник Тогда
				ПолеГруппировки.Поле=СтруктураЗамен.ПКДФизическоеЛицо;
			ИначеЕсли ПолеГруппировки.Поле=СтруктураЗамен.ПКДДолжность1 ИЛИ ПолеГруппировки.Поле=СтруктураЗамен.ПКДДолжность4 Тогда
				ПолеГруппировки.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ПолеВыбора Из ЭлементСтруктуры.Выбор.Элементы Цикл
			Если НЕ ТипЗнч(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПолеВыбора.Поле=СтруктураЗамен.ПКДГоловнойСотрудник2 ИЛИ ПолеВыбора.Поле=СтруктураЗамен.ПКДСотрудник2 Тогда
				ПолеВыбора.Поле=СтруктураЗамен.ПКДФизическоеЛицо2;
			ИначеЕсли ПолеВыбора.Поле=СтруктураЗамен.ПКДГоловнойСотрудник3 ИЛИ ПолеВыбора.Поле=СтруктураЗамен.ПКДСотрудник3 Тогда
				ПолеВыбора.Поле=СтруктураЗамен.ПКДФизическоеЛицо3;
			ИначеЕсли ПолеВыбора.Поле=СтруктураЗамен.ПКДСотрудник4 Тогда
				ПолеВыбора.Поле = СтруктураЗамен.ПКДФизическоеЛицо4;
			ИначеЕсли ПолеВыбора.Поле=СтруктураЗамен.ПКДДолжность2 ИЛИ ПолеВыбора.Поле=СтруктураЗамен.ПКДДолжность5 Тогда
				ПолеВыбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ПолеСортировки Из ЭлементСтруктуры.Порядок.Элементы Цикл
			Если НЕ ТипЗнч(ПолеСортировки) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПолеСортировки.Поле=СтруктураЗамен.ПКДСотрудник4 Тогда
				ПолеСортировки.Поле = СтруктураЗамен.ПКДФизическоеЛицо4;
			ИначеЕсли ПолеСортировки.Поле=СтруктураЗамен.ПКДГоловнойСотрудник2 Тогда
				ПолеСортировки.Поле = СтруктураЗамен.ПКДФизическоеЛицо2;
			ИначеЕсли ПолеСортировки.Поле=СтруктураЗамен.ПКДГоловнойСотрудник3 Тогда
				ПолеСортировки.Поле = СтруктураЗамен.ПКДФизическоеЛицо3;
			ИначеЕсли ПолеСортировки.Поле=СтруктураЗамен.ПКДДолжность3 Тогда
				ПолеСортировки.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		//обходим дерево дальше
		АнализНачисленийИУдержаний_Т51_Группировка(ЭлементСтруктуры.Структура, ЕстьГруппировкаПоПодразделению, СтруктураЗамен);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ДобавлениеПользовательскогоПоля(НастройкиОтчета, Заголовок, Выражение)
	
	АФМНовоеПоле=НастройкиОтчета.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
	АФМНовоеПоле.Использование=Истина;
	АФМНовоеПоле.Заголовок=Заголовок;
	АФМНовоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
	АФМНовоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма("+Выражение+")");
	
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(АФМНовоеПоле.ПутьКДанным);
	ПолеВыбора.Заголовок = Заголовок;
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ДобавленитьДеталицазиюВР(ВеткаВСтруктуре)
	
	ГруппировкаНов = ВеткаВСтруктуре.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	НовоеПоле = ГруппировкаНов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Группа");
	НовоеПоле = ГруппировкаНов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ВидРасчета");
	
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	МассивГрупп.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано);
	МассивГрупп.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно);
	
	НовыйОтбор = ГруппировкаНов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Группа");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.ПравоеЗначение = МассивГрупп;
	
	ПолеВыбора = ГруппировкаНов.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Группа");
	ПолеВыбора = ГруппировкаНов.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ВидРасчета");
	ПолеВыбора = ГруппировкаНов.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Сумма");
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ВывестиОрганизациюТ51(СтрокаОрганизации, 
	ДокументРезультат, 
	Макеты, 
	ЕстьГруппировкаПоПодразделению, 
	СоответствиеПользовательскихПолей,
	КлючВарианта,
	СтруктураПериода)
	
	//параметры
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ЕстьОплатаВНатуральнойФорме = (СтрокаОрганизации[СоответствиеПользовательскихПолей["НачисленоВНатуральнойФорме"]] <> 0);
	
	МассивФизЛиц =		Неопределено;
	КолонкиНачислено =	Неопределено;
	КолонкиНД =			Неопределено;
	КолонкиУдержано =	Неопределено;
	АнализНачисленийИУдержаний_Т51_СформироватьКолонки(МассивФизЛиц, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ЕстьГруппировкаПоПодразделению, СтрокаОрганизации);
	
	//получим срез должностей, т.к. выводим в отчете сводно, а потом присоединяем последнюю должность
	ЗапросДолжности=Новый Запрос;
	ЗапросДолжности.УстановитьПараметр("КонПериод", СтруктураПериода.ПериодКонец);
	ЗапросДолжности.УстановитьПараметр("Организация", СтрокаОрганизации.Организация);
	ЗапросДолжности.УстановитьПараметр("МассивФизЛиц", МассивФизЛиц);
	
	ЗапросДолжности.Текст=
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИсторияСотрудниковСрезПоследних.Период КАК Период,
	|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
	|	КадроваяИсторияСотрудниковСрезПоследних.Должность
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|			&КонПериод,
	|			Организация = &Организация
	|				И ФизическоеЛицо В (&МассивФизЛиц)) КАК КадроваяИсторияСотрудниковСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Период УБЫВ";
	
	ТаблицаДолжности=ЗапросДолжности.Выполнить().Выгрузить();
	
	//вывод	
	Если ЕстьГруппировкаПоПодразделению Тогда
		//группировка по организации + подразделению
		НомерПодразделения=0;
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			Если НЕ НомерПодразделения=0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			НомерПодразделения=НомерПодразделения+1;
			
			АнализНачисленийИУдержаний_Т51_ВывестиПодразделениеТ51(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей,
				ЕстьОплатаВНатуральнойФорме, КлючВарианта, КолонкиНачислено, КолонкиНД, КолонкиУдержано, СтруктураПериода, ТаблицаДолжности);
		КонецЦикла;
			
	Иначе
		
		//группировка по организации
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СтруктураПериода.Вставить("ОрганизацияТекст", СокрЛП(СтрокаОрганизации.Организация.НаименованиеСокращенное));
		
		Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
		Макеты.ШапкаДокумента.Параметры.Заполнить(СтруктураПериода);
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
			Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
		КонецЕсли; 
		ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
		
		АнализНачисленийИУдержаний_Т51_ВыводШапки(ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано);
		
		НомерСтроки = 0;
		ПромежуточныеИтоги = АнализНачисленийИУдержаний_Т51_ПромежуточныеИтогиПоСтраницеТ51(КолонкиНачислено, КолонкиНД, КолонкиУдержано);
		ИтогиПоОрганизации = АнализНачисленийИУдержаний_Т51_ПромежуточныеИтогиПоСтраницеТ51(КолонкиНачислено, КолонкиНД, КолонкиУдержано);
		Для Каждого СтрокаСотрудника Из СтрокаОрганизации.Строки Цикл
			АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51(НомерСтроки, 
				СтрокаСотрудника, 
				ДокументРезультат, 
				Макеты, 
				СоответствиеПользовательскихПолей, 
				ПромежуточныеИтоги,
				ИтогиПоОрганизации,
				ЕстьОплатаВНатуральнойФорме,
				КлючВарианта,
				КолонкиНачислено,
				КолонкиНД,
				КолонкиУдержано,
				ТаблицаДолжности);
		КонецЦикла;
		
		АнализНачисленийИУдержаний_Т51_ВыводИтогов(1, ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ПромежуточныеИтоги);
		
		АнализНачисленийИУдержаний_Т51_ВыводИтогов(2, ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ИтогиПоОрганизации);
		
		АнализНачисленийИУдержаний_Т51_ВыводПодвала(ДокументРезультат, Макеты.Подвал, СтрокаОрганизации.Организация, СтруктураПериода.ПериодКонец, СтруктураПериода)
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ВывестиПодразделениеТ51(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, 
	ЕстьОплатаВНатуральнойФорме, КлючВарианта, КолонкиНачислено, КолонкиНД, КолонкиУдержано, СтруктураПериода, ТаблицаДолжности)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	СтруктураПериода.Вставить("ОрганизацияТекст", СокрЛП(СтрокаПодразделения.Организация.НаименованиеСокращенное));
	
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаПодразделения);
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтруктураПериода);
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
	КонецЕсли; 
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	
	АнализНачисленийИУдержаний_Т51_ВыводШапки(ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано);
	
	НомерСтроки = 0;
	ПромежуточныеИтоги = АнализНачисленийИУдержаний_Т51_ПромежуточныеИтогиПоСтраницеТ51(КолонкиНачислено, КолонкиНД, КолонкиУдержано);
	ИтогиПоПодразделению = АнализНачисленийИУдержаний_Т51_ПромежуточныеИтогиПоСтраницеТ51(КолонкиНачислено, КолонкиНД, КолонкиУдержано);
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, 
			ПромежуточныеИтоги, ИтогиПоПодразделению, ЕстьОплатаВНатуральнойФорме, КлючВарианта, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ТаблицаДолжности);
	КонецЦикла;
	
	АнализНачисленийИУдержаний_Т51_ВыводИтогов(1, ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ПромежуточныеИтоги);
	
	АнализНачисленийИУдержаний_Т51_ВыводИтогов(2, ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ИтогиПоПодразделению);
	
	АнализНачисленийИУдержаний_Т51_ВыводПодвала(ДокументРезультат, Макеты.Подвал, СтрокаПодразделения.Организация, СтруктураПериода.ПериодКонец, СтруктураПериода)
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51(НомерСтроки,	СтрокаГоловногоСотрудника, ДокументРезультат, Макеты, 
	СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ИтогиПоУровню, ЕстьОплатаВНатуральнойФорме, КлючВарианта, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ТаблицаДолжности)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	МакетСотрудника = Новый ТабличныйДокумент;
	ПромежуточныеИтогиПоГоловномуСотруднику = АнализНачисленийИУдержаний_Т51_ПромежуточныеИтогиПоСтраницеТ51(КолонкиНачислено, КолонкиНД, КолонкиУдержано);
	
	Для Каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		//проверка строки
		Если СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("АФМСальдоНаНачало")]=0
			И СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ВсегоНачислено")]=0
			И СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("АФМВсегоУдержано")]=0
			И СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("АФМВыплата")]=0
			И СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("АФМПогашено")]=0
			И СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("АФМСальдоНаКонец")]=0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		//заполнение общих параметров по сотруднику
		Макеты.СтрокаЧасть1.Параметры.Заполнить(СтрокаСотрудника);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.СтрокаЧасть1, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		
		Если НЕ НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
			Если НЕ СтрокаСотрудника.ФизическоеЛицоФИО=NULL Тогда
				Макеты.СтрокаЧасть1.Параметры.ФизическоеЛицоФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СтрокаСотрудника.ФизическоеЛицоФИО);
			КонецЕсли;
		КонецЕсли;
		
		ОтработаноРабочихДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихДней")];
		
		Если ОтработаноРабочихДней > 0 Тогда 
			Макеты.СтрокаЧасть1.Параметры.ОтработаноРабочихДней = Формат(ОтработаноРабочихДней, "ЧДЦ=2; ЧГ=0; ДФ=");
		Иначе
			Макеты.СтрокаЧасть1.Параметры.ОтработаноРабочихДней = "";
		КонецЕсли;
				
		Макеты.СтрокаЧасть1.Параметры.НомерПП = НомерСтроки;
		
		СтруктураПоиска=Новый Структура("ФизическоеЛицо", СтрокаСотрудника.ФизическоеЛицо);
		КадровыеДанные=ТаблицаДолжности.НайтиСтроки(СтруктураПоиска);
		Если КадровыеДанные.Количество()>0 Тогда
			Макеты.СтрокаЧасть1.Параметры.ДолжностьНаКонецПериодаНаименованиеКраткое = СокрЛП(КадровыеДанные[0].Должность.НаименованиеКраткое);
		Иначе
			Макеты.СтрокаЧасть1.Параметры.ДолжностьНаКонецПериодаНаименованиеКраткое = "";
		КонецЕсли;
		
		//вывод
		МакетСотрудника.Вывести(Макеты.СтрокаЧасть1);
		
		АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(КолонкиНачислено, Макеты.СтрокаНачислено, МакетСотрудника, СтрокаСотрудника, ПромежуточныеИтогиПоГоловномуСотруднику);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.СтрокаЧасть2, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		МакетСотрудника.Присоединить(Макеты.СтрокаЧасть2);
		
		АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(КолонкиНД, Макеты.СтрокаНатуральныеДоходы, МакетСотрудника, СтрокаСотрудника, ПромежуточныеИтогиПоГоловномуСотруднику);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.СтрокаЧасть3, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		МакетСотрудника.Присоединить(Макеты.СтрокаЧасть3);
		
		АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(КолонкиУдержано, Макеты.СтрокаУдержано, МакетСотрудника, СтрокаСотрудника, ПромежуточныеИтогиПоГоловномуСотруднику);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.СтрокаЧасть4, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		
		//расчет - погашенного долга перед предприятием (расчетный метод)
		АФМПогашено=0;
		СальдоНаНачало=СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("АФМСальдоНаНачало")];
		Если СальдоНаНачало<0 Тогда
			СальдоНаКонец=0;
			Если СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("АФМСальдоНаКонец")]<0 Тогда
				СальдоНаКонец=СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("АФМСальдоНаКонец")];
			КонецЕсли;
			АФМПогашено=СальдоНаКонец-СальдоНаНачало;
		КонецЕсли;
		
		ПараметрыОбласти = Новый Структура;
		ПараметрыОбласти.Вставить("АФМПогашено", АФМПогашено);
		Макеты.СтрокаЧасть4.Параметры.Заполнить(ПараметрыОбласти);
		
		МакетСотрудника.Присоединить(Макеты.СтрокаЧасть4);
		
		//итоги
		АнализНачисленийИУдержаний_Т51_ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоГоловномуСотруднику, Макеты.СтрокаЧасть1.Параметры);
		АнализНачисленийИУдержаний_Т51_ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоГоловномуСотруднику, Макеты.СтрокаЧасть2.Параметры);
		АнализНачисленийИУдержаний_Т51_ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоГоловномуСотруднику, Макеты.СтрокаЧасть3.Параметры);
		АнализНачисленийИУдержаний_Т51_ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоГоловномуСотруднику, Макеты.СтрокаЧасть4.Параметры);
		
	КонецЦикла;
	
	//МассивВыводимыхОбластей = Новый Массив;
	//МассивВыводимыхОбластей.Добавить(МакетСотрудника);
	//МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтраницеЧасть1);
	//МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомостиЧасть1);
	//МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	//
	//Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
	//	
	//	АнализНачисленийИУдержаний_Т51_ВыводИтогов(1, ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ПромежуточныеИтоги);
	//	
	//	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	//	
	//	АнализНачисленийИУдержаний_Т51_ВыводШапки(ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано);
	//	
	//	ПромежуточныеИтоги = АнализНачисленийИУдержаний_Т51_ПромежуточныеИтогиПоСтраницеТ51(КолонкиНачислено, КолонкиНД, КолонкиУдержано);
	//	
	//КонецЕсли;
	
	АнализНачисленийИУдержаний_Т51_ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ПромежуточныеИтогиПоГоловномуСотруднику);
	АнализНачисленийИУдержаний_Т51_ДобавитьВПромежуточныйИтог(ИтогиПоУровню, ПромежуточныеИтогиПоГоловномуСотруднику);
	
	ДокументРезультат.Вывести(МакетСотрудника);
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(ТаблицаКолонок, МакетОбласти, ИтоговыйМакет, СтрокаСотрудника=0, ПромежуточныеИтоги=0)
	
	Для Каждого КолонкаВР Из ТаблицаКолонок Цикл
		МакетОбласти.Параметры.Заполнить(КолонкаВР);
		
		Если НЕ СтрокаСотрудника=0 И НЕ ПромежуточныеИтоги=0 Тогда
			//вычисли сумму в колонке по строке
			СуммаВР=0;
			Для Каждого СтрокаВР Из СтрокаСотрудника.Строки Цикл
				Если СтрокаВР.ВидРасчета=КолонкаВР.ВР Тогда
					СуммаВР=СуммаВР + СтрокаВР.Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыОбласти = Новый Структура;
			ПараметрыОбласти.Вставить("СуммаВР", СуммаВР);
			МакетОбласти.Параметры.Заполнить(ПараметрыОбласти);
			
			ПромежуточныеИтогиПоКолонке=Новый Структура();
			ПромежуточныеИтогиПоКолонке.Вставить(КолонкаВР.ВРКлюч, СуммаВР);
			АнализНачисленийИУдержаний_Т51_ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ПромежуточныеИтогиПоКолонке);
			
		ИначеЕсли СтрокаСотрудника=0 И НЕ ПромежуточныеИтоги=0 Тогда
			//вывод итогов
			СуммаВР=ПромежуточныеИтоги[КолонкаВР.ВРКлюч];
			Если СуммаВР=Неопределено Тогда
				СуммаВР=0;
			КонецЕсли;
			
			ПараметрыОбласти = Новый Структура;
			ПараметрыОбласти.Вставить("СуммаВР", СуммаВР);
			МакетОбласти.Параметры.Заполнить(ПараметрыОбласти);
		КонецЕсли;
		
		ИтоговыйМакет.Присоединить(МакетОбласти);
	КонецЦикла;
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ВыводШапки(ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано)
	
	ДокументРезультат.Вывести(Макеты.ШапкаЧасть1);
	
	АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(КолонкиНачислено, Макеты.ШапкаНачислено, ДокументРезультат);
	
	ДокументРезультат.Присоединить(Макеты.ШапкаЧасть2);
	
	АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(КолонкиНД, Макеты.ШапкаНатуральныеДоходы, ДокументРезультат);
	
	ДокументРезультат.Присоединить(Макеты.ШапкаЧасть3);
	
	АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(КолонкиУдержано, Макеты.ШапкаУдержано, ДокументРезультат);
	
	ДокументРезультат.Присоединить(Макеты.ШапкаЧасть4);
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ВыводПодвала(ДокументРезультат, Область, Организация, ПериодКонец, СтруктураПериода)
	
	//ПараметрыОбласти = ПолучитьПодписьюОтветсвенногоБухгалтера(Организация, ПериодКонец);
	
	Если НЕ СтруктураПериода.ПодписиОтветственный = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		
		//если указаны параметры отчета, то выводим их
		БухгалтерДолжность = СокрЛП(СтруктураПериода.ПодписиОтветственныйДолжность);
		БухгалтерФИО = СокрЛП(СтруктураПериода.ПодписиОтветственный);
		
		МассивФизЛиц=Новый Массив;
		МассивФизЛиц.Добавить(СтруктураПериода.ПодписиОтветственный);
		СоответствиеФИО = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(НачалоДня(ПериодКонец), МассивФизЛиц);
		СоответствиеФИОЗначение = СоответствиеФИО.Получить(СтруктураПериода.ПодписиОтветственный);
		Если НЕ СоответствиеФИОЗначение = Неопределено Тогда
			БухгалтерФИО = ВРег(Лев(СоответствиеФИОЗначение.Имя,1))+"."+ВРег(Лев(СоответствиеФИОЗначение.Отчество,1))+". "+СоответствиеФИОЗначение.Фамилия;
		КонецЕсли;
		
		ОбщаяПодпись = БухгалтерДолжность + "  ____________________________________  " + БухгалтерФИО;
		ПараметрыОбласти = Новый Структура;
		ПараметрыОбласти.Вставить("ОбщаяПодпись", ОбщаяПодпись);
		
	Иначе
		
		//если не указаны берем из ответсвенных лиц организации
		ПараметрыОбласти = ПолучитьСведенияОбОтветственныхЛицах(Организация, ПериодКонец);
		ПараметрыОбласти.Вставить("ОбщаяПодпись", ПараметрыОбласти.ГлавныйБухгалтерПодпись);
		
	КонецЕсли;
	
	Область.Параметры.Заполнить(ПараметрыОбласти);
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры

Функция ПолучитьСведенияОбОтветственныхЛицах(Организация, ДатаДанных) Экспорт
	
	//справочно: используется в других отчетах
	
	//параметры
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Руководитель",						Справочники.ФизическиеЛица.ПустаяСсылка());
	СтруктураПараметров.Вставить("РуководительФИО",						"");
	СтруктураПараметров.Вставить("ДолжностьРуководителя",				"");
	СтруктураПараметров.Вставить("РуководительПодпись",					"_____________________________  _____________________________  _____________________________");
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",					Справочники.ФизическиеЛица.ПустаяСсылка());
	СтруктураПараметров.Вставить("ГлавныйБухгалтерФИО",					"");
	СтруктураПараметров.Вставить("ДолжностьГлавныйБухгалтер",			"");
	СтруктураПараметров.Вставить("ГлавныйБухгалтерПодпись",				"_____________________________  _____________________________  _____________________________");
	СтруктураПараметров.Вставить("РуководительКадровойСлужбы",			Справочники.ФизическиеЛица.ПустаяСсылка());
	СтруктураПараметров.Вставить("РуководительКадровойСлужбыФИО",		"");
	СтруктураПараметров.Вставить("ДолжностьРуководителяКадровойСлужбы",	"");
	СтруктураПараметров.Вставить("РуководительКадровойСлужбыПодпись",	"_____________________________  _____________________________  _____________________________");
	
	//чтение данных
	ЗапросОтветсвенныеЛица = Новый Запрос;
	ЗапросОтветсвенныеЛица.УстановитьПараметр("Организация", Организация);
	ЗапросОтветсвенныеЛица.УстановитьПараметр("ДатаДанных", НачалоДня(ДатаДанных));
	
	ЗапросОтветсвенныеЛица.Текст =
	"ВЫБРАТЬ
	|	СведенияОбОтветственныхЛицахСрезПоследних.Руководитель,
	|	СведенияОбОтветственныхЛицахСрезПоследних.ДолжностьРуководителя,
	|	СведенияОбОтветственныхЛицахСрезПоследних.ГлавныйБухгалтер,
	|	СведенияОбОтветственныхЛицахСрезПоследних.РуководительКадровойСлужбы,
	|	СведенияОбОтветственныхЛицахСрезПоследних.ДолжностьРуководителяКадровойСлужбы
	|ПОМЕСТИТЬ ВТОтветсвенныеЛица
	|ИЗ
	|	РегистрСведений.СведенияОбОтветственныхЛицах.СрезПоследних(&ДатаДанных, Организация = &Организация) КАК СведенияОбОтветственныхЛицахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо,
	|	МАКСИМУМ(КадроваяИсторияСотрудниковСрезПоследних.Должность) КАК Должность
	|ПОМЕСТИТЬ ВТКадровыеДанные
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|			&ДатаДанных,
	|			Организация = &Организация
	|				И ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						ВТОтветсвенныеЛица.ГлавныйБухгалтер
	|					ИЗ
	|						ВТОтветсвенныеЛица)) КАК КадроваяИсторияСотрудниковСрезПоследних
	|ГДЕ
	|	КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|
	|СГРУППИРОВАТЬ ПО
	|	КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтветсвенныеЛица.Руководитель,
	|	ВТОтветсвенныеЛица.ДолжностьРуководителя,
	|	ВТОтветсвенныеЛица.ГлавныйБухгалтер,
	|	ЕСТЬNULL(ВТКадровыеДанные.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ДолжностьГлавныйБухгалтер,
	|	ВТОтветсвенныеЛица.РуководительКадровойСлужбы,
	|	ВТОтветсвенныеЛица.ДолжностьРуководителяКадровойСлужбы
	|ИЗ
	|	ВТОтветсвенныеЛица КАК ВТОтветсвенныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанные КАК ВТКадровыеДанные
	|		ПО ВТОтветсвенныеЛица.ГлавныйБухгалтер = ВТКадровыеДанные.ФизическоеЛицо";
	
	ТаблицаОтветсвенных = ЗапросОтветсвенныеЛица.Выполнить().Выгрузить();
	
	Если ТаблицаОтветсвенных.Количество() > 0 Тогда
		
		СтрокаОтветсвенныеЛица = ТаблицаОтветсвенных[0];
		
		МассивФизЛиц=Новый Массив;
		МассивФизЛиц.Добавить(СтрокаОтветсвенныеЛица.Руководитель);
		МассивФизЛиц.Добавить(СтрокаОтветсвенныеЛица.ГлавныйБухгалтер);
		МассивФизЛиц.Добавить(СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы);
		СоответствиеФИО=ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(НачалоДня(ДатаДанных), МассивФизЛиц);
		
		Если НЕ СтрокаОтветсвенныеЛица.Руководитель = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			
			РуководительФИО = СокрЛП(СтрокаОтветсвенныеЛица.Руководитель);
			СоответствиеФИОЗначение = СоответствиеФИО.Получить(СтрокаОтветсвенныеЛица.Руководитель);
			Если НЕ СоответствиеФИОЗначение = Неопределено Тогда
				РуководительФИО = ВРег(Лев(СоответствиеФИОЗначение.Имя,1))+"."+ВРег(Лев(СоответствиеФИОЗначение.Отчество,1))+". "+СоответствиеФИОЗначение.Фамилия;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("Руководитель", СтрокаОтветсвенныеЛица.Руководитель);
			СтруктураПараметров.Вставить("РуководительФИО", РуководительФИО);
			СтруктураПараметров.Вставить("ДолжностьРуководителя", СокрЛП(СтрокаОтветсвенныеЛица.ДолжностьРуководителя));
			СтруктураПараметров.Вставить("РуководительПодпись", СтруктураПараметров.ДолжностьРуководителя + "  _____________________________  " + СтруктураПараметров.РуководительФИО);
			
		КонецЕсли;
		
		Если НЕ СтрокаОтветсвенныеЛица.ГлавныйБухгалтер = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			
			ГлавныйБухгалтерФИО = СокрЛП(СтрокаОтветсвенныеЛица.ГлавныйБухгалтер);
			СоответствиеФИОЗначение = СоответствиеФИО.Получить(СтрокаОтветсвенныеЛица.ГлавныйБухгалтер);
			Если НЕ СоответствиеФИОЗначение = Неопределено Тогда
				ГлавныйБухгалтерФИО = ВРег(Лев(СоответствиеФИОЗначение.Имя,1))+"."+ВРег(Лев(СоответствиеФИОЗначение.Отчество,1))+". "+СоответствиеФИОЗначение.Фамилия;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("ГлавныйБухгалтер", СтрокаОтветсвенныеЛица.ГлавныйБухгалтер);
			СтруктураПараметров.Вставить("ГлавныйБухгалтерФИО", ГлавныйБухгалтерФИО);
			СтруктураПараметров.Вставить("ДолжностьГлавныйБухгалтер", СокрЛП(СтрокаОтветсвенныеЛица.ДолжностьГлавныйБухгалтер));
			СтруктураПараметров.Вставить("ГлавныйБухгалтерПодпись", СтруктураПараметров.ДолжностьГлавныйБухгалтер + "  _____________________________  " + СтруктураПараметров.ГлавныйБухгалтерФИО);
			
		КонецЕсли;
		
		Если НЕ СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			
			РуководительКадровойСлужбыФИО = СокрЛП(СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы);
			СоответствиеФИОЗначение = СоответствиеФИО.Получить(СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы);
			Если НЕ СоответствиеФИОЗначение = Неопределено Тогда
				РуководительКадровойСлужбыФИО = ВРег(Лев(СоответствиеФИОЗначение.Имя,1))+"."+ВРег(Лев(СоответствиеФИОЗначение.Отчество,1))+". "+СоответствиеФИОЗначение.Фамилия;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("РуководительКадровойСлужбы", СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы);
			СтруктураПараметров.Вставить("РуководительКадровойСлужбыФИО", РуководительКадровойСлужбыФИО);
			СтруктураПараметров.Вставить("ДолжностьРуководителяКадровойСлужбы", СокрЛП(СтрокаОтветсвенныеЛица.ДолжностьРуководителяКадровойСлужбы));
			СтруктураПараметров.Вставить("РуководительКадровойСлужбыПодпись", СтруктураПараметров.ДолжностьРуководителяКадровойСлужбы + "  _____________________________  " + СтруктураПараметров.РуководительКадровойСлужбыФИО);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//завершение
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура АнализНачисленийИУдержаний_Т51_ВыводИтогов(ВидИтогов, ДокументРезультат, Макеты, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ПромежуточныеИтоги)
	
	//блокируем вывод итогов по странице
	Если ВидИтогов = 1 Тогда
		Возврат;
	КонецЕсли;
	
	//определим макеты областей
	ОбластьЧасть1=Макеты.ИтогоПоСтраницеЧасть1;
	ОбластьНачислено=Макеты.ИтогоПоСтраницеНачислено;
	ОбластьЧасть2=Макеты.ИтогоПоСтраницеЧасть2;
	ОбластьНатуральныеДоходы=Макеты.ИтогоПоСтраницеНатуральныеДоходы;
	ОбластьЧасть3=Макеты.ИтогоПоСтраницеЧасть3;
	ОбластьУдержано=Макеты.ИтогоПоСтраницеУдержано;
	ОбластьЧасть4=Макеты.ИтогоПоСтраницеЧасть4;
	
	Если ВидИтогов=2 Тогда
		ОбластьЧасть1=Макеты.ИтогоПоВедомостиЧасть1;
		ОбластьНачислено=Макеты.ИтогоПоВедомостиНачислено;
		ОбластьЧасть2=Макеты.ИтогоПоВедомостиЧасть2;
		ОбластьНатуральныеДоходы=Макеты.ИтогоПоВедомостиНатуральныеДоходы;
		ОбластьЧасть3=Макеты.ИтогоПоВедомостиЧасть3;
		ОбластьУдержано=Макеты.ИтогоПоВедомостиУдержано;
		ОбластьЧасть4=Макеты.ИтогоПоВедомостиЧасть4;
	КонецЕсли;
	
	//вывод итогов
	ЗаполнитьЗначенияСвойств(ОбластьЧасть1.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Вывести(ОбластьЧасть1);
	
	АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(КолонкиНачислено, ОбластьНачислено, ДокументРезультат, , ПромежуточныеИтоги);
	
	ЗаполнитьЗначенияСвойств(ОбластьЧасть2.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Присоединить(ОбластьЧасть2);
	
	АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(КолонкиНД, ОбластьНатуральныеДоходы, ДокументРезультат, , ПромежуточныеИтоги);
	
	ЗаполнитьЗначенияСвойств(ОбластьЧасть3.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Присоединить(ОбластьЧасть3);
	
	АнализНачисленийИУдержаний_Т51_ВывестиСотрудникаТ51_ВыводГруппыКолонок(КолонкиУдержано, ОбластьУдержано, ДокументРезультат, , ПромежуточныеИтоги);
	
	ЗаполнитьЗначенияСвойств(ОбластьЧасть4.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Присоединить(ОбластьЧасть4);
	
	
КонецПроцедуры

Функция АнализНачисленийИУдержаний_Т51_ПромежуточныеИтогиПоСтраницеТ51(КолонкиНачислено, КолонкиНД, КолонкиУдержано)
	
	ПромежуточныеИтоги = Новый Структура;
	
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("НДФЛ", 0);
	
	ПромежуточныеИтоги.Вставить("АФМСальдоНаНачало", 0);
	ПромежуточныеИтоги.Вставить("АФМВсегоНатуральныеДоходы", 0);
	ПромежуточныеИтоги.Вставить("АФМВсегоУдержано", 0);
	ПромежуточныеИтоги.Вставить("АФМВыплата", 0);
	ПромежуточныеИтоги.Вставить("АФМПогашено", 0);
	ПромежуточныеИтоги.Вставить("АФМСальдоНаКонец", 0);
	
	Для Каждого КолонкаВР Из КолонкиНачислено Цикл
		ПромежуточныеИтоги.Вставить(КолонкаВР.ВРКлюч, 0);
	КонецЦикла;
	
	Для Каждого КолонкаВР Из КолонкиНД Цикл
		ПромежуточныеИтоги.Вставить(КолонкаВР.ВРКлюч, 0);
	КонецЦикла;
	
	Для Каждого КолонкаВР Из КолонкиУдержано Цикл
		ПромежуточныеИтоги.Вставить(КолонкаВР.ВРКлюч, 0);
	КонецЦикла;
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

Процедура АнализНачисленийИУдержаний_Т51_ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ДанныеСтроки)
	
	Для Каждого ПромежуточныйИтог Из ПромежуточныеИтоги Цикл
		//т.к. область строки разбита, то параметра может не быть
		Попытка
			ПромежуточныеИтоги.Вставить(ПромежуточныйИтог.Ключ, ПромежуточныйИтог.Значение + ДанныеСтроки[ПромежуточныйИтог.Ключ]);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_СформироватьКолонки(МассивФизЛиц, КолонкиНачислено, КолонкиНД, КолонкиУдержано, ЕстьГруппировкаПоПодразделению, СтрокаОрганизации)	
	
	//определим таблицы
	МассивФизЛиц = Новый Массив;
	
	КолонкиНачислено=Новый ТаблицаЗначений;
	КолонкиНачислено.Колонки.Добавить("ВРКлюч");
	КолонкиНачислено.Колонки.Добавить("ВР");
	КолонкиНачислено.Колонки.Добавить("Наименование");
	КолонкиНачислено.Колонки.Добавить("Порядок");
	
	КолонкиНД=Новый ТаблицаЗначений;
	КолонкиНД.Колонки.Добавить("ВРКлюч");
	КолонкиНД.Колонки.Добавить("ВР");
	КолонкиНД.Колонки.Добавить("Наименование");
	КолонкиНД.Колонки.Добавить("Порядок");
	
	КолонкиУдержано=Новый ТаблицаЗначений;
	КолонкиУдержано.Колонки.Добавить("ВРКлюч");
	КолонкиУдержано.Колонки.Добавить("ВР");
	КолонкиУдержано.Колонки.Добавить("Наименование");
	КолонкиУдержано.Колонки.Добавить("Порядок");
	
	//чтение данных
	Если ЕстьГруппировкаПоПодразделению Тогда
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			АнализНачисленийИУдержаний_Т51_СформироватьКолонкиЧтение(МассивФизЛиц, КолонкиНачислено, КолонкиНД, КолонкиУдержано, СтрокаПодразделения.Строки);
		КонецЦикла;
	Иначе
		АнализНачисленийИУдержаний_Т51_СформироватьКолонкиЧтение(МассивФизЛиц, КолонкиНачислено, КолонкиНД, КолонкиУдержано, СтрокаОрганизации.Строки);
	КонецЕсли;
	
	//свернем и дополним
	АнализНачисленийИУдержаний_Т51_ДополнитьКолонки(КолонкиНачислено);
	АнализНачисленийИУдержаний_Т51_ДополнитьКолонки(КолонкиНД);
	АнализНачисленийИУдержаний_Т51_ДополнитьКолонки(КолонкиУдержано);
	
	//сортировка
	КолонкиНачислено.Сортировать("Порядок, Наименование");
	КолонкиНД.Сортировать("Порядок, Наименование");
	КолонкиУдержано.Сортировать("Порядок, Наименование");
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_СформироватьКолонкиЧтение(МассивФизЛиц, КолонкиНачислено, КолонкиНД, КолонкиУдержано, СтрокаГруппировки)	
	
	Для Каждого СтрокаГоловногоСотрудника Из СтрокаГруппировки Цикл
		
		Для Каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
			
			МассивФизЛиц.Добавить(СтрокаСотрудника.ФизическоеЛицо);
			
			Для Каждого СтрокаВР Из СтрокаСотрудника.Строки Цикл
				
				//проверка общая
				Если СтрокаВР.Сумма=0 Тогда
					Продолжить;
				КонецЕсли;
				
				//проверим ВР является ли он доходом в натуральной форме
				ЯвляетсяДоходомВНатуральнойФорме=Ложь;
				Попытка
					ЯвляетсяДоходомВНатуральнойФорме=СтрокаВР.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме;
				Исключение
					Если СтрокаВР.ВидРасчета=Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов Тогда
						ЯвляетсяДоходомВНатуральнойФорме=Истина;
					КонецЕсли;
				КонецПопытки;
				
				//добавление в колонку
				НоваяСтрока=Неопределено;
				Если СтрокаВР.Группа=Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
					//Если ЯвляетсяДоходомВНатуральнойФорме=Истина Тогда
					//	НоваяСтрока=КолонкиНД.Добавить();
					//Иначе
						НоваяСтрока=КолонкиНачислено.Добавить();
					//КонецЕсли;
					
				ИначеЕсли СтрокаВР.Группа=Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно Тогда
					Если НЕ СтрокаВР.ВидРасчета=Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено
						И НЕ СтрокаВР.ВидРасчета=Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету Тогда
						НоваяСтрока=КолонкиНД.Добавить();
					КонецЕсли;
					
				ИначеЕсли СтрокаВР.Группа=Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано Тогда
					Если НЕ СтрокаВР.ВидРасчета=Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ Тогда
						НоваяСтрока=КолонкиУдержано.Добавить();
					КонецЕсли;
				КонецЕсли;
				
				Если НоваяСтрока=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока.ВР=СтрокаВР.ВидРасчета;
				НоваяСтрока.Наименование="";
				НоваяСтрока.ВРКлюч="";
				НоваяСтрока.Порядок=9;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_Т51_ДополнитьКолонки(ТаблицаКолонок)	

	ТаблицаКолонок.Свернуть("ВРКлюч, ВР, Наименование, Порядок");
	
	Для Каждого СтрокаВР Из ТаблицаКолонок Цикл
		
		ВРКлюч=Новый УникальныйИдентификатор;
		ВРКлюч=СтрЗаменить(СокрЛП(ВРКлюч),"-","");
		ВРКлюч="key"+ВРКлюч;
		СтрокаВР.ВРКлюч=ВРКлюч;//текстовый ключ для структуры параметров
		
		СтрокаВР.Наименование=СокрЛП(СтрокаВР.ВР);
		
		Попытка
			НаиенованиеАнализа=НРег(СокрЛП(СтрокаВР.ВР.Наименование));
		Исключение
			НаиенованиеАнализа="";
		КонецПопытки;
		
		Порядок=9;
		Если СтрНайти(НаиенованиеАнализа, "оклад")>0 Тогда
			Порядок=0;
		ИначеЕсли СтрНайти(НаиенованиеАнализа, "больничный")>0 Тогда
			Порядок=2;
		ИначеЕсли СтрНайти(НаиенованиеАнализа, "отпуск")>0 Тогда
			Порядок=1;
		ИначеЕсли СтрНайти(НаиенованиеАнализа, "исполнительн")>0 Тогда
			Порядок=0;
		КонецЕсли;
		СтрокаВР.Порядок=Порядок;
		
	КонецЦикла;
	
	ТаблицаКолонок.Сортировать("Порядок, Наименование");
	
КонецПроцедуры

Функция ИОФамилияФизическогоЛица(ФизическоеЛицо)
	
	ИОФамилия = "";
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, "ИОФамилия");
		Если КадровыеДанные.Количество() > 0 Тогда
			ИОФамилия = КадровыеДанные[0].ИОФамилия;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИОФамилия;
	
КонецФункции
//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000007190 05.05.2016

#КонецОбласти

#Область ПолныйСводНачисленийУдержанийИВыплат

//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000006460
Процедура АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Попытка
		
		//общие параметры
		СхемаКомпоновкиДанных	= Отчет.СхемаКомпоновкиДанных;
		КомпоновщикНастроек		= Отчет.КомпоновщикНастроек;
		КлючВарианта			= ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		//анализ по проектам
		ИспользоватьСФ = Ложь;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
			ИспользоватьСФ = Истина;
		КонецЕсли;
		
		ОборПроект = ЗначениеПараметра(НастройкиОтчета, "АФМ_Проект");
		
		ИспользоватьОтборПоПроекту = Истина;
		Если ИспользоватьСФ = Ложь Тогда
			Если ОборПроект = Справочники.ГруппыСотрудников.ПустаяСсылка() Тогда
				ИспользоватьОтборПоПроекту = Ложь;
			КонецЕсли;
		Иначе
			Если ОборПроект = Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка() Тогда
				ИспользоватьОтборПоПроекту = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		//изменение варианта настроек
		ФормироватьПоВсемОрганизациям = Ложь;
		ПолеОрганизация = Новый ПолеКомпоновкиДанных("Организация");
		Для Каждого ЭлементОтбора Из НастройкиОтчета.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеОрганизация Тогда
				ФормироватьПоВсемОрганизациям = НЕ ЭлементОтбора.Использование;
			КонецЕсли;
		КонецЦикла;
		
		АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат_ИзменитьГруппировкиВарианта(НастройкиОтчета.Структура, , ФормироватьПоВсемОрганизациям, ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект);
		
		//параметры отчета
		ПериодНачало = Дата(1,1,1);
		ПериодКонец = Дата(1,1,1);
		ПериодОтчетаТекст = "";
		
		ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если Не ПараметрПериод = Неопределено Тогда
			ПериодНачало=ПараметрПериод.Значение.ДатаНачала;
			ПериодКонец=ПараметрПериод.Значение.ДатаОкончания;
			Если Год(ПериодНачало)=Год(ПериодКонец) И Месяц(ПериодНачало)=Месяц(ПериодКонец) Тогда
				ПериодОтчетаТекст=Формат(ПериодКонец,"ДФ='ММММ гггг'")+" г.";
			Иначе
				ПериодОтчетаТекст=" период с "+Формат(ПериодНачало,"ДФ=dd.MM.yyyy")+" по "+Формат(ПериодКонец,"ДФ=dd.MM.yyyy");
			КонецЕсли;
		КонецЕсли;
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Период") Тогда
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период);
		КонецЕсли; 
		
		РазбиватьПоПериодуДействий = ЗначениеПараметра(НастройкиОтчета, "АФМ_РазбиватьПоПериодуДействий");
		Если РазбиватьПоПериодуДействий=Неопределено Тогда
			РазбиватьПоПериодуДействий=Ложь;
		КонецЕсли;
		
		ОтборФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		ПолеОтбора = Новый ПолеКомпоновкиДанных("ФизическоеЛицо");
		Для Каждого ЭлементОтбора Из НастройкиОтчета.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование=Ложь Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементОтбора.ЛевоеЗначение=ПолеОтбора Тогда
				ОтборФизЛицо=ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
		КонецЦикла;
				
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
		
		//выводим данные в коллекцию значений
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		//чтение наименования ВР для свода (НаименованиеДляСвода)
		ЗапросДоп = Новый Запрос;
		ЗапросДоп.Текст =
		"ВЫБРАТЬ
		|	НачисленияДополнительныеРеквизиты.Ссылка КАК ВидРасчета,
		|	НачисленияДополнительныеРеквизиты.Значение КАК НаименованиеДляСвода
		|ИЗ
		|	ПланВидовРасчета.Начисления.ДополнительныеРеквизиты КАК НачисленияДополнительныеРеквизиты
		|ГДЕ
		|	НачисленияДополнительныеРеквизиты.Свойство.Наименование = ""НаименованиеДляСвода (Начисление)""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УдержанияДополнительныеРеквизиты.Ссылка,
		|	УдержанияДополнительныеРеквизиты.Значение
		|ИЗ
		|	ПланВидовРасчета.Удержания.ДополнительныеРеквизиты КАК УдержанияДополнительныеРеквизиты
		|ГДЕ
		|	УдержанияДополнительныеРеквизиты.Свойство.Наименование = ""НаименованиеДляСвода (Удержание)""
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидРасчета";
		ТблНаименованиеДляСвода = ЗапросДоп.Выполнить().Выгрузить();
		
		//параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПолныйСводНачисленийУдержанийИВыплат_АФМ";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.АФМ_ПолныйСводНачисленийИУдержаний");
		
		Макеты = Новый Структура("Шапка, ШапкаТаблицы, ЗаголовокНачисленоУдержано, СтрокаНачисленоУдержано, ИтогНачисленоУдержано, ЗаголовокСправочноВыплачено,
								|СтрокаДоходыВыплачено, ИтогДоходыВыплачено, ДолгЗаПредприятием, ДолгЗаРаботниками, ПустаяСтрока, ОбластьОтбор");
		Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
		Макеты.ЗаголовокНачисленоУдержано = Макет.ПолучитьОбласть("ЗаголовокНачисленоУдержано");
		Макеты.ИтогНачисленоУдержано = Макет.ПолучитьОбласть("ИтогНачисленоУдержано");
		Макеты.ЗаголовокСправочноВыплачено = Макет.ПолучитьОбласть("ЗаголовокСправочноВыплачено");
		Макеты.СтрокаДоходыВыплачено = Макет.ПолучитьОбласть("СтрокаДоходыВыплачено");
		Макеты.ИтогДоходыВыплачено = Макет.ПолучитьОбласть("ИтогДоходыВыплачено");
		Макеты.ДолгЗаПредприятием = Макет.ПолучитьОбласть("ДолгЗаПредприятием");
		Макеты.ДолгЗаРаботниками = Макет.ПолучитьОбласть("ДолгЗаРаботниками");
		Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
		Макеты.ОбластьОтбор = Макет.ПолучитьОбласть("ОбластьОтбор");
		
		Если РазбиватьПоПериодуДействий=Истина Тогда
			Макеты.ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСПериодом");
			Макеты.СтрокаНачисленоУдержано = Макет.ПолучитьОбласть("СтрокаНачисленоУдержаноСПериодом");
		Иначе
			Макеты.ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
			Макеты.СтрокаНачисленоУдержано = Макет.ПолучитьОбласть("СтрокаНачисленоУдержано");
		КонецЕсли;
		
		//выводим по организациям
		ПервыйЛист = Истина;
		Для Каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
			
			Если ПервыйЛист = Ложь Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(Макеты.ПустаяСтрока);
			КонецЕсли;
			ПервыйЛист = Ложь;
			
			//вывод шапки 1
			ОрганизацияТекст="По всем организациям";
			Если ФормироватьПоВсемОрганизациям=Ложь Тогда
				ОрганизацияТекст=СокрЛП(СтрокаОрганизации.Организация.НаименованиеСокращенное);
			КонецЕсли;
			
			ПараметрыОбласти = Новый Структура;
			ПараметрыОбласти.Вставить("Организация", ОрганизацияТекст);
			ПараметрыОбласти.Вставить("ПериодОтчета", ПериодОтчетаТекст);
			
			Область = Макеты.Шапка;
			Область.Параметры.Заполнить(ПараметрыОбласти);
			ДокументРезультат.Вывести(Область);
			
			//вывод отбора по физ-лицу
			Если НЕ ОтборФизЛицо=Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
				ПараметрыОбласти = Новый Структура;
				ПараметрыОбласти.Вставить("СписокСотрудников", СокрЛП(ОтборФизЛицо.Наименование));
				
				Область = Макеты.ОбластьОтбор;
				Область.Параметры.Заполнить(ПараметрыОбласти);
				ДокументРезультат.Вывести(Область);
			КонецЕсли;
			
			//вывод шапки 2
			ДокументРезультат.Вывести(Макеты.ШапкаТаблицы);
			
			//получим из дерева значений нужные таблицы значений
			СальдоВходящие=0;
			СальдоКонечное=0;
			СальдоЗаРаботникамиВходящие=0;
			СальдоЗаРаботникамиКонечное=0;
			ТблНачислено=Неопределено;
			ТблУдержано=Неопределено;
			ТблСправочно=Неопределено;
			ТблВыплачено=Неопределено;
			
			РасчетДанныхПоОрганизации(РазбиватьПоПериодуДействий, СтрокаОрганизации, ТблНачислено, ТблУдержано, ТблСправочно, ТблВыплачено, ТблНаименованиеДляСвода, 
										СальдоВходящие, СальдоКонечное, СальдоЗаРаботникамиВходящие, СальдоЗаРаботникамиКонечное, НачалоМесяца(ПериодНачало), НачалоМесяца(ПериодКонец),
										ИспользоватьСФ, ИспользоватьОтборПоПроекту, ОборПроект);
			
			//вывод разделов 1 и 2
			ДокументРезультат.Вывести(Макеты.ЗаголовокНачисленоУдержано);
			
			ИндексНачисленно=ТблНачислено.Количество()-1;
			ИндексУдержано=ТблУдержано.Количество()-1;
			МаксимальныйИндекс=Макс(ИндексНачисленно,ИндексУдержано);
			Для ТекущийИндекс=0 По МаксимальныйИндекс Цикл
				ПараметрыОбласти = Новый Структура();
				
				Если ТекущийИндекс<=ИндексНачисленно Тогда
					ПараметрыОбласти.Вставить("НаименованиеДляСвода1", ТблНачислено[ТекущийИндекс].НаименованиеДляСвода);
					ПараметрыОбласти.Вставить("ОтработаноДней", ТблНачислено[ТекущийИндекс].ОтработаноДней);
					ПараметрыОбласти.Вставить("ОтработаноЧасов", ТблНачислено[ТекущийИндекс].ОтработаноЧасов);
					ПараметрыОбласти.Вставить("ПериодДействия", АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат_ПредставлениеПериода(ТблНачислено[ТекущийИндекс].Период));
					ПараметрыОбласти.Вставить("Сумма1", ТблНачислено[ТекущийИндекс].Сумма);
				Иначе
					ПараметрыОбласти.Вставить("НаименованиеДляСвода1", "");
					ПараметрыОбласти.Вставить("ОтработаноДней", 0);
					ПараметрыОбласти.Вставить("ОтработаноЧасов", 0);
					ПараметрыОбласти.Вставить("ПериодДействия", "");
					ПараметрыОбласти.Вставить("Сумма1", 0);
				КонецЕсли;
				Если ТекущийИндекс<=ИндексУдержано Тогда
					ПараметрыОбласти.Вставить("НаименованиеДляСвода2", ТблУдержано[ТекущийИндекс].НаименованиеДляСвода);
					ПараметрыОбласти.Вставить("Сумма2", ТблУдержано[ТекущийИндекс].Сумма);
				Иначе
					ПараметрыОбласти.Вставить("НаименованиеДляСвода2", "");
					ПараметрыОбласти.Вставить("Сумма2", 0);
				КонецЕсли;
				
				Область = Макеты.СтрокаНачисленоУдержано;
				Область.Параметры.Заполнить(ПараметрыОбласти);
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
			
			//вывод разделов 1 и 2 - итоги
			ПараметрыОбласти = Новый Структура;
			ПараметрыОбласти.Вставить("Сумма1", ТблНачислено.Итог("Сумма"));
			ПараметрыОбласти.Вставить("Сумма2", ТблУдержано.Итог("Сумма"));
			Область = Макеты.ИтогНачисленоУдержано;
			Область.Параметры.Заполнить(ПараметрыОбласти);
			ДокументРезультат.Вывести(Область);
			
			//вывод разделов 3 и 4
			ДокументРезультат.Вывести(Макеты.ЗаголовокСправочноВыплачено);
			
			ИндексСправочно=ТблСправочно.Количество()-1;
			ИндексВыплачено=ТблВыплачено.Количество()-1;
			МаксимальныйИндекс=Макс(ИндексСправочно,ИндексВыплачено);
			Для ТекущийИндекс=0 По МаксимальныйИндекс Цикл
				ПараметрыОбласти = Новый Структура();
				
				Если ТекущийИндекс<=ИндексСправочно Тогда
					ПараметрыОбласти.Вставить("НаименованиеДляСвода", ТблСправочно[ТекущийИндекс].НаименованиеДляСвода);
					ПараметрыОбласти.Вставить("Сумма3", ТблСправочно[ТекущийИндекс].Сумма);
				Иначе
					ПараметрыОбласти.Вставить("НаименованиеДляСвода", "");
					ПараметрыОбласти.Вставить("Сумма3", 0);
				КонецЕсли;
				Если ТекущийИндекс<=ИндексВыплачено Тогда
					ПараметрыОбласти.Вставить("ДокТекст", ТблВыплачено[ТекущийИндекс].ДокТекст);
					ПараметрыОбласти.Вставить("Сумма4", ТблВыплачено[ТекущийИндекс].Сумма);
				Иначе
					ПараметрыОбласти.Вставить("ДокТекст", "");
					ПараметрыОбласти.Вставить("Сумма4", 0);
				КонецЕсли;
				
				Область = Макеты.СтрокаДоходыВыплачено;
				Область.Параметры.Заполнить(ПараметрыОбласти);
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
			
			//вывод разделов 3 и 4 - итоги
			ПараметрыОбласти = Новый Структура;
			ПараметрыОбласти.Вставить("Сумма3", ТблСправочно.Итог("Сумма"));
			ПараметрыОбласти.Вставить("Сумма4", ТблВыплачено.Итог("Сумма"));
			Область = Макеты.ИтогДоходыВыплачено;
			Область.Параметры.Заполнить(ПараметрыОбласти);
			ДокументРезультат.Вывести(Область);
			
			//вывод общих итогов
			ПараметрыОбласти = Новый Структура;
			ПараметрыОбласти.Вставить("ДолгНаНачало", СальдоВходящие);
			ПараметрыОбласти.Вставить("ДолгНаКонец", СальдоКонечное);
			Область = Макеты.ДолгЗаПредприятием;
			Область.Параметры.Заполнить(ПараметрыОбласти);
			ДокументРезультат.Вывести(Область);
			
			ПараметрыОбласти = Новый Структура;
			ПараметрыОбласти.Вставить("ДолгНаНачало", СальдоЗаРаботникамиВходящие);
			ПараметрыОбласти.Вставить("ДолгНаКонец", СальдоЗаРаботникамиКонечное);
			Область = Макеты.ДолгЗаРаботниками;
			Область.Параметры.Заполнить(ПараметрыОбласти);
			ДокументРезультат.Вывести(Область);
		
		КонецЦикла;
	
		СтандартнаяОбработка = Ложь;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета ""Полный свод начислений, удержаний и выплат"" внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;	
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат_ИзменитьГруппировкиВарианта(Структура, ГруппировкаОрганизация=Неопределено, ФормироватьПоВсемОрганизациям,
	ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект)
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		Если ГруппировкаОрганизация=Неопределено Тогда
			//определим головную группировку (МесяцНачисления, Организация)
			ГруппировкаОрганизация=ЭлементСтруктуры;
			
			//отключим детализацию по - МесяцНачисления
			ПолеМесяцНачисления=Новый ПолеКомпоновкиДанных("МесяцНачисления");
			Для Каждого ПолеГруппировки Из ГруппировкаОрганизация.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки.Поле=ПолеМесяцНачисления Тогда
					ПолеГруппировки.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Выбор Из ГруппировкаОрганизация.Выбор.Элементы Цикл
				Если Выбор.Поле=ПолеМесяцНачисления Тогда
					Выбор.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			//отключим детализацию по - Организации
			//	полностью отключить уровень группировки нельзя, поэтому заменим на группировку по одному значению
			Если ФормироватьПоВсемОрганизациям=Истина Тогда
				
				ПолеЗамены=Новый ПолеКомпоновкиДанных("Организация.ИНН");
				
				ГруппировкаОрганизация.ПоляГруппировки.Элементы.Очистить();
				НовоеПоле = ГруппировкаОрганизация.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовоеПоле.Поле = ПолеЗамены;
				
				ГруппировкаОрганизация.Выбор.Элементы.Очистить();
				ПолеВыбора = ГруппировкаОрганизация.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ПолеВыбора.Поле = ПолеЗамены;
				
			КонецЕсли;
			
			//добавим общий отбор по статье финансирования,
			//	если функциональная опция использовать статьи финансирования отключена, то при расчете данные распределяются по группе сотрудника
			Если ИспользоватьОтборПоПроекту = Истина И ИспользоватьСФ = Истина Тогда
				
				НовыйОтбор = ГруппировкаОрганизация.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяФинансирования");
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйОтбор.Использование = Истина;
				НовыйОтбор.ПравоеЗначение = ОборПроект;					
				
			КонецЕсли;
			
			//анализируем дальше
			АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат_ИзменитьГруппировкиВарианта(ЭлементСтруктуры.Структура, ГруппировкаОрганизация, ФормироватьПоВсемОрганизациям, ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект);
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			//отключаем типовую таблицу
			ЭлементСтруктуры.Использование = Ложь;
			
			//преобразуем ГруппировкиТаблицыКД в ГруппировкиКД
			Для Каждого ЭлементСтрока Из ЭлементСтруктуры.Строки Цикл
				
				ГруппировкаКД = ГруппировкаОрганизация.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				
				ДобавитьДетализациюВР = 			Ложь;
				ДобавитьДетализациРегистратор = 	Ложь; //для формирования раздела выплат по документам
				ДобавитьДетализациюФизЛицо = 		Ложь; //для раскрытия сальдо на долг за предприятием и сотрудником
				
				Для Каждого Отбор Из ЭлементСтрока.Отбор.Элементы Цикл
					НовОтбор=ГруппировкаКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(НовОтбор, Отбор);
					
					Если ТипЗнч(Отбор.ПравоеЗначение)=Тип("СписокЗначений") Тогда
						Если НЕ Отбор.ПравоеЗначение.НайтиПоЗначению(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено)=Неопределено Тогда
							ДобавитьДетализациРегистратор=Истина;
						КонецЕсли;
						Если НЕ Отбор.ПравоеЗначение.НайтиПоЗначению(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено)=Неопределено Тогда
							ДобавитьДетализациюВР=Истина;
						ИначеЕсли НЕ Отбор.ПравоеЗначение.НайтиПоЗначению(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано)=Неопределено Тогда
							ДобавитьДетализациюВР=Истина;
						КонецЕсли;
						
					Иначе
						Если Отбор.ПравоеЗначение=Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо ИЛИ
								Отбор.ПравоеЗначение=Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо Тогда
							ДобавитьДетализациюФизЛицо=Истина;
						ИначеЕсли Отбор.ПравоеЗначение=Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно Тогда
							ДобавитьДетализациюВР=Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ПолеГруппировки Из ЭлементСтрока.ПоляГруппировки.Элементы Цикл
					НовПолеГруппировки=ГруппировкаКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(НовПолеГруппировки, ПолеГруппировки);
				КонецЦикла;
				
				ГруппировкаКД.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				
				ГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				
				Если ДобавитьДетализациюВР = Истина Тогда
					//добавим детализацию по ВР
					АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат_ДобавитьГруппировку(ГруппировкаКД, "ВидРасчета",
								ДобавитьДетализациюВР, ДобавитьДетализациРегистратор, ИспользоватьОтборПоПроекту, ИспользоватьСФ);
				КонецЕсли;
					
				Если ДобавитьДетализациРегистратор = Истина Тогда
					//добавим детализацию по регистратору
					АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат_ДобавитьГруппировку(ГруппировкаКД, "Регистратор",
								ДобавитьДетализациюВР, ДобавитьДетализациРегистратор, ИспользоватьОтборПоПроекту, ИспользоватьСФ);
				КонецЕсли;
				
				Если ДобавитьДетализациюФизЛицо = Истина Тогда
					//добавим детализацию по физ-лицу
					АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат_ДобавитьГруппировку(ГруппировкаКД, "ФизическоеЛицо",
								ДобавитьДетализациюВР, ДобавитьДетализациРегистратор, ИспользоватьОтборПоПроекту, ИспользоватьСФ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
			
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат_ДобавитьГруппировку(ГруппировкаКД, НаименованияПоляСКД,
					ДобавитьДетализациюВР, ДобавитьДетализациРегистратор, ИспользоватьОтборПоПроекту, ИспользоватьСФ)
	
	ГруппировкаНов = ГруппировкаКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	Если НаименованияПоляСКД = "ФизическоеЛицо" Тогда
		НовоеПоле = ГруппировкаНов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("МесяцНачисления");
	КонецЕсли;
	
	НовоеПоле = ГруппировкаНов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(НаименованияПоляСКД);
	
	Если ИспользоватьОтборПоПроекту = Истина И НЕ НаименованияПоляСКД = "ФизическоеЛицо" И ИспользоватьСФ = Ложь Тогда
		//для распределения по проектам нужно делить все суммы по физ-лицу
		НовоеПоле = ГруппировкаНов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ФизическоеЛицо");
	КонецЕсли;
	
	Если НаименованияПоляСКД = "ВидРасчета" И ДобавитьДетализациРегистратор = Истина Тогда
		НовыйОтбор = ГруппировкаНов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Группа");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ПравоеЗначение = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;					
		
		НовоеПоле = ГруппировкаНов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПериодДействия");
	КонецЕсли;
	
	Если НаименованияПоляСКД = "Регистратор" И ДобавитьДетализациюВР = Истина Тогда
		НовыйОтбор = ГруппировкаНов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Группа");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ПравоеЗначение = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;					
	КонецЕсли;
		
	ГруппировкаНов.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ГруппировкаНов.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
КонецПроцедуры

Процедура РасчетДанныхПоОрганизации(РазбиватьПоПериодуДействий, СтрокаОрганизации, ТблНачислено, ТблУдержано, ТблСправочно, ТблВыплачено, ТблНаименованиеДляСвода,
								СальдоВходящие, СальдоКонечное, СальдоЗаРаботникамиВходящие, СальдоЗаРаботникамиКонечное, ПериодНачало, ПериодКонец, ИспользоватьСФ, ИспользоватьОтборПоПроекту, ОборПроект);
	
	//зададим параметры
	ТблНачислено=Новый ТаблицаЗначений;
	ТблНачислено.Колонки.Добавить("Порядок");
	ТблНачислено.Колонки.Добавить("ВидРасчета");
	ТблНачислено.Колонки.Добавить("НаименованиеДляСвода");
	ТблНачислено.Колонки.Добавить("ОтработаноДней");
	ТблНачислено.Колонки.Добавить("ОтработаноЧасов");
	ТблНачислено.Колонки.Добавить("Период");
	ТблНачислено.Колонки.Добавить("Сумма");
	
	ТблУдержано=Новый ТаблицаЗначений;
	ТблУдержано.Колонки.Добавить("Порядок");
	ТблУдержано.Колонки.Добавить("ВидРасчета");
	ТблУдержано.Колонки.Добавить("НаименованиеДляСвода");
	ТблУдержано.Колонки.Добавить("Сумма");
	
	ТблСправочно=Новый ТаблицаЗначений;
	ТблСправочно.Колонки.Добавить("Порядок");
	ТблСправочно.Колонки.Добавить("ВидРасчета");
	ТблСправочно.Колонки.Добавить("НаименованиеДляСвода");
	ТблСправочно.Колонки.Добавить("ОтработаноДней");
	ТблСправочно.Колонки.Добавить("ОтработаноЧасов");
	ТблСправочно.Колонки.Добавить("Период");
	ТблСправочно.Колонки.Добавить("Сумма");
	
	ТблВыплачено=Новый ТаблицаЗначений;
	ТблВыплачено.Колонки.Добавить("Регистратор");
	ТблВыплачено.Колонки.Добавить("ДокТекст");
	ТблВыплачено.Колонки.Добавить("ДокНомер");
	ТблВыплачено.Колонки.Добавить("ДокДата");
	ТблВыплачено.Колонки.Добавить("Сумма");
	
	//чтение таблицы распределения (только для варианта распределения по группе сотруника)
	ТаблицаПроектов = Новый ТаблицаЗначений;
	Если ИспользоватьОтборПоПроекту = Истина И ИспользоватьСФ = Ложь Тогда
		
		ФизическиеЛица = Новый Массив;
		Для Каждого СтрокаГруппы Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаДанных Из СтрокаГруппы.Строки Цикл
				Если НЕ ФизическиеЛица.Найти(СтрокаДанных.ФизическоеЛицо) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ФизическиеЛица.Добавить(СтрокаДанных.ФизическоеЛицо);
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаПроектов = ПолучитьТаблицуРаспределения(ФизическиеЛица, ИспользоватьСФ, ПериодНачало, ПериодКонец);
		
	КонецЕсли;
	
	//заполним таблицы
	Для Каждого СтрокаГруппы Из СтрокаОрганизации.Строки Цикл
		Если СтрокаГруппы.Группа=Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо Тогда
			//Долг на начало месяца
			Для Каждого СтрокаСальдо Из СтрокаГруппы.Строки Цикл
				
				Если НЕ ПериодНачало=СтрокаСальдо.МесяцНачисления Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПроверитьСтрокуПоПроекту(ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект, ТаблицаПроектов, СтрокаСальдо) = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаСальдо.Сумма>0 Тогда
					СальдоВходящие = СальдоВходящие + СтрокаСальдо.Сумма;
				Иначе
					СальдоЗаРаботникамиВходящие = СальдоЗаРаботникамиВходящие + (СтрокаСальдо.Сумма*-1);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли СтрокаГруппы.Группа=Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо Тогда
			//Долг на конец месяца
			Для Каждого СтрокаСальдо Из СтрокаГруппы.Строки Цикл
				
				Если НЕ ПериодКонец=СтрокаСальдо.МесяцНачисления Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПроверитьСтрокуПоПроекту(ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект, ТаблицаПроектов, СтрокаСальдо) = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаСальдо.Сумма>0 Тогда
					СальдоКонечное = СальдоКонечное + СтрокаСальдо.Сумма;
				Иначе
					СальдоЗаРаботникамиКонечное = СальдоЗаРаботникамиКонечное + (СтрокаСальдо.Сумма*-1);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли СтрокаГруппы.Группа=Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
			//1. Начислено
			РасчетДанныхПоОрганизации_ЗаполнитьТаблицу(СтрокаГруппы, ТблНачислено, ТблСправочно, Истина, Ложь, Ложь, ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект, ТаблицаПроектов);
			
		ИначеЕсли СтрокаГруппы.Группа=Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано Тогда
			//2. Удержано
			РасчетДанныхПоОрганизации_ЗаполнитьТаблицу(СтрокаГруппы, ТблУдержано, ТблСправочно, Ложь, Ложь, Ложь, ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект, ТаблицаПроектов);
			
		ИначеЕсли СтрокаГруппы.Группа=Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно Тогда
			//3. Доходы в неденежной форме
			РасчетДанныхПоОрганизации_ЗаполнитьТаблицу(СтрокаГруппы, ТблСправочно, ТблСправочно, Ложь, Ложь, Истина, ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект, ТаблицаПроектов);
			
		ИначеЕсли СтрокаГруппы.Группа=Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено Тогда
			//4. Выплачено
			РасчетДанныхПоОрганизации_ЗаполнитьТаблицу(СтрокаГруппы, ТблВыплачено, ТблСправочно, Ложь, Истина, Ложь, ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект, ТаблицаПроектов);
			
		КонецЕсли;
	КонецЦикла;
	
	//дополним расчетными реквизитами
	//	Начислено
	Для Каждого СтрокаДанных Из ТблНачислено Цикл
		//дополним наименованием
		СтрокаДанных.НаименованиеДляСвода=РасчетДанныхПоОрганизации_ОпределитьНаименование(СтрокаДанных.ВидРасчета, ТблНаименованиеДляСвода);
		
		//порядок
		ВРНаименование=НРег(СокрЛП(СтрокаДанных.ВидРасчета));
		Если НЕ СтрНайти(ВРНаименование,"оклад")=0 Тогда
			СтрокаДанных.Порядок=0;
		Иначе
			СтрокаДанных.Порядок=1;
		КонецЕсли;
		
		//корректировка в зависимсоти от настроек отчета
		Если РазбиватьПоПериодуДействий=Ложь Тогда
			СтрокаДанных.Период=Дата(1,1,1);
		КонецЕсли;
	КонецЦикла;
	
	//	Удержано
	Для Каждого СтрокаДанных Из ТблУдержано Цикл
		//дополним наименованием
		СтрокаДанных.НаименованиеДляСвода=РасчетДанныхПоОрганизации_ОпределитьНаименование(СтрокаДанных.ВидРасчета, ТблНаименованиеДляСвода);
		
		//порядок
		Если СокрЛП(СтрокаДанных.ВидРасчета)="НДФЛ" Тогда
			СтрокаДанных.Порядок=0;
		ИначеЕсли СокрЛП(СтрокаДанных.ВидРасчета)="Удержание по исполнительному документу" Тогда
			СтрокаДанных.Порядок=1;
		Иначе
			СтрокаДанных.Порядок=3;
		КонецЕсли;
	КонецЦикла;
	
	//	Доходы в неденежной форме
	Для Каждого СтрокаДанных Из ТблСправочно Цикл
		//дополним наименованием
		СтрокаДанных.НаименованиеДляСвода=РасчетДанныхПоОрганизации_ОпределитьНаименование(СтрокаДанных.ВидРасчета, ТблНаименованиеДляСвода);
	КонецЦикла;
	
	//	Выплачено
	Для Каждого СтрокаДанных Из ТблВыплачено Цикл
		//проверка
		Если СтрокаДанных.Регистратор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//дополним реквизитами документа
		СтрокаДанных.ДокНомер=СокрЛП(СтрокаДанных.Регистратор.Номер);
		СтрокаДанных.ДокДата=НачалоДня(СтрокаДанных.Регистратор.Дата);
		
		//представление документа
		ПредставлениеВыплаты = "";
		ТипРегистратора	= ТипЗнч(СтрокаДанных.Регистратор);
		Если ТипРегистратора = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") ИЛИ
			ТипРегистратора = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") ИЛИ
			ТипРегистратора = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыПеречислением") ИЛИ
			ТипРегистратора = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком") Тогда
			ПредставлениеВыплаты = СокрЛП(СтрокаДанных.Регистратор.Комментарий);
			
		Иначе
			ПредставлениеВыплаты = СокрЛП(СтрокаДанных.Регистратор.Метаданные().Синоним);
		КонецЕсли;
		
		СтрокаДанных.ДокТекст=ПредставлениеВыплаты+" (вед. №" + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаДанных.ДокНомер, Истина, Истина) +
						" от " +	Формат(СтрокаДанных.ДокДата,"ДФ=dd.MM.yy")+")";
	КонецЦикла;
	
	//сворачиваем таблицы
	ТблНачислено.Свернуть("Порядок,НаименованиеДляСвода,Период","ОтработаноДней,ОтработаноЧасов,Сумма");
	ТблУдержано.Свернуть("Порядок,НаименованиеДляСвода","Сумма");
	ТблСправочно.Свернуть("НаименованиеДляСвода","Сумма");
	ТблВыплачено.Свернуть("ДокТекст,ДокДата,ДокНомер","Сумма");
	
	//сортировки
	ТблНачислено.Сортировать("Порядок,НаименованиеДляСвода,Период");
	ТблУдержано.Сортировать("Порядок,НаименованиеДляСвода");
	ТблСправочно.Сортировать("НаименованиеДляСвода");
	ТблВыплачено.Сортировать("ДокДата,ДокНомер");
	
КонецПроцедуры

Функция ПроверитьСтрокуПоПроекту(ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект, ТаблицаПроектов, СтрокаДанных)
	
	ВходитВПроект = Ложь;
	
	Если ИспользоватьОтборПоПроекту = Истина И ИспользоватьСФ = Ложь И
		НЕ СтрокаДанных.ФизическоеЛицо = Неопределено Тогда
			
		СтруктураПоискаПроекта = Новый Структура("ФизическоеЛицо", СтрокаДанных.ФизическоеЛицо);
		НайденныеПроекты = ТаблицаПроектов.НайтиСтроки(СтруктураПоискаПроекта);
		Для Каждого Проект Из НайденныеПроекты Цикл
			Если Проект.ГруппаСотрудников = ОборПроект Тогда
				ВходитВПроект = Истина;
			КонецЕсли;
		КонецЦикла;
			
	Иначе
		
		ВходитВПроект = Истина;
		
	КонецЕсли;
			
	Возврат ВходитВПроект;
	
КонецФункции

Функция РасчетДанныхПоОрганизации_ОпределитьНаименование(ВидРасчета, ТблНаименованиеДляСвода)
	
	НовоеНаименование = СокрЛП(ВидРасчета);
	
	СтруктураПоиска = Новый Структура("ВидРасчета");
	СтруктураПоиска.ВидРасчета = ВидРасчета;
	Строки = ТблНаименованиеДляСвода.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество() > 0 Тогда
		НовоеНаименование = СокрЛП(Строки[0].НаименованиеДляСвода);
	КонецЕсли;
	
	Возврат НовоеНаименование;
	
КонецФункции

Процедура РасчетДанныхПоОрганизации_ЗаполнитьТаблицу(СтрокаГруппы, ТблДанных, ТблСправочно, УчитыватьВремя, УчитыватьРегистратор, УчитыватьОтборДВН,
	ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект, ТаблицаПроектов)
	
	Для Каждого СтрокаДанных Из СтрокаГруппы.Строки Цикл
		
		//проверка по проекту
		Если ПроверитьСтрокуПоПроекту(ИспользоватьОтборПоПроекту, ИспользоватьСФ, ОборПроект, ТаблицаПроектов, СтрокаДанных) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим ВР является ли он доходом в натуральной форме
		ЯвляетсяДоходомВНатуральнойФорме=Ложь;
		Попытка
			ЯвляетсяДоходомВНатуральнойФорме=СтрокаДанных.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме;
		Исключение
			Если СокрЛП(СтрокаДанных.ВидРасчета)=СокрЛП(Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов) Тогда
				ЯвляетсяДоходомВНатуральнойФорме=Истина;
			КонецЕсли;
		КонецПопытки;
		
		Если (ЯвляетсяДоходомВНатуральнойФорме=Ложь) И (УчитыватьОтборДВН=Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		//контроль доходов в натуральной форме (даные в переносе)
		//		переносим из раздела 1 в раздел 3
		НовСтрока=Неопределено;
		Если (ЯвляетсяДоходомВНатуральнойФорме=Истина) И (УчитыватьОтборДВН=Ложь) Тогда
			НовСтрока=ТблСправочно.Добавить();
		Иначе
			НовСтрока=ТблДанных.Добавить();
		КонецЕсли;
		
		//заполнение текущей таблицы данных
		НовСтрока.Сумма=СтрокаДанных.Сумма;
		
		Если УчитыватьВремя=Истина Тогда
			НовСтрока.ОтработаноДней=СтрокаДанных.ОтработаноДней;
			НовСтрока.ОтработаноЧасов=СтрокаДанных.ОтработаноЧасов;
			НовСтрока.Период=Формат(СтрокаДанных.ПериодДействия,"ДФ=MM.yyyy");
		КонецЕсли;
		
		Если УчитыватьРегистратор=Истина Тогда
			НовСтрока.Регистратор=СтрокаДанных.Регистратор;
		Иначе
			НовСтрока.ВидРасчета=СтрокаДанных.ВидРасчета;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АнализНачисленийИУдержаний_ПолныйСводНачисленийУдержанийИВыплат_ПредставлениеПериода(ПериодДействияТекст)
	
	Результат	= "";
	
	Попытка
		Если НЕ СокрЛП(ПериодДействияТекст)="" Тогда
			ПериодДействияДата=Дата(Число(Прав(ПериодДействияТекст, 4)),Число(Лев(ПериодДействияТекст, 2)),1);
			Месяц = СтрЗаменить(Формат(ПериодДействияДата, "ДФ=МММ"), ".", "");
			Месяц = ВРег(Сред(Месяц, 1, 1)) + Сред(Месяц, 2);
			Результат = Месяц + " " + Прав(ПериодДействияТекст, 4);
		КонецЕсли; 
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000006460

#КонецОбласти

#Область РасчетныйЛисток

Процедура АнализНачисленийИУдержаний_РасчетныйЛисток(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Попытка
		
		СхемаКомпоновкиДанных	= Отчет.СхемаКомпоновкиДанных;
		КомпоновщикНастроек		= Отчет.КомпоновщикНастроек;
		КлючВарианта			= ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
		
		// Параметры печати
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетныйЛисток";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		// Определение бызовых настроек
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Период") Тогда
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период);
		КонецЕсли; 
		
		НачалоПериода = Дата(1,1,1);
		КонецПериода = Дата(1,1,1);
		
		ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если Не ПараметрПериод = Неопределено Тогда
			НачалоПериода=ПараметрПериод.Значение.ДатаНачала;
			КонецПериода=ПараметрПериод.Значение.ДатаОкончания;
		КонецЕсли;
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
		ЗарплатаКадрыОтчеты.НастроитьВариантОтчетаРасчетныйЛисток(НастройкиОтчета);
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		Если НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Использование Тогда
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		КонецЕсли; 
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		//	Определим дополнительные параметры
		СоответствиеПользовательскихПолей.Вставить("АФМ_ВыводитьТарифнуюСтавку", ЗначениеПараметра(НастройкиОтчета, "АФМ_ВыводитьТарифнуюСтавку"));
		СоответствиеПользовательскихПолей.Вставить("АФМ_ВыводитьВычеты", ЗначениеПараметра(НастройкиОтчета, "АФМ_ВыводитьВычеты"));
		СоответствиеПользовательскихПолей.Вставить("АФМ_НеВыводитьСНулевымДолгом", ЗначениеПараметра(НастройкиОтчета, "АФМ_НеВыводитьСНулевымДолгом"));
		СоответствиеПользовательскихПолей.Вставить("АФМ_ФормироватьДанныеПВ", Истина);
		СоответствиеПользовательскихПолей.Вставить("АФМ_АнализироватьКадровуюИсторию", Истина);
		
		// Вывод данных в дерево
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		// Параметры
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.АФМ_РасчетныйЛисток");
		
		ЕстьГруппировкаПоОрганизации = АнализНачисленийИУдержаний_МожноГруппировать(НастройкиОтчета.Порядок, "Организация");
		
		Если ЕстьГруппировкаПоПодразделению И
			НЕ АнализНачисленийИУдержаний_МожноГруппировать(НастройкиОтчета.Порядок, "ПодразделениеГоловногоСотрудникаНаКонецПериода.РеквизитДопУпорядочиванияИерархического") Тогда
			ЕстьГруппировкаПоПодразделению = Ложь;
		КонецЕсли; 
		
		// Вывод отчета
		Организация = Неопределено;
		Подразделение = Неопределено;
		Для Каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			// --> АФМ-Серверс, Кинчев, заявка №ДМ0000007702, 10.08.2016
			АнализНачисленийИУдержаний_ВывестиСтрокуМесяца(СтрокаМесяца, Отчет, ДокументРезультат, Макет, СоответствиеПользовательскихПолей, ЕстьГруппировкаПоОрганизации, Организация, ЕстьГруппировкаПоПодразделению, Подразделение);
			// <-- АФМ-Серверс, Кинчев, заявка №ДМ0000007702, 10.08.2016
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета ""Расчетный листок"" внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;	
	
КонецПроцедуры

// --> АФМ-Серверс, Кинчев, заявка №ДМ0000007702, 10.08.2016
Процедура АнализНачисленийИУдержаний_РасчетныйЛисток_РаздельныеЛисты(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Попытка
		
		СхемаКомпоновкиДанных	= Отчет.СхемаКомпоновкиДанных;
		КомпоновщикНастроек		= Отчет.КомпоновщикНастроек;
		КлючВарианта			= ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
		
		// Параметры печати
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетныйЛисток";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		// Определение бызовых настроек
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Период") Тогда
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период);
		КонецЕсли; 
		
		НачалоПериода = Дата(1,1,1);
		КонецПериода = Дата(1,1,1);
		
		ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если Не ПараметрПериод = Неопределено Тогда
			НачалоПериода=ПараметрПериод.Значение.ДатаНачала;
			КонецПериода=ПараметрПериод.Значение.ДатаОкончания;
		КонецЕсли;
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
		ЗарплатаКадрыОтчеты.НастроитьВариантОтчетаРасчетныйЛисток(НастройкиОтчета);
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		Если НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Использование Тогда
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		КонецЕсли; 
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		//	Определим дополнительные параметры
		СоответствиеПользовательскихПолей.Вставить("АФМ_ВыводитьТарифнуюСтавку", ЗначениеПараметра(НастройкиОтчета, "АФМ_ВыводитьТарифнуюСтавку"));
		СоответствиеПользовательскихПолей.Вставить("АФМ_ВыводитьВычеты", ЗначениеПараметра(НастройкиОтчета, "АФМ_ВыводитьВычеты"));
		СоответствиеПользовательскихПолей.Вставить("АФМ_НеВыводитьСНулевымДолгом", ЗначениеПараметра(НастройкиОтчета, "АФМ_НеВыводитьСНулевымДолгом"));
		СоответствиеПользовательскихПолей.Вставить("АФМ_ФормироватьДанныеПВ", Истина);
		СоответствиеПользовательскихПолей.Вставить("АФМ_АнализироватьКадровуюИсторию", Истина);
		
		// Вывод данных в дерево
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		// Параметры
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.АФМ_РасчетныйЛисток");
		
		ЕстьГруппировкаПоОрганизации = АнализНачисленийИУдержаний_МожноГруппировать(НастройкиОтчета.Порядок, "Организация");
		
		Если ЕстьГруппировкаПоПодразделению И
			НЕ АнализНачисленийИУдержаний_МожноГруппировать(НастройкиОтчета.Порядок, "ПодразделениеГоловногоСотрудникаНаКонецПериода.РеквизитДопУпорядочиванияИерархического") Тогда
			ЕстьГруппировкаПоПодразделению = Ложь;
		КонецЕсли; 
		
		// Вывод отчета
		ДанныеОтчета1 = ДанныеОтчета.Скопировать();
		Для Каждого СтрокаМесяца Из ДанныеОтчета1.Строки Цикл
			Для Каждого СтрокаВидЗанятости Из СтрокаМесяца.Строки Цикл
				Если Не СтрокаВидЗанятости.ВидЗанятостиГоловногоСотрудникаНаКонецПериода = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
					СтрокаВидЗанятости.Родитель.Строки.Удалить(СтрокаВидЗанятости);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Организация = Неопределено;
		Подразделение = Неопределено;
		Для Каждого СтрокаМесяца Из ДанныеОтчета1.Строки Цикл
			АнализНачисленийИУдержаний_ВывестиСтрокуМесяца(СтрокаМесяца, Отчет, ДокументРезультат, Макет, СоответствиеПользовательскихПолей, ЕстьГруппировкаПоОрганизации, Организация, ЕстьГруппировкаПоПодразделению, Подразделение);
		КонецЦикла;
		
		// Вывод отчета
		ДанныеОтчета2 = ДанныеОтчета.Скопировать();
		Для Каждого СтрокаМесяца Из ДанныеОтчета2.Строки Цикл
			Для Каждого СтрокаВидЗанятости Из СтрокаМесяца.Строки Цикл
				Если СтрокаВидЗанятости.ВидЗанятостиГоловногоСотрудникаНаКонецПериода = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
					СтрокаВидЗанятости.Родитель.Строки.Удалить(СтрокаВидЗанятости);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Организация = Неопределено;
		Подразделение = Неопределено;
		Для Каждого СтрокаМесяца Из ДанныеОтчета2.Строки Цикл
			АнализНачисленийИУдержаний_ВывестиСтрокуМесяца(СтрокаМесяца, Отчет, ДокументРезультат, Макет, СоответствиеПользовательскихПолей, ЕстьГруппировкаПоОрганизации, Организация, ЕстьГруппировкаПоПодразделению, Подразделение);
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета ""Расчетный листок"" внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;	
	
КонецПроцедуры

Процедура АнализНачисленийИУдержаний_ВывестиСтрокуМесяца(СтрокаМесяца, Отчет, ДокументРезультат, Макет, СоответствиеПользовательскихПолей, ЕстьГруппировкаПоОрганизации, Организация, ЕстьГруппировкаПоПодразделению, Подразделение)
			ДополнительныеДанные = Новый Структура;
			
			АнализНачисленийИУдержаний_ДополнительныеДанные(СтрокаМесяца.Строки, СтрокаМесяца.МесяцНачисления, СоответствиеПользовательскихПолей, ДополнительныеДанные);
			
			ДанныеПоНДФЛИВзносам = Неопределено;
			Если СоответствиеПользовательскихПолей.Получить("АФМ_ВыводитьВычеты") = Истина Тогда
				ДанныеПоНДФЛИВзносам = Отчет.ДанныеПоНДФЛИВзносам(СтрокаМесяца.Строки, СтрокаМесяца.МесяцНачисления, Истина, Ложь);
			КонецЕсли;
							
			ДанныеПоФизическимЛицам = Новый Массив;
			ДанныеПоФизическомуЛицу = Неопределено;
			
			ТекущееФизическоеЛицо = Неопределено;
			Для Каждого СтрокаГоловногоСотрудника Из СтрокаМесяца.Строки Цикл
				
				Если ТекущееФизическоеЛицо <> СтрокаГоловногоСотрудника.ФизическоеЛицо Тогда
					
					Если ТекущееФизическоеЛицо <> Неопределено Тогда
						ДанныеПоФизическимЛицам.Добавить(ДанныеПоФизическомуЛицу);
					КонецЕсли; 
					
					ТекущееФизическоеЛицо = СтрокаГоловногоСотрудника.ФизическоеЛицо;
					
					ДанныеПоФизическомуЛицу = Новый Структура;
					ДанныеПоФизическомуЛицу.Вставить("ФизическоеЛицо", СтрокаГоловногоСотрудника.ФизическоеЛицо);
					ДанныеПоФизическомуЛицу.Вставить("Организация", СтрокаГоловногоСотрудника.Организация);
					ДанныеПоФизическомуЛицу.Вставить("Подразделение", СтрокаГоловногоСотрудника.ПодразделениеГоловногоСотрудникаНаКонецПериода);
					ДанныеПоФизическомуЛицу.Вставить("ГоловныеСотрудники", Новый Массив);
					
				КонецЕсли; 
				
				ДанныеПоФизическомуЛицу.ГоловныеСотрудники.Добавить(СтрокаГоловногоСотрудника);
				
			КонецЦикла;
			
			Если ТекущееФизическоеЛицо <> Неопределено Тогда
				ДанныеПоФизическимЛицам.Добавить(ДанныеПоФизическомуЛицу);
			КонецЕсли;
			
			КоллекцияДанных = ДанныеПоФизическимЛицам;
				
			Для каждого СтрокаКоллекции Из КоллекцияДанных Цикл
				
				Если ЕстьГруппировкаПоОрганизации И Организация <> СтрокаКоллекции.Организация Тогда
					
					ПараметрыГруппировки = Новый Структура("НазваниеПараметра, Значение", НСтр("ru='Организация'"));
					ПараметрыГруппировки.Значение = СтрокаКоллекции.Организация;
					
					Область = Макет.ПолучитьОбласть("Группировка");
					Область.Параметры.Заполнить(ПараметрыГруппировки);

					ДокументРезультат.Вывести(Область);
					Организация = СтрокаКоллекции.Организация;
					
				КонецЕсли; 
				
				Если ЕстьГруппировкаПоПодразделению И Подразделение <> СтрокаКоллекции.Подразделение Тогда
					
					ПараметрыГруппировки = Новый Структура("НазваниеПараметра, Значение", НСтр("ru='Подразделение'"));
					ПараметрыГруппировки.Значение = СтрокаКоллекции.Подразделение;

					Область = Макет.ПолучитьОбласть("Группировка");
					Область.Параметры.Заполнить(ПараметрыГруппировки);

					ДокументРезультат.Вывести(Область);
					Подразделение = СтрокаКоллекции.Подразделение;
					
				КонецЕсли; 
				
				ВыводимаяКоллекция = СтрокаКоллекции.ГоловныеСотрудники;
				
				#Область ПроверкаВывода
				
				ПроверкаДолгНаКонец=0;
				ТекущийСотрудник=Справочники.Сотрудники.ПустаяСсылка();
				Для Каждого СтрокаГоловногоСотрудника Из ВыводимаяКоллекция Цикл
					ТекущийСотрудник=СтрокаГоловногоСотрудника.ГоловнойСотрудник;
					Для Каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
						СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
						Если СтрокаГруппы <> Неопределено Тогда
							ПроверкаДолгНаКонец = ПроверкаДолгНаКонец + СтрокаГруппы.Сумма;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;				
				
				СотрудникРаботает=Истина;
				СтруктураПоиска=Новый Структура("Сотрудник", ТекущийСотрудник);
				КадроваяИстория=ДополнительныеДанные.ДанныеКадроваяИстория.НайтиСтроки(СтруктураПоиска);
				Если КадроваяИстория.Количество()=0 Тогда
					СотрудникРаботает=Ложь;
				КонецЕсли;
				
				Если СоответствиеПользовательскихПолей.Получить("АФМ_НеВыводитьСНулевымДолгом")=Истина
					И ПроверкаДолгНаКонец=0
					И СотрудникРаботает=Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				#КонецОбласти
				
				АнализНачисленийИУдержаний_ВывестиСотрудникаРасчетныйЛисток(ВыводимаяКоллекция, ДокументРезультат, Макет, СоответствиеПользовательскихПолей, ДанныеПоНДФЛИВзносам, , ДополнительныеДанные);
				
			КонецЦикла;
				
КонецПроцедуры
// <-- АФМ-Серверс, Кинчев, заявка №ДМ0000007702, 10.08.2016

Функция АнализНачисленийИУдержаний_МожноГруппировать(Порядок, ИмяПоляГруппировки)
	
	ГруппировкаВозможна = Ложь;

	Для каждого ЭлементПорядка Из Порядок.Элементы Цикл
		
		Если ЭлементПорядка.Использование Тогда
			
			Если ТипЗнч(ЭлементПорядка) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("МесяцНачисления") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляГруппировки) Тогда
				
				ГруппировкаВозможна = Истина;
				Прервать;
				
			ИначеЕсли ЭлементПорядка.Поле <> Новый ПолеКомпоновкиДанных("Организация") Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГруппировкаВозможна;
	
КонецФункции

Процедура АнализНачисленийИУдержаний_ДополнительныеДанные(СтрокиСотрудников, МесяцНачисления, СоответствиеПользовательскихПолей, ДополнительныеДанные)

	Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", СтрокиСотрудников.ВыгрузитьКолонку("ГоловнойСотрудник"));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(МесяцНачисления));
	
	Если СоответствиеПользовательскихПолей.Получить("АФМ_ФормироватьДанныеПВ") = Истина Тогда
		//	Получим таблицу с периодами взаиморасчетов по регистраторам (для раздела выплата),
		//		при выборке, может быть несколько период взаиморасчетов, поэтому выводим только тот, который больше всего повторяется,
		//		например, ведомость в банк - выплачиваем в ферале, но период основной взаиморасчетов январь
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Регистратор,
		|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплате.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодВзаиморасчетов,
		|	1 КАК КолвоВВыборке
		|ПОМЕСТИТЬ ВТВыбор
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.Период >= &НачалоПериода
		|	И ЗарплатаКВыплате.Период <= &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВыбор.Регистратор,
		|	ВТВыбор.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	СУММА(ВТВыбор.КолвоВВыборке) КАК КолвоВВыборке
		|ПОМЕСТИТЬ ВТСвернуть
		|ИЗ
		|	ВТВыбор КАК ВТВыбор
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТВыбор.Регистратор,
		|	ВТВыбор.ПериодВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСвернуть.Регистратор КАК Регистратор,
		|	ВТСвернуть.ПериодВзаиморасчетов,
		|	ВТСвернуть.КолвоВВыборке КАК КолвоВВыборке
		|ИЗ
		|	ВТСвернуть КАК ВТСвернуть
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	КолвоВВыборке УБЫВ";
		
		ДополнительныеДанные.Вставить("ДанныеПВ", Запрос.Выполнить().Выгрузить());		
		
	КонецЕсли;
	
	Если СоответствиеПользовательскихПолей.Получить("АФМ_АнализироватьКадровуюИсторию") = Истина Тогда
		//	Получим таблицу работающих сотрудников на конец периода
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник,
		|	КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&КонецПериода, Сотрудник В (&Сотрудники)) КАК КадроваяИсторияСотрудниковСрезПоследних
		|ГДЕ
		|	НЕ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
		
		ДополнительныеДанные.Вставить("ДанныеКадроваяИстория", Запрос.Выполнить().Выгрузить());		
		
	КонецЕсли;
	
	Если СоответствиеПользовательскихПолей.Получить("АФМ_ВыводитьТарифнуюСтавку") = Истина Тогда
		// Подготовка сведений о тарифноых ставках
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Организация КАК Организация,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ФизическоеЛицо,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель.Наименование КАК Наименование,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение КАК Размер
		|ИЗ
		|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних(
		|			&КонецПериода,
		|			Сотрудник В (&Сотрудники)
		|				И Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.Оклад)) КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Сотрудник";
		
		ДополнительныеДанные.Вставить("ТарифнаяСтавка", Запрос.Выполнить().Выгрузить());		
		
	КонецЕсли;
		
КонецПроцедуры
	
Процедура АнализНачисленийИУдержаний_ВывестиСотрудникаРасчетныйЛисток(СтрокиГоловныхСотрудников, ДокументРезультатПромежуточный, Макет, СоответствиеПользовательскихПолей,
				ДанныеПоНДФЛИВзносам, ГруппироватьПоИсточникамФинансирования = Ложь, ДополнительныеДанные)
	
	// Параметры
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	//НастройкиВывода = НастройкиВыводаРасчетногоЛистка();
	НастройкиВывода	= Новый Структура;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	СтрокаПервогоГоловногоСотрудника = СтрокиГоловныхСотрудников[0];
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0].Строки[0];
	Иначе
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0];
	КонецЕсли;
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(СтрокаШапки.Организация);
	
	РазделительЛистков = Новый ТабличныйДокумент;
	РазделительЛистков.Вывести(Макет.ПолучитьОбласть("РазделительЛистков"));
	
	// Вывод шапки
	ОбластьШапка	= Макет.ПолучитьОбласть("Шапка");
	ПараметрыШапки = Новый Структура("Месяц");
	ПараметрыШапки.Месяц = Формат(СтрокаШапки.МесяцНачисления, "ДФ='ММММ гггг ''г''.'");
	ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
	ДокументРезультат.Вывести(ОбластьШапка);

	// Вывод области - Рабочее место
	ОбластьРабочееМесто	= Макет.ПолучитьОбласть("РабочееМесто");
	ПараметрыРабочегоМеста = Новый Структура("СотрудникФизическоеЛицоФИО,СотрудникКод,Подразделение,Должность,РазрядКатегория");
	ЗаполнитьЗначенияСвойств(ПараметрыРабочегоМеста, СтрокаШапки);
		
	Если ЗначениеЗаполнено(СтрокаШапки.ПодразделениеГоловногоСотрудникаНаКонецПериода) Тогда
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений Тогда
			ПараметрыРабочегоМеста.Подразделение = СтрокаШапки.ПодразделениеГоловногоСотрудникаНаКонецПериода.ПолноеНаименование();
		Иначе
			ПараметрыРабочегоМеста.Подразделение = СтрокаШапки.ПодразделениеГоловногоСотрудникаНаКонецПериода;
		КонецЕсли;
		
	КонецЕсли; 
	
	ПараметрыРабочегоМеста.Должность = СтрокаШапки.ДолжностьГоловногоСотрудникаНаКонецПериода;
	
	Если СтрокаПервогоГоловногоСотрудника.Владелец().Колонки.Найти("РазрядКатегорияГоловногоСотрудникаНаКонецПериода") <> Неопределено
		И ЗначениеЗаполнено(СтрокаПервогоГоловногоСотрудника.РазрядКатегорияГоловногоСотрудникаНаКонецПериода) Тогда
		
		ПараметрыРабочегоМеста.РазрядКатегория = ", " + СтрокаПервогоГоловногоСотрудника.РазрядКатегорияГоловногоСотрудникаНаКонецПериода;
		
	КонецЕсли; 
	
	ОбластьРабочееМесто.Параметры.Заполнить(ПараметрыРабочегоМеста);
	ДокументРезультат.Вывести(ОбластьРабочееМесто);
	
	// Вывод дополнительной области - ТарифнаяСтавка 
	Если СоответствиеПользовательскихПолей.Получить("АФМ_ВыводитьТарифнуюСтавку") = Истина Тогда
		
		СистемаОплатыТекст="";
		ТарифнаяСтавкаНаКонецПериода=0;
		
		СтруктураПоиска=Новый Структура("Сотрудник, Организация", СтрокаШапки.Сотрудник, СтрокаШапки.Организация);
		СтрокиТарифныхСтавок = ДополнительныеДанные.ТарифнаяСтавка.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТарифныхСтавок.Количество() > 0 Тогда
			//тарифная ставка выводится на конец периода
			СтрокаТарифнойСтавки = СтрокиТарифныхСтавок[0];
			СистемаОплатыТекст=СокрЛП(СтрокаТарифнойСтавки.Наименование);
			ТарифнаяСтавкаНаКонецПериода=СтрокаТарифнойСтавки.Размер;
		КонецЕсли;
		
		ПараметрыОбласти = Новый Структура("СистемаОплаты, ТарифнаяСтавкаНаКонецПериода");
		ПараметрыОбласти.СистемаОплаты	= СистемаОплатыТекст;
		ПараметрыОбласти.ТарифнаяСтавкаНаКонецПериода	= Формат(ТарифнаяСтавкаНаКонецПериода, "ЧЦ=15; ЧДЦ=2") + " руб.";
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ТарифнаяСтавка",, ПараметрыОбласти);
		
	КонецЕсли;
	
	// Вывод дополнительной области - Вычеты 
	Если СоответствиеПользовательскихПолей.Получить("АФМ_ВыводитьВычеты") = Истина Тогда
		
		ВычетыИтого=0;
		
		СтруктураПоиска=Новый Структура("ФизическоеЛицо,ГоловнаяОрганизация", СтрокаШапки.СотрудникФизическоеЛицо, ГоловнаяОрганизация);
		СтрокиДанныхПоНДФЛ = ДанныеПоНДФЛИВзносам.НДФЛ.НайтиСтроки(СтруктураПоиска);
		Если СтрокиДанныхПоНДФЛ.Количество() > 0 Тогда
			СтрокаДанныхПоНДФЛ = СтрокиДанныхПоНДФЛ[0];
			ВычетыИтого = ВычетыИтого + ?(СтрокаДанныхПоНДФЛ.ВычетНаФизлицо=NULL, 0, СтрокаДанныхПоНДФЛ.ВычетНаФизлицо);
			ВычетыИтого = ВычетыИтого + ?(СтрокаДанныхПоНДФЛ.ВычетНаДетей=NULL, 0, СтрокаДанныхПоНДФЛ.ВычетНаДетей);
			ВычетыИтого = ВычетыИтого + ?(СтрокаДанныхПоНДФЛ.ВычетИмущественный=NULL, 0, СтрокаДанныхПоНДФЛ.ВычетИмущественный);
			ВычетыИтого = ВычетыИтого + ?(СтрокаДанныхПоНДФЛ.ВычетСоциальный=NULL, 0, СтрокаДанныхПоНДФЛ.ВычетСоциальный);
		КонецЕсли;
		
		ПараметрыОбласти = Новый Структура("Вычеты");
		ПараметрыОбласти.Вычеты	= Формат(ВычетыИтого, "ЧДЦ=2; ЧГ=3,0");
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "Вычеты",, ПараметрыОбласти);
		
	КонецЕсли;
	
	// Вывод основной части 
	АнализНачисленийИУдержаний_ВывестиТелоРасчетногоЛистка(ДокументРезультат, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей, ДополнительныеДанные);
		
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(РазделительЛистков);
	ВыводимыеОбласти.Добавить(ДокументРезультат);
	
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультатПромежуточный, ВыводимыеОбласти) Тогда
		ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
		ВыводимыеОбласти.Удалить(0);
	ИначеЕсли ДокументРезультатПромежуточный.ВысотаТаблицы = 0 Тогда
		ВыводимыеОбласти.Удалить(0);
	КонецЕсли;
	
	Для каждого ВыводимаяОбласть Из ВыводимыеОбласти Цикл
		ДокументРезультатПромежуточный.Вывести(ВыводимаяОбласть);
	КонецЦикла;
	
КонецПроцедуры

Функция АнализНачисленийИУдержаний_ВывестиТелоРасчетногоЛистка(ДокументРезультат, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей, ДополнительныеДанные)
	
	ИтогиПоГруппам = Новый Структура;
	ИтогиПоГруппам.Вставить("СуммаДолгаНаНачалоМесяца", 0);
	ИтогиПоГруппам.Вставить("СуммаДолгаНаКонецМесяца", 0);
	
	#Область СборСведений
	
	ИтогиРазделов = Новый Структура;
	ИтогиРазделов.Вставить("Начислено", 0);
	ИтогиРазделов.Вставить("Удержано", 0);
	ИтогиРазделов.Вставить("Выплачено", 0);
	ИтогиРазделов.Вставить("НачисленоВНатуральнойФорме", 0);
	ИтогиРазделов.Вставить("Справочно", 0);
	
	ИмяПоляСуммаНачислено = СоответствиеПользовательскихПолей.Получить("СуммаНачислено");
	ИмяПоляСуммаНачисленоВНатуральнойФорме = СоответствиеПользовательскихПолей.Получить("СуммаНачисленоВНатуральнойФорме");
	ИмяПоляСуммаУдержано = СоответствиеПользовательскихПолей.Получить("СуммаУдержано");
	ИмяПоляСуммаСправочно = СоответствиеПользовательскихПолей.Получить("СуммаНачислено");
	ИмяПоляСуммаЛьготы = СоответствиеПользовательскихПолей.Получить("СуммаНачислено");
	ИмяПоляСуммаВыплачено = СоответствиеПользовательскихПолей.Получить("СуммаУдержано");
	
	КоллекцияНачислено = Новый ТаблицаЗначений;
	КоллекцияНачислено.Колонки.Добавить("ВидРасчета");
	КоллекцияНачислено.Колонки.Добавить("ПериодДействия");
	КоллекцияНачислено.Колонки.Добавить("ОтработаноДней");
	КоллекцияНачислено.Колонки.Добавить("ОтработаноЧасов");
	КоллекцияНачислено.Колонки.Добавить("ОплаченоДней");
	КоллекцияНачислено.Колонки.Добавить("ОплаченоЧасов");
	КоллекцияНачислено.Колонки.Добавить("Сумма");
	КоллекцияНачислено.Колонки.Добавить("Показатель");
	КоллекцияНачислено.Колонки.Добавить("Значение");
	
	КоллекцияУдержано = Новый ТаблицаЗначений;
	КоллекцияУдержано.Колонки.Добавить("ВидРасчета");
	КоллекцияУдержано.Колонки.Добавить("ПериодДействия");
	КоллекцияУдержано.Колонки.Добавить("Сумма");
	
	КоллекцияВыплачено = Новый ТаблицаЗначений;
	КоллекцияВыплачено.Колонки.Добавить("ВидРасчета");
	КоллекцияВыплачено.Колонки.Добавить("Регистратор");
	КоллекцияВыплачено.Колонки.Добавить("ПериодДействия");
	КоллекцияВыплачено.Колонки.Добавить("ПериодВзаиморасчетов");
	КоллекцияВыплачено.Колонки.Добавить("ПериодТекст");
	КоллекцияВыплачено.Колонки.Добавить("Сумма");
	
	КоллекцииРазделов = Новый Структура;
	КоллекцииРазделов.Вставить("Начислено", КоллекцияНачислено);
	КоллекцииРазделов.Вставить("Удержано", 	КоллекцияУдержано);
	КоллекцииРазделов.Вставить("Выплачено", КоллекцияВыплачено);
	КоллекцииРазделов.Вставить("Льготы", 	Новый Массив);
	КоллекцииРазделов.Вставить("Справочно", Новый Массив);
	
	ИзвестныеСтрокиУдержаний = Новый Соответствие;
	ИзвестныеСтрокиСправочно = Новый Соответствие;
	ИзвестныеСтрокиВыплат = Новый Соответствие;
	ИзвестныеСтрокиЛьготы = Новый Соответствие;
	
	Для каждого СтрокаГоловногоСотрудника Из СтрокиГоловныхСотрудников Цикл
		
		Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
			
			// Начислено
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаНачислений Из СтрокаГруппы.Строки Цикл
					
					СтрокаКоллекции = КоллекцииРазделов.Начислено.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаНачислений);
					
					СтрокаКоллекции.ПериодДействия	= АФМ_ПредставлениеПериода(СтрокаНачислений.ПериодДействия, СтрокаНачислений.ДатаНачала, СтрокаНачислений.ДатаОкончания);
					СтрокаКоллекции.Сумма = СтрокаНачислений[ИмяПоляСуммаНачислено];
					СтрокаКоллекции.ОплаченоДней = 0;
					СтрокаКоллекции.ОплаченоЧасов = 0;
					
					УчетВремениВЧасах = СтрокаНачислений.ВремяВЧасах = Истина;
					
					Если УчетВремениВЧасах И СтрокаНачислений.ОплаченоЧасов > 0 Тогда
						СтрокаКоллекции.ОплаченоЧасов = СтрокаНачислений.ОплаченоЧасов;
					ИначеЕсли НЕ УчетВремениВЧасах И СтрокаНачислений.ОплаченоДней > 0 Тогда
						СтрокаКоллекции.ОплаченоДней = СтрокаНачислений.ОплаченоДней;
					КонецЕсли;
					
					ИтогиРазделов.Начислено = ИтогиРазделов.Начислено + СтрокаНачислений[ИмяПоляСуммаНачислено];
					ИтогиРазделов.НачисленоВНатуральнойФорме = ИтогиРазделов.НачисленоВНатуральнойФорме + СтрокаНачислений[ИмяПоляСуммаНачисленоВНатуральнойФорме];					
					
				КонецЦикла;
				
				СворачиваемыеКолонки = "ВидРасчета,ПериодДействия,Показатель,Значение";
				СуммируемыеКолонки = "Сумма,ОтработаноДней,ОтработаноЧасов,ОплаченоДней,ОплаченоЧасов";
				
				КоллекцииРазделов.Начислено.Свернуть(СворачиваемыеКолонки, СуммируемыеКолонки);
				
			КонецЕсли;
			
			// Удержано
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаУдержаний Из СтрокаГруппы.Строки Цикл
					
					СтрокаКоллекции = ИзвестныеСтрокиУдержаний.Получить(СтрокаУдержаний.ВидРасчета);
					Если СтрокаКоллекции = Неопределено Тогда
						СтрокаКоллекции = КоллекцииРазделов.Удержано.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаУдержаний);
						СтрокаКоллекции.ПериодДействия	= АФМ_ПредставлениеПериода(СтрокаУдержаний.ПериодДействия);
						СтрокаКоллекции.Сумма = СтрокаУдержаний[ИмяПоляСуммаУдержано];
						ИзвестныеСтрокиУдержаний.Вставить(СтрокаКоллекции.ВидРасчета, СтрокаКоллекции);
					Иначе
						СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаУдержаний[ИмяПоляСуммаУдержано];
					КонецЕсли;
					
					ИтогиРазделов.Удержано = ИтогиРазделов.Удержано + СтрокаУдержаний[ИмяПоляСуммаУдержано];
					
				КонецЦикла;
				
				СворачиваемыеКолонки = "ВидРасчета,ПериодДействия";
				КоллекцииРазделов.Удержано.Свернуть(СворачиваемыеКолонки, "Сумма");
				
			КонецЕсли;
			
			// Выплачено
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаВыплачено Из СтрокаГруппы.Строки Цикл
					
					Для каждого СтрокаСРегистратором Из СтрокаВыплачено.Строки Цикл
						
						СтрокаКоллекции = ИзвестныеСтрокиВыплат.Получить(СтрокаСРегистратором.Регистратор);
						
						//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000007589 08.06.2016
						//	получается ситуация когда данные по соответствию есть, но данных в строке коллекции нет, было свернуто в ноль и очищенно
						ОшибкаВСтроке = Ложь;
						Попытка
							СуммаТест = СтрокаКоллекции.Сумма;
						Исключение
							ОшибкаВСтроке = Истина;
						КонецПопытки;
						//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000007589 08.06.2016
						
						Если СтрокаКоллекции = Неопределено ИЛИ ОшибкаВСтроке = Истина Тогда
							
							СтрокаКоллекции = КоллекцииРазделов.Выплачено.Добавить();
							
							СвойстваРегистратора = Новый Структура("Номер,Дата,Комментарий");
							ЗаполнитьЗначенияСвойств(СвойстваРегистратора, СтрокаСРегистратором.Регистратор);
							
							ПредставлениеВедомости = "вед. "
								+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СвойстваРегистратора.Номер, Истина, Истина)	+ " "
								+ НСтр("ru='от'") + " " + Формат(СвойстваРегистратора.Дата, "ДФ=dd.MM.yy");
							КомментарийВедомости = СокрЛП(СвойстваРегистратора.Комментарий);
							ЕстьКомментарий	= ЗначениеЗаполнено(КомментарийВедомости);
							
							СтрокаКоллекции.ВидРасчета = КомментарийВедомости
								+ ?(ЕстьКомментарий, " (", "")
								+ ПредставлениеВедомости
								+ ?(ЕстьКомментарий, ")", "");
							
							СтрокаКоллекции.Регистратор	= СтрокаСРегистратором.Регистратор;
							СтрокаКоллекции.ПериодДействия	= СтрокаСРегистратором.ПериодДействия;
							СтрокаКоллекции.ПериодВзаиморасчетов = Дата(1,1,1);
							СтрокаКоллекции.ПериодТекст	= "";
							СтрокаКоллекции.Сумма = СтрокаСРегистратором[ИмяПоляСуммаВыплачено];
							
							ИзвестныеСтрокиВыплат.Вставить(СтрокаСРегистратором.Регистратор, СтрокаКоллекции);
							
						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаСРегистратором[ИмяПоляСуммаВыплачено];
						КонецЕсли;
						
					КонецЦикла;
					
					ИтогиРазделов.Выплачено = ИтогиРазделов.Выплачено + СтрокаВыплачено[ИмяПоляСуммаВыплачено];
					
				КонецЦикла;
				
				КоллекцииРазделов.Выплачено.Свернуть("ВидРасчета,Регистратор,ПериодДействия,ПериодВзаиморасчетов,ПериодТекст", "Сумма");
				
				УдалитьСтрокиСНулевойСуммой(КоллекцииРазделов.Выплачено);
				
			КонецЕсли;
			
			// Льготы
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаЛьготы Из СтрокаГруппы.Строки Цикл
					
					СтрокаКоллекции = ИзвестныеСтрокиЛьготы.Получить(СтрокаЛьготы.ВидРасчета);
					Если СтрокаКоллекции = Неопределено Тогда
						СтрокаКоллекции = Новый Структура("ВидРасчета,Сумма");
						СтрокаКоллекции.ВидРасчета = СтрокаЛьготы.ВидРасчета;
						СтрокаКоллекции.Сумма = СтрокаЛьготы[ИмяПоляСуммаЛьготы];
						КоллекцииРазделов.Льготы.Добавить(СтрокаКоллекции);
						ИзвестныеСтрокиЛьготы.Вставить(СтрокаЛьготы.ВидРасчета, СтрокаКоллекции);
					Иначе
						СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаЛьготы[ИмяПоляСуммаЛьготы];
					КонецЕсли; 
					
				КонецЦикла;
			
			КонецЕсли;
			
			// Справочно
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаСправочно Из СтрокаГруппы.Строки Цикл
					
					ТипВидаРасчета	= ТипЗнч(СтрокаСправочно.ВидРасчета);
					Если ТипВидаРасчета = Тип("ПланВидовРасчетаСсылка.Начисления") И СтрокаСправочно.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
						Или ТипВидаРасчета = Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний") И СтрокаСправочно.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов Тогда
					
						СтрокаКоллекции = ИзвестныеСтрокиСправочно.Получить(СтрокаСправочно.ВидРасчета);
						Если СтрокаКоллекции = Неопределено Тогда
							СтрокаКоллекции = Новый Структура("ВидРасчета,ПериодДействия,Сумма");
							СтрокаКоллекции.ВидРасчета = СтрокаСправочно.ВидРасчета;
							СтрокаКоллекции.ПериодДействия	= АФМ_ПредставлениеПериода(СтрокаСправочно.ПериодДействия, СтрокаСправочно.ДатаНачала, СтрокаСправочно.ДатаОкончания);
							СтрокаКоллекции.Сумма = СтрокаСправочно[ИмяПоляСуммаСправочно];
							КоллекцииРазделов.Справочно.Добавить(СтрокаКоллекции);
							ИзвестныеСтрокиСправочно.Вставить(СтрокаСправочно.ВидРасчета, СтрокаКоллекции);
						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаСправочно[ИмяПоляСуммаСправочно];
						КонецЕсли;
						
						ИтогиРазделов.Справочно = ИтогиРазделов.Справочно + СтрокаСправочно[ИмяПоляСуммаСправочно];
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
				
			// Начальное сальдо
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца + СтрокаГруппы.Сумма;
			КонецЕсли;
			
			// КонечноеСальдо
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца + СтрокаГруппы.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ВыводТела
	
	СтрокНачислено	= КоллекцииРазделов.Начислено.Количество();
	
	Если ИтогиРазделов.НачисленоВНатуральнойФорме <> 0 Тогда
		ЕстьИтогиПоНачисленоВНатуральнойФорме = Истина;
		СтрокНачислено = СтрокНачислено + 1;
	Иначе
		ЕстьИтогиПоНачисленоВНатуральнойФорме = Ложь;
	КонецЕсли; 
	
	КоличествоСтрокНачислено	= КоллекцииРазделов.Начислено.Количество();
	КоличествоСтрокУдержано		= КоллекцииРазделов.Удержано.Количество();
	КоличествоСтрокВыплачено	= КоллекцииРазделов.Выплачено.Количество();
	КоличествоСтрокСправочно	= КоллекцииРазделов.Справочно.Количество();
	
	// Вывод шапки
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
	
	// Вывод таблиц Начислено, Удержано
		
	СтрокВыведено = 0;
	
	Пока СтрокВыведено <= КоличествоСтрокНачислено Или СтрокВыведено <= КоличествоСтрокУдержано Цикл
		
		// Вывод Начислено
		Если КоличествоСтрокНачислено = 0 Тогда
			
			Если СтрокВыведено = 0 Тогда
				ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "ЗаголовокНачисленоУдержано");
			Иначе
				ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "СтрокаНачисленоУдержано");
			КонецЕсли;
			
		ИначеЕсли СтрокВыведено <= КоличествоСтрокНачислено Тогда
			
			Если СтрокВыведено = 0 Тогда
				ИмяОбластиСтроки = "ЗаголовокНачисленоУдержано";
			Иначе
				ИмяОбластиСтроки = "СтрокаНачисленоУдержано";				
				//ПараметрыЗаполнения = КоллекцииРазделов.Начислено[СтрокВыведено - 1];
				Начисление	= КоллекцииРазделов.Начислено[СтрокВыведено - 1];
				ПараметрыЗаполнения	= Новый Структура("ВидРасчета,ПериодДействия,ОтработаноДней,ОтработаноЧасов,Сумма");
				ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Начисление);
				Если ТипЗнч(Начисление.Показатель) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты")
					И ЗначениеЗаполнено(Начисление.Показатель)
					И Начисление.Показатель.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой
					И ЗначениеЗаполнено(Начисление.Значение) Тогда
					
					ПараметрыЗаполнения.ВидРасчета	= Строка(Начисление.ВидРасчета) + " - " + Начисление.Значение + "%";
				КонецЕсли;
			КонецЕсли; 
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, , ПараметрыЗаполнения);
			
		Иначе
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "СтрокаНачисленоУдержано");
			
		КонецЕсли;
		
		// Вывод Удержано
		Если КоличествоСтрокУдержано = 0 Тогда
			
			Если СтрокВыведено = 0 Тогда
				ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "ЗаголовокНачисленоУдержано");
			Иначе
				ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "СтрокаНачисленоУдержано");
			КонецЕсли;
			
		ИначеЕсли СтрокВыведено <= КоличествоСтрокУдержано Тогда
			
			Если СтрокВыведено = 0 Тогда
				ИмяОбластиСтроки = "ЗаголовокНачисленоУдержано";
			Иначе
				ИмяОбластиСтроки = "СтрокаНачисленоУдержано";				
				ПараметрыЗаполнения = КоллекцииРазделов.Удержано[СтрокВыведено - 1];
			КонецЕсли; 
			
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, , ПараметрыЗаполнения);
			
		Иначе
			
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "СтрокаНачисленоУдержано");
			
		КонецЕсли;
		
		СтрокВыведено = СтрокВыведено + 1;
		
	КонецЦикла;
	
	ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "ИтогНачисленоУдержано", , Новый Структура("Сумма", ИтогиРазделов.Начислено));
	ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "ИтогНачисленоУдержано", , Новый Структура("Сумма", ИтогиРазделов.Удержано));
	
	//определим период взаиморасчетов (для выплаты)
	Для Каждого Выплата Из КоллекцииРазделов.Выплачено Цикл
		ПериодВзаиморасчетов=Выплата.ПериодДействия;
		
		СтруктураПоиска=Новый Структура("Регистратор", Выплата.Регистратор);
		НайденныеПериоды=ДополнительныеДанные.ДанныеПВ.НайтиСтроки(СтруктураПоиска);
		Если НайденныеПериоды.Количество()>0 Тогда
			ПериодВзаиморасчетов=НайденныеПериоды[0].ПериодВзаиморасчетов;
		КонецЕсли;
		
		Выплата.ПериодТекст = АФМ_ПредставлениеПериода(ПериодВзаиморасчетов);;
	КонецЦикла;
	
	// Вывод таблиц Справочно, Выплачено	
	
	СтрокВыведено = 0;
	
	Пока СтрокВыведено <= КоличествоСтрокСправочно Или СтрокВыведено <= КоличествоСтрокВыплачено Цикл
		
		// Вывод Доходы в неденежной форме
		Если КоличествоСтрокСправочно = 0 Тогда
			
			Если СтрокВыведено = 0 Тогда
				ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "ЗаголовокСправочноВыплачено");
			Иначе
				ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "СтрокаСправочноВыплачено");
			КонецЕсли;
			
		ИначеЕсли СтрокВыведено <= КоличествоСтрокСправочно Тогда
			
			Если СтрокВыведено = 0 Тогда
				ИмяОбластиСтроки = "ЗаголовокСправочноВыплачено";
			Иначе
				ИмяОбластиСтроки = "СтрокаСправочноВыплачено";				
				ПараметрыЗаполнения = КоллекцииРазделов.Справочно[СтрокВыведено - 1];
			КонецЕсли; 
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, , ПараметрыЗаполнения);
			
		Иначе
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "СтрокаСправочноВыплачено");
			
		КонецЕсли;
		
		// Вывод Выплачено
		Если КоличествоСтрокВыплачено = 0 Тогда
			
			Если СтрокВыведено = 0 Тогда
				ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "ЗаголовокСправочноВыплачено");
			Иначе
				ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "СтрокаСправочноВыплачено");
			КонецЕсли;
			
		ИначеЕсли СтрокВыведено <= КоличествоСтрокВыплачено Тогда
			
			Если СтрокВыведено = 0 Тогда
				ИмяОбластиСтроки = "ЗаголовокСправочноВыплачено";
			Иначе
				ИмяОбластиСтроки = "СтрокаСправочноВыплачено";				
				ПараметрыЗаполнения = КоллекцииРазделов.Выплачено[СтрокВыведено - 1];
			КонецЕсли; 
			
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, , ПараметрыЗаполнения);
			
		Иначе
			
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "СтрокаСправочноВыплачено");
			
		КонецЕсли;
		
		СтрокВыведено = СтрокВыведено + 1;
		
	КонецЦикла;
	
	ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "ИтогСправочноВыплачено", , Новый Структура("Сумма", ИтогиРазделов.Справочно));
	ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "ИтогСправочноВыплачено", , Новый Структура("Сумма", ИтогиРазделов.Выплачено));
	
	// вывод долга за предприятием (сумма + текст)
	ПараметрыЗаполнения	= Новый Структура;
	ПараметрыЗаполнения.Вставить("ДолгНаНачалоТекст", ?(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца>=0, "Долг за предприятием на начало", "Долг за работником на начало"));
	ПараметрыЗаполнения.Вставить("ДолгНаНачало", ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца * ?(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца<0, -1, 1));
	ПараметрыЗаполнения.Вставить("ДолгНаКонецТекст", ?(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца>=0, "Долг за предприятием на конец", "Долг за работником на конец"));
	ПараметрыЗаполнения.Вставить("ДолгНаКонец", ИтогиПоГруппам.СуммаДолгаНаКонецМесяца* ?(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца<0, -1, 1));
	
	ВывестиОбластиСтроки(ДокументРезультат, Макет, "Долг", , ПараметрыЗаполнения);
	
	#КонецОбласти
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Процедура ВывестиОбластиСтроки(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода = Неопределено, Параметры = Неопределено)
	
	ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры);
	ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры)
	
КонецПроцедуры

Процедура ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода = Неопределено, Параметры = Неопределено)
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтроки + "|" + "ВидНачислено");
	Если Параметры <> Неопределено Тогда
		Область.Параметры.Заполнить(Параметры);
	КонецЕсли; 
	
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры

Процедура ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода = Неопределено, Параметры = Неопределено)
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтроки + "|" + "ВидУдержаноВыплачено");
	Если Параметры <> Неопределено Тогда
		Область.Параметры.Заполнить(Параметры);
	КонецЕсли; 
	
	ДокументРезультат.Присоединить(Область);
	
КонецПроцедуры

Процедура УдалитьСтрокиСНулевойСуммой(КоллекцияСтрок)
	
	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Если СтрокаКоллекции.Сумма = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаКоллекции);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		КоллекцияСтрок.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция АФМ_ПредставлениеПериода(ПериодДействия, ДатаНачала = Неопределено, ДатаОкончания = Неопределено)
	
	Результат	= "";
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		Месяц	= СтрЗаменить(Формат(ДатаНачала, "ДФ=МММ"), ".", "");
		Месяц	= ВРег(Сред(Месяц, 1, 1)) + Сред(Месяц, 2);
		
		Год		= Формат(ДатаНачала, "ДФ=гг");
		
		Если ДатаНачала = ДатаОкончания Тогда
			Результат = Формат(ДатаНачала, "ДФ=д") + " " + Месяц + " " + Год;
			
		ИначеЕсли ДатаНачала <> ПериодДействия Или ДатаОкончания <> НачалоДня(КонецМесяца(ПериодДействия)) Тогда
			Результат = Формат(ДатаНачала, "ДФ=д") + "-" + Формат(ДатаОкончания, "ДФ=д") + " " + Месяц + " " + Год;
			
		Иначе
			Результат = Месяц + " " + Год;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПериодДействия) Тогда
		Месяц	= СтрЗаменить(Формат(ПериодДействия, "ДФ=МММ"), ".", "");
		Месяц	= ВРег(Сред(Месяц, 1, 1)) + Сред(Месяц, 2);
		
		Результат	= Месяц + " " + Формат(ПериодДействия, "ДФ=гг");
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область АнализВзносовВФонды

//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000006316 29.07.2016
Процедура АнализВзносовВФонды_СформироватьМакет_ИзменениеДанных(Отчет, ТаблицаВзносы, ТаблицаВзносыФСС_НС) Экспорт
	
	//Справочно: если возникает перерасчет страховых взносов, например в мая за апрель. То при формировании
	//	отчета за апрель сумма начисленных страховых выводится правильно, без учета перерасчета в мая, но
	//	база едет, т.к. это колонки расчетыне. Если формировать за май, то цифра нормальная, но страховые уже
	//	другие, с учетом перерасчета. База едет - т.е. предел 796 тр, предел был превышен в апреле, в случае
	//	перерасчета база может получится 816 тр и т.д., но это ошибка. Т.к. база получается расчитывается из
	//	месяца получения дохода, а налоги исходя из периода действия.
	
	//проверка
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	Если ЗначениеПараметра(Настройки, "АФМ_ВыводитьПоФормеЦИУС") = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	//распределение базы,
	//	примечание, что бы колонку [Проекта] можно было выводить в отчете, необходимо во вложенную схему "ДанныеПФР"
	//	добавить новое поле "Проект". СКД = АнализВзносовВФонды.ОсновнаяСхемаКомпоновкиДанных. Само поле добавляется
	//	в этой процедуре в таблице значений.
	
	//Справочно: В зависимости от настроек [Проект] будет - группа сотрудника или статья финансирования.
	
	ИспользоватьСФ = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		ИспользоватьСФ = Истина;
	КонецЕсли;
	
	ОборПроект = ЗначениеПараметра(Настройки, "АФМ_Проект");
	
	ФизическиеЛица = ТаблицаВзносы.ВыгрузитьКолонку("ФизическоеЛицо");
	Организации = ТаблицаВзносы.ВыгрузитьКолонку("Организация");
	
	Если ИспользоватьСФ = Ложь Тогда
		
		//вариант - группа сотрудников
		
		//проверка
		Если ОборПроект = Справочники.ГруппыСотрудников.ПустаяСсылка() Тогда
			Возврат;
		КонецЕсли;
		
		//выборка данных
		ТаблицаГруппыСотрудников = ПолучитьТаблицуРаспределения(ФизическиеЛица, ИспользоватьСФ);
		
		//распределение
		ТаблицаВзносы.Колонки.Добавить("АФМ_Проект", Новый ОписаниеТипов("СправочникСсылка.ГруппыСотрудников"));
		ТаблицаВзносы = РаспределениеПоПроектам(ТаблицаВзносы, ТаблицаГруппыСотрудников, "ГруппаСотрудников", "ФизическоеЛицо", Справочники.ГруппыСотрудников.ПустаяСсылка());
		
		ТаблицаВзносыФСС_НС.Колонки.Добавить("АФМ_Проект", Новый ОписаниеТипов("СправочникСсылка.ГруппыСотрудников"));
		ТаблицаВзносыФСС_НС = РаспределениеПоПроектам(ТаблицаВзносыФСС_НС, ТаблицаГруппыСотрудников, "ГруппаСотрудников", "ФизическоеЛицо", Справочники.ГруппыСотрудников.ПустаяСсылка());
		
	Иначе
		
		//вариант - статья финасирования
		
		//проверка
		Если ОборПроект = Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка() Тогда
			Возврат;
		КонецЕсли;
		
		//даты
		ДатаНачалаНП = Дата(1,1,1);
		ДатаКонцаНП = Дата(1,1,1);
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если ЗначениеПараметра <> Неопределено Тогда
			ДатаНачалаНП = Дата(ЗначениеПараметра.Значение.ДатаНачала);
			ДатаКонцаНП  = Дата(ЗначениеПараметра.Значение.ДатаОкончания);
		КонецЕсли;
		
		Если ДатаНачалаНП = '00010101' Тогда
			ДатаНачалаНП = НачалоМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		Если ДатаКонцаНП = '00010101' Тогда
			ДатаКонцаНП = КонецМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		//выборка данных
		ТаблицаДолиРаспределения = ПолучитьТаблицуРаспределения(ФизическиеЛица, ИспользоватьСФ, ДатаНачалаНП, ДатаКонцаНП);
		
		//пост обработка долей распределения:
		//	удаление долей по другим организация (вариант когда сотрудник меняет организацию в середине месяца)
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаРаспределения Из ТаблицаДолиРаспределения Цикл
			Если Организации.Найти(СтрокаРаспределения.Организация) = Неопределено Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаРаспределения);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из  МассивУдаляемыхСтрок Цикл
			ТаблицаДолиРаспределения.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		//распределение
		ПоляРаспределения = "БазаПФР,БазаПФРЗанятыхНаРаботахСДосрочнойПенсией,БазаФОМС,БазаФСС,НачисленоВсего,НеОблагаетсяПФР,НеОблагаетсяФОМС,НеОблагаетсяФСС,";
		ПоляРаспределения = ПоляРаспределения + "ПособиеЗаСчетФСС,ПФРЗаЗанятыхНаРаботахСДосрочнойПенсией,ПФРНаДоплатуКПенсииШахтерам,ПФРНакопительная,ПФРПоДополнительномуТарифу,ПФРПоСуммарномуТарифу,ПФРССуммПревышения,";
		ПоляРаспределения = ПоляРаспределения + "ПФРСтраховая,СуммаПревысившаяПределПФР,СуммаПревысившаяПределФОМС,СуммаПревысившаяПределФСС,ТФОМС,ФСС,ФФОМС";
		ТаблицаВзносы.Колонки.Добавить("АФМ_Проект", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
		ТаблицаВзносы = РаспределениеПоПроектам(ТаблицаВзносы, ТаблицаДолиРаспределения, "СтатьяФинансирования", "ФизическоеЛицо", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка(), "МесяцРегистрацииДохода", ПоляРаспределения);
		
		ПоляРаспределения = "БазаФСС_НС,НачисленоВсего,НеОблагаетсяФСС_НС,ПособиеЗаСчетФСС_НС,ФССНесчастныеСлучаи";
		ТаблицаВзносыФСС_НС.Колонки.Добавить("АФМ_Проект", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
		ТаблицаВзносыФСС_НС = РаспределениеПоПроектам(ТаблицаВзносыФСС_НС, ТаблицаДолиРаспределения, "СтатьяФинансирования", "ФизическоеЛицо", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка(), "МесяцРегистрацииДохода", ПоляРаспределения);
		
	КонецЕсли;
	
	//отбор
	ОтобратьТаблицуПоПроекту(ТаблицаВзносы, ОборПроект);
	ОтобратьТаблицуПоПроекту(ТаблицаВзносыФСС_НС, ОборПроект);
	
КонецПроцедуры

Функция ПолучитьТаблицуРаспределения(ФизическиеЛица, ИспользоватьСФ, ДатаНачала = Неопределено, ДатаКонца = Неопределено) Экспорт
	
	Если ИспользоватьСФ = Ложь Тогда
		
		//вариант - группа сотрудников
		ЗапросГруппы = Новый Запрос;
		ЗапросГруппы.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		
		ЗапросГруппы.Текст =
		"ВЫБРАТЬ
		|	СоставГруппСотрудников.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(СоставГруппСотрудников.Сотрудник) КАК Сотрудник,
		|	МАКСИМУМ(СоставГруппСотрудников.ГруппаСотрудников) КАК ГруппаСотрудников,
		|	1 КАК Доля
		|ИЗ
		|	РегистрСведений.СоставГруппСотрудников КАК СоставГруппСотрудников
		|ГДЕ
		|	СоставГруппСотрудников.Сотрудник.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставГруппСотрудников.Сотрудник.ФизическоеЛицо";
		
		ТаблицаГруппыСотрудников = ЗапросГруппы.Выполнить().Выгрузить();
		Возврат ТаблицаГруппыСотрудников;
		
	Иначе
		
		//вариант - статья финасирования,
		//	справочно, доля рассчитывается исходя из пропорции суммы начислений по статья финансирования с учетом вычетов.
		
		//выбор данных
		ЗапросГруппы = Новый Запрос;
		ЗапросГруппы.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		ЗапросГруппы.УстановитьПараметр("ДатаНачала", ДатаНачала);
		ЗапросГруппы.УстановитьПараметр("ДатаКонца", ДатаКонца);
		
		ЗапросГруппы.Текст =
		"ВЫБРАТЬ
		|	НачисленияУдержанияПоСотрудникам.Период КАК Период,
		|	НачисленияУдержанияПоСотрудникам.Организация КАК Организация,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК Начисление,
		|	НачисленияУдержанияПоСотрудникам.Сумма КАК Сумма,
		|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования
		|ПОМЕСТИТЬ ВТВыборНачислений
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Активность = ИСТИНА
		|	И НачисленияУдержанияПоСотрудникам.Период >= &ДатаНачала
		|	И НачисленияУдержанияПоСотрудникам.Период <= &ДатаКонца
		|	И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В(&ФизическиеЛица)
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачисленияУдержанияПоКонтрагентамАкционерам.Период,
		|	НачисленияУдержанияПоКонтрагентамАкционерам.Организация,
		|	НачисленияУдержанияПоКонтрагентамАкционерам.ФизическоеЛицо,
		|	НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание,
		|	НачисленияУдержанияПоКонтрагентамАкционерам.Сумма,
		|	НачисленияУдержанияПоКонтрагентамАкционерам.СтатьяФинансирования
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержанияПоКонтрагентамАкционерам
		|ГДЕ
		|	НачисленияУдержанияПоКонтрагентамАкционерам.Активность = ИСТИНА
		|	И НачисленияУдержанияПоКонтрагентамАкционерам.Период >= &ДатаНачала
		|	И НачисленияУдержанияПоКонтрагентамАкционерам.Период <= &ДатаКонца
		|	И НачисленияУдержанияПоКонтрагентамАкционерам.ФизическоеЛицо В(&ФизическиеЛица)
		|	И НачисленияУдержанияПоКонтрагентамАкционерам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВыборНачислений.Период КАК Период,
		|	ВТВыборНачислений.Организация КАК Организация,
		|	ВТВыборНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТВыборНачислений.Начисление КАК Начисление,
		|	ВТВыборНачислений.Сумма КАК Сумма,
		|	ВТВыборНачислений.СтатьяФинансирования КАК СтатьяФинансирования
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТВыборНачислений КАК ВТВыборНачислений
		|ГДЕ
		|	НЕ ВТВыборНачислений.Начисление.КодДоходаСтраховыеВзносы = ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
		|	И НЕ ВТВыборНачислений.Начисление.КодДоходаСтраховыеВзносы = ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом)
		|	И НЕ ВТВыборНачислений.Начисление.КодДоходаСтраховыеВзносы = ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликомПрокуроров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОДоходахНДФЛ.Период КАК Период,
		|	СведенияОДоходахНДФЛ.Организация КАК Организация,
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
		|	СУММА(СведенияОДоходахНДФЛ.СуммаВычета) КАК СуммаВычета
		|ПОМЕСТИТЬ ВТВычеты
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.Активность = ИСТИНА
		|	И СведенияОДоходахНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)
		|	И СведенияОДоходахНДФЛ.Период >= &ДатаНачала
		|	И СведенияОДоходахНДФЛ.Период <= &ДатаКонца
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходахНДФЛ.Период,
		|	СведенияОДоходахНДФЛ.Организация,
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНачисления.Период КАК Период,
		|	ВТНачисления.Организация КАК Организация,
		|	ВТНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВТНачисления.Сумма - ЕСТЬNULL(ВТВычеты.СуммаВычета, 0)) КАК Сумма,
		|	ВТНачисления.СтатьяФинансирования КАК СтатьяФинансирования
		|ПОМЕСТИТЬ ВТНачисленияИтог
		|ИЗ
		|	ВТНачисления КАК ВТНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты КАК ВТВычеты
		|		ПО ВТНачисления.Период = ВТВычеты.Период
		|			И ВТНачисления.Организация = ВТВычеты.Организация
		|			И ВТНачисления.ФизическоеЛицо = ВТВычеты.ФизическоеЛицо
		|			И ВТНачисления.Начисление = ВТВычеты.Начисление
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНачисления.Период,
		|	ВТНачисления.Организация,
		|	ВТНачисления.ФизическоеЛицо,
		|	ВТНачисления.СтатьяФинансирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНачисленияИтог.Период КАК Период,
		|	ВТНачисленияИтог.Организация КАК Организация,
		|	ВТНачисленияИтог.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВТНачисленияИтог.Сумма) КАК СуммаОбщая
		|ПОМЕСТИТЬ ВТОбщиеСуммы
		|ИЗ
		|	ВТНачисленияИтог КАК ВТНачисленияИтог
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНачисленияИтог.Период,
		|	ВТНачисленияИтог.Организация,
		|	ВТНачисленияИтог.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНачисленияИтог.Организация КАК Организация,
		|	ВТНачисленияИтог.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТНачисленияИтог.Период КАК Период,
		|	ВТНачисленияИтог.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА ВТОбщиеСуммы.СуммаОбщая = 0
		|			ТОГДА 1
		|		ИНАЧЕ ВТНачисленияИтог.Сумма / ВТОбщиеСуммы.СуммаОбщая
		|	КОНЕЦ КАК Доля
		|ИЗ
		|	ВТНачисленияИтог КАК ВТНачисленияИтог
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбщиеСуммы КАК ВТОбщиеСуммы
		|		ПО ВТНачисленияИтог.Период = ВТОбщиеСуммы.Период
		|			И ВТНачисленияИтог.Организация = ВТОбщиеСуммы.Организация
		|			И ВТНачисленияИтог.ФизическоеЛицо = ВТОбщиеСуммы.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	ФизическоеЛицо,
		|	Период";
		
		ТаблицаВыборСФ = ЗапросГруппы.Выполнить().Выгрузить();
		
		//удалим нулевые доли
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаРаспределения Из ТаблицаВыборСФ Цикл
			Если СтрокаРаспределения.Доля = 0 Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаРаспределения);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			ТаблицаВыборСФ.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		//заполним пустые статьи финансирования (не введены в документе / регистре накопления / распределение в рег.св.)
		ПустаяСтатьяФинансирования = Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка();
		Для Каждого СтрокаРаспределения Из ТаблицаВыборСФ Цикл
			Если СтрокаРаспределения.СтатьяФинансирования = ПустаяСтатьяФинансирования Тогда
				СтрокаРаспределения.СтатьяФинансирования = АФМ_ОтражениеЗарплатыВБухучете.ПолучитьСтатьюОсновнойДеятельности(СтрокаРаспределения.Организация);
			КонецЕсли;
		КонецЦикла;
		
		//сформируем итоговую таблицу на каждое начало месяца из периода выборки
		МассивФЛ = Новый Массив;
		Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
			Если МассивФЛ.Найти(ФизическоеЛицо) = Неопределено Тогда
				МассивФЛ.Добавить(ФизическоеЛицо); //исключим повторы
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДолиРаспределения = ТаблицаВыборСФ.СкопироватьКолонки("Организация,ФизическоеЛицо,Период,СтатьяФинансирования,Доля");
		
		Для Каждого ФизическоеЛицо Из МассивФЛ Цикл
			
			ТекущийПериод = НачалоМесяца(ДатаНачала);
			ТекущаяСтатьяФинансирования = Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка();
			
			Пока ТекущийПериод <= НачалоМесяца(ДатаКонца) Цикл
				
				СтруктураПоиска = Новый Структура("ФизическоеЛицо,Период", ФизическоеЛицо, ТекущийПериод);
				ПоискРаспределения = ТаблицаВыборСФ.НайтиСтроки(СтруктураПоиска);
				
				Если ПоискРаспределения.Количество() = 0 Тогда
					
					//данных распределения за период не найденно или вводились ранее, поэтому заполним по последним данным
					НоваяСтрока = ТаблицаДолиРаспределения.Добавить();
					НоваяСтрока.Организация = Справочники.Организации.ПустаяСсылка();
					НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
					НоваяСтрока.Период = ТекущийПериод;
					НоваяСтрока.СтатьяФинансирования = ТекущаяСтатьяФинансирования;
					НоваяСтрока.Доля = 1;
					
				Иначе
					
					//найденно распределение за период
					Для Каждого СтрокаРаспределения Из ПоискРаспределения Цикл
						НоваяСтрока = ТаблицаДолиРаспределения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
						ТекущаяСтатьяФинансирования = СтрокаРаспределения.СтатьяФинансирования;
					КонецЦикла;
					
				КонецЕсли;
				
				ТекущийПериод = КонецМесяца(ТекущийПериод) + 1;
				
			КонецЦикла;
			
		КонецЦикла;
			
		//завершение
		Возврат ТаблицаДолиРаспределения;
		
	КонецЕсли;
	
КонецФункции

Функция РаспределениеПоПроектам(ТаблицаДанных, ТаблицаРаспределения, ПолеПроекта, ПолеПоиска, ПустоеЗначение, ПолеПериода = Неопределено, ПоляРаспределения = Неопределено) Экспорт
	
	//создадим новую таблицу, куда будем записывать распределение
	ТаблицаДанныхРаспределенная = ТаблицаДанных.СкопироватьКолонки();
	
	//обработка исходных данных
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Если ПустоеЗначение = Справочники.ГруппыСотрудников.ПустаяСсылка() Тогда
		
			//распределение по группе сотрудника - 100% на одну группу, без изменений по периоду
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить(ПолеПоиска, СтрокаДанных[ПолеПоиска]);
			
			ЗначениеПроекта = ПустоеЗначение;
			НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗначениеПроекта = НайденныеСтроки[0][ПолеПроекта];
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДанныхРаспределенная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.АФМ_Проект = ЗначениеПроекта;
			
		Иначе
			
			//распределение по статьям финансирования - может разбиваться, может менться в зависимости от периода
			МассивРасчетныхПолей = Новый Массив;
			Если НЕ ПоляРаспределения = Неопределено Тогда
				МассивРасчетныхПолей = СтрРазделить(ПоляРаспределения, ",");
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить(ПолеПоиска, СтрокаДанных[ПолеПоиска]);
			СтруктураПоиска.Вставить("Период", НачалоМесяца(СтрокаДанных[ПолеПериода]));
			
			НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				//нет данных по распределению
				НоваяСтрока = ТаблицаДанныхРаспределенная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
				НоваяСтрока.АФМ_Проект = ПустоеЗначение;
				
			Иначе
				
				//распредление
				Для Каждого СтрокаРаспределения Из НайденныеСтроки Цикл
					
					НоваяСтрока = ТаблицаДанныхРаспределенная.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					НоваяСтрока.АФМ_Проект = СтрокаРаспределения[ПолеПроекта];
					
					ДоляРаспределения = СтрокаРаспределения.Доля;
					Если ДоляРаспределения = 1 Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого РасчетноеПоле Из МассивРасчетныхПолей Цикл
						НоваяСтрока[РасчетноеПоле] = Окр(СтрокаДанных[РасчетноеПоле] * ДоляРаспределения, 2);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//завершение
	Возврат ТаблицаДанныхРаспределенная;
	
КонецФункции

Процедура ОтобратьТаблицуПоПроекту(ТаблицаДанных, ПроектПоиск) Экспорт
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если НЕ СтрокаДанных.АФМ_Проект = ПроектПоиск Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ТаблицаДанных.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры
//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000006316 29.07.2016

#КонецОбласти

#Область РегистрНалоговогоУчетаПоНДФЛ

//--> АФМ-Серверс Дебов Игорь ДМ0000007208

//	Полностью подключить механизм не получилось, но и выносить отчет во нешний тоже не правильно, т.к.
//	в отчете большой запрос по выборке данных, который постоянно обновляется. Плюс процедура формирования
//	отчета тоже постоянно обновляется. Взаимосвясь между процедурами через [Перем], а не параметры
//	процедур, т.е. просто отдельно вызвать процедуру тоже не получится. Из-за того что полностью не
// 	получается подключить механизм, то останутся вставки в модуле объекта, но они максимально сжаты и
//	при обновлении их достаточно просто будет скопировать. Ранее модуль этого объекта был доработан.
//
//	В очете делались ранее доработки, которые были вынесены и сжаты: ДМ0000006172 (Зайцев П.В. 08.02.2016, Юдинцев В.С. 11.04.2016).
//
//измение запросов при формировании данных
Процедура РегистрНалоговогоУчетаПоНДФЛ_ПолучитьДанныеДляПостроенияОтчета(Отчет, Запрос, ВидЗамены=0) Экспорт
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ЗначениеПараметра(Настройки, "АФМ_ВыводитьПоФормеЦИУС") = Истина Тогда
		
		Если ВидЗамены = 1 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НДФЛСведенияОДоходах.Период,", "КОНЕЦПЕРИОДА(НДФЛСведенияОДоходах.Период,МЕСЯЦ) КАК Период,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НДФЛРасчетыСБюджетом.Период,", "КОНЕЦПЕРИОДА(НДФЛРасчетыСБюджетом.Период,МЕСЯЦ) КАК Период,");
			
		ИначеЕсли ВидЗамены = 2 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)", "ИНАЧЕ НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.МесяцНалоговогоПериода, МЕСЯЦ)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТОГДА ДАТАВРЕМЯ(1, 1, 1)", "ТОГДА КОНЕЦПЕРИОДА(НДФЛСведенияОДоходах.ДатаПолученияДохода, МЕСЯЦ)");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//замена параметров при выводе в отчет
Процедура РегистрНалоговогоУчетаПоНДФЛ_СформироватьМакет(Отчет, ПараметрыЗаполнения, ВидЗамены=0) Экспорт
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ЗначениеПараметра(Настройки, "АФМ_ВыводитьПоФормеЦИУС") = Истина Тогда
		
		Если ВидЗамены = 1 Тогда
			ПараметрыЗаполнения.ДатаПолученияДохода = "";
			
		ИначеЕсли ВидЗамены = 2 Тогда
			ПараметрыЗаполнения.СуммаНалогаУдержанная = ПараметрыЗаполнения.СуммаНалогаИсчисленная;
			ПараметрыЗаполнения.СуммаНалогаПеречисленная = ПараметрыЗаполнения.СуммаНалогаИсчисленная;
			
			ПараметрыЗаполнения.СуммаНалогаИзлишнеУдержанная = 0;
			ПараметрыЗаполнения.СуммаНалогаНеУдержанная = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//заменяем вывод типовой области - НалогПеречисленный
Функция РегистрНалоговогоУчетаПоНДФЛ_ОбластьИсчислено(Отчет,
	ВыборкаНалогиНачисленныеИтоги, ВыборкаНалогиПеречисленныеИтоги, ДанныеОНалогахПеречисленныхПоСтавкам, ДокументРезультат, ВыборкаРегистраций, ФизическоеЛицо, ГоловнаяОрганизация,
	ВыводимыеОбласти, НалогПеречисленныйЗаголовок, НалогПеречисленныйШапка, НалогПеречисленныйСтрока) Экспорт
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	Если ЗначениеПараметра(Настройки, "АФМ_ВыводитьПоФормеЦИУС") = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НалогПоСтавке13ИсчисленПомесячно = Ложь;
	ВыборкаНалогиНачисленныеИтоги.Сбросить();
	ВыборкаНалогиПеречисленныеИтоги.Сбросить();
	
	//таблица данных по платежам
	//	РеквизитыПП: данные по переносу читаем из доп. рег.св., а данные расчетные из типовых
	ТаблицаНалогиПеречисленные = Новый ТаблицаЗначений;
	ТаблицаНалогиПеречисленные.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаНалогиПеречисленные.Колонки.Добавить("РегистрацияВНалоговомОргане");
	ТаблицаНалогиПеречисленные.Колонки.Добавить("Месяц");
	ТаблицаНалогиПеречисленные.Колонки.Добавить("Дата");
	ТаблицаНалогиПеречисленные.Колонки.Добавить("РеквизитыПП");
	
	Если ВыборкаНалогиПеречисленныеИтоги.НайтиСледующий(ГоловнаяОрганизация, "ГоловнаяОрганизация") Тогда
		ВыборкаНалогиПеречисленныеИтогиПоФизЛицу = ВыборкаНалогиПеречисленныеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаНалогиПеречисленныеИтогиПоФизЛицу.НайтиСледующий(ФизическоеЛицо, "ФизическоеЛицо") Тогда
			ВыборкаНалогиПеречисленныеИтогиПоРегистрации = ВыборкаНалогиПеречисленныеИтогиПоФизЛицу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаНалогиПеречисленныеИтогиПоРегистрации.НайтиСледующий(ВыборкаРегистраций.РегистрацияВНалоговомОргане, "РегистрацияВНалоговомОргане") Тогда
				ВыборкаНалогиПеречисленныеДетали = ВыборкаНалогиПеречисленныеИтогиПоРегистрации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНалогиПеречисленныеДетали.Следующий() Цикл
					
					Если НЕ СокрЛП(ВыборкаНалогиПеречисленныеДетали.РеквизитыПП) = "" Тогда
						СтрокаНалогПеречисленный=ТаблицаНалогиПеречисленные.Добавить();
						СтрокаНалогПеречисленный.ФизическоеЛицо=ФизическоеЛицо;
						СтрокаНалогПеречисленный.РегистрацияВНалоговомОргане=ВыборкаРегистраций.РегистрацияВНалоговомОргане;
						СтрокаНалогПеречисленный.Месяц=ВыборкаНалогиПеречисленныеДетали.Месяц;
						СтрокаНалогПеречисленный.Дата=ВыборкаНалогиПеречисленныеДетали.Дата;
						СтрокаНалогПеречисленный.РеквизитыПП=ВыборкаНалогиПеречисленныеДетали.РеквизитыПП;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗапросДанныеПП=Новый Запрос;
	ЗапросДанныеПП.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	ЗапросДанныеПП.УстановитьПараметр("ФизическоеЛицо",		ФизическоеЛицо);
	
	ЗапросДанныеПП.Текст="ВЫБРАТЬ
	                     |	АФМ_РасчетыНалоговыхАгентовСБюджетомПоНДФЛРеквизитыПП.РегистрацияВНалоговомОргане,
	                     |	АФМ_РасчетыНалоговыхАгентовСБюджетомПоНДФЛРеквизитыПП.МесяцНалоговогоПериода КАК Месяц,
	                     |	АФМ_РасчетыНалоговыхАгентовСБюджетомПоНДФЛРеквизитыПП.РеквизитыПлатежногоПоручения
	                     |ИЗ
	                     |	РегистрСведений.АФМ_РасчетыНалоговыхАгентовСБюджетомПоНДФЛРеквизитыПП КАК АФМ_РасчетыНалоговыхАгентовСБюджетомПоНДФЛРеквизитыПП
	                     |ГДЕ
	                     |	АФМ_РасчетыНалоговыхАгентовСБюджетомПоНДФЛРеквизитыПП.ГоловнаяОрганизация = &ГоловнаяОрганизация
	                     |	И АФМ_РасчетыНалоговыхАгентовСБюджетомПоНДФЛРеквизитыПП.ФизическоеЛицо = &ФизическоеЛицо";
	
	ТаблицаДанныеПП=ЗапросДанныеПП.Выполнить().Выгрузить();
	
	//выводим область [НалогиНачисленные] как [НалогиПеречисленные]
	Если ВыборкаНалогиНачисленныеИтоги.НайтиСледующий(ГоловнаяОрганизация, "ГоловнаяОрганизация") Тогда
		ВыборкаНалогиПеречисленныеИтогиПоФизЛицу = ВыборкаНалогиНачисленныеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаНалогиПеречисленныеИтогиПоФизЛицу.НайтиСледующий(ФизическоеЛицо, "ФизическоеЛицо") Тогда
			ВыборкаНалогиПеречисленныеИтогиПоРегистрации = ВыборкаНалогиПеречисленныеИтогиПоФизЛицу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаНалогиПеречисленныеИтогиПоРегистрации.НайтиСледующий(ВыборкаРегистраций.РегистрацияВНалоговомОргане, "РегистрацияВНалоговомОргане") Тогда
				ВыборкаНалогиПеречисленныеДетали = ВыборкаНалогиПеречисленныеИтогиПоРегистрации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				ВыводимыеОбласти.Добавить(НалогПеречисленныйЗаголовок);
				ВыводимыеОбласти.Добавить(НалогПеречисленныйШапка);
				ВыводимыеОбласти.Добавить(НалогПеречисленныйСтрока);
			
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(НалогПеречисленныйЗаголовок);
				ДокументРезультат.Вывести(НалогПеречисленныйШапка);
				Пока ВыборкаНалогиПеречисленныеДетали.Следующий() Цикл
					
					НалогПеречисленныйСтрока.Параметры.Месяц = Формат(ВыборкаНалогиПеречисленныеДетали.Месяц, ?(НалогПоСтавке13ИсчисленПомесячно,"ДФ=ММММ","ДФ=дд.ММ.гггг"));
					НалогПеречисленныйСтрока.Параметры.Дата = Формат(ВыборкаНалогиПеречисленныеДетали.Дата, "ДФ=дд.ММ.гггг");
					НалогПеречисленныйСтрока.Параметры.Ставка = ВыборкаНалогиПеречисленныеДетали.Ставка;
					НалогПеречисленныйСтрока.Параметры.Сумма =  ВыборкаНалогиПеречисленныеДетали.НалогНачислено;
					
					РеквизитыППИтог = "";
					
					СтруктураПоиска=Новый Структура("РегистрацияВНалоговомОргане, Месяц");
					СтруктураПоиска.РегистрацияВНалоговомОргане=ВыборкаРегистраций.РегистрацияВНалоговомОргане;
					СтруктураПоиска.Месяц=ВыборкаНалогиПеречисленныеДетали.Месяц;
					
					НайденныеСтроки=ТаблицаНалогиПеречисленные.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество()>0 Тогда
						//есть типовые данные
						РеквизитыППИтог = СокрЛП(НайденныеСтроки[0].РеквизитыПП);
						
					Иначе
						//проверяем на наличие в дополнительном регистре
						НайденныеСтроки=ТаблицаДанныеПП.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество()>0 Тогда
							РеквизитыППИтог = СокрЛП(НайденныеСтроки[0].РеквизитыПлатежногоПоручения);
						КонецЕсли;
					КонецЕсли;
					
					НалогПеречисленныйСтрока.Параметры.РеквизитыПП = РеквизитыППИтог;
					
					Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, НалогПеречисленныйСтрока) Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(НалогПеречисленныйШапка);
					КонецЕсли;
					
					ДокументРезультат.Вывести(НалогПеречисленныйСтрока);
					
					Если ВыборкаНалогиПеречисленныеДетали.Ставка = Перечисления.НДФЛСтавки.Ставка30 И ВыборкаНалогиПеречисленныеДетали.СтавкаПоИтогамГода = Перечисления.НДФЛСтавки.Ставка13 Тогда
						СтавкаИтогов = Перечисления.НДФЛСтавки.Ставка13
					Иначе
						СтавкаИтогов = ВыборкаНалогиПеречисленныеДетали.Ставка
					КонецЕсли;
					Если ДанныеОНалогахПеречисленныхПоСтавкам.Получить(СтавкаИтогов) = Неопределено Тогда
						ДанныеОНалогахПеречисленныхПоСтавкам.Вставить(СтавкаИтогов, ВыборкаНалогиПеречисленныеДетали.НалогНачислено);
					Иначе
						ДанныеОНалогахПеречисленныхПоСтавкам[СтавкаИтогов] = ДанныеОНалогахПеречисленныхПоСтавкам[СтавкаИтогов] + ВыборкаНалогиПеречисленныеДетали.НалогНачислено;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
//<-- АФМ-Серверс Дебов Игорь ДМ0000007208

#КонецОбласти

#Область СостояниеШтатногоРасписания

#Область ЗаполненностьШтатногоРасписания
#КонецОбласти

#Область ШтатнаяРасстановка

//--> АФМ-Серверс Дебов Игорь ДМ0000008195 05.10.2016
Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_ИзменитьСхему(Отчет)
	
#Если ВебКлиент Тогда
	
	//справочно: при работе в web-клиенте (http://cius-1c01/CIUS_ZUP/ru/) типовая СКД
	//	не инициализируется и отчет не открывается.
	
	//подробно об ошибке: СКД для этого отчета в web-клиенте не работает, при отладке
	//	ошибка происходит в точке
	//	ОбщийМодуль.ВариантыОтчетовКлиент
	//	Процедура ОткрытьФормуОтчета(....) Экспорт
	//	ОткрытьФорму(ПолноеИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Истина);
	//	т.е. в этот момент еще нет инициализации СКД, и нет возможности программно изменить
	//	пользовательские поля (Оклад (тариф) мин., Оклад (тариф) макс.,ФОТ мин., ФОТ макс.),
	//	а именно в них ошибка. Поэтому пришлось внести изменения в СКД и после обновления,
	//	это нужно повторить, если 1С не устранит сама ошибку.
	
	//описане доработки:
	//	изменить нужно пользовательские поля для вариантов - ЗаполненностьШтатногоРасписания, ШтатнаяРасстановка
	//	Оклад (тариф) мин. -> ПозицияШтатногоРасписания.ОкладТарифМин -> ПозицияШтатногоРасписания.ОкладТариф
	//	Оклад (тариф) макс. -> ПозицияШтатногоРасписания.ОкладТарифМакс -> ПозицияШтатногоРасписания.ОкладТариф
	//	ФОТ мин. -> ПозицияШтатногоРасписания.ФОТМин -> ПозицияШтатногоРасписания.ФОТ
	//	ФОТ макс. -> ПозицияШтатногоРасписания.ФОТМакс -> ПозицияШтатногоРасписания.ФОТ
	
#КонецЕсли

КонецПроцедуры
//<-- АФМ-Серверс Дебов Игорь ДМ0000008195 05.10.2016

//--> АФМ-Серверс Дебов Игорь Заявка 000000008963 27.05.2016
Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	Попытка
		
	    //общие параметры
		СхемаКомпоновкиДанных	= Отчет.СхемаКомпоновкиДанных;
		КомпоновщикНастроек		= Отчет.КомпоновщикНастроек;
		КлючВарианта			= ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
		
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ШтатнаяРасстановка_АФМ";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		// Установка параметров настроек штатного расписания (из типового варианта)
		НастройкиШтатногоРасписания = УправлениеШтатнымРасписанием.НастройкиШтатногоРасписания();
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИспользоватьБронированиеПозиций"));
		ЗначениеПараметра.Значение = НастройкиШтатногоРасписания.ИспользоватьБронированиеПозиций;
		ЗначениеПараметра.Использование = Истина;
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИспользоватьПодработки"));
		ЗначениеПараметра.Значение = Не КлючВарианта = "ШтатнаяРасстановка" И ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		ЗначениеПараметра.Использование = Истина;
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДнейСохраненияБрони"));
		ЗначениеПараметра.Значение = НастройкиШтатногоРасписания.ДнейСохраненияБрони;
		ЗначениеПараметра.Использование = Истина;
		
		//изменим настройки варианта
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		СостояниеШтатногоРасписания_ШтатнаяРасстановка_ИзменитьНастройки(НастройкиОтчета, СоответствиеПользовательскихПолей);
		
		//параметры отчета
		ДатаОтчета = Дата(1, 1, 1);
		ДатаОтчетаТекст = "Штатная расстановка на ";
		
		ПараметрДатаОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаАктуальности"));
		Если Не ПараметрДатаОтчета = Неопределено Тогда
			ДатаОтчета = ПараметрДатаОтчета.Значение.Дата;
			ДатаОтчетаТекст = ДатаОтчетаТекст + Формат(ПараметрДатаОтчета.Значение.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		СводнаяШтатнаяРасстановка = Ложь;
		ПараметрСводнаяШтатнаяРасстановка = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("АФМ_СводнаяШтатнаяРасстановка"));
		Если Не ПараметрСводнаяШтатнаяРасстановка = Неопределено Тогда
			СводнаяШтатнаяРасстановка = ПараметрСводнаяШтатнаяРасстановка.Значение;
		КонецЕсли;
		
		ВыводитьВакансии = Ложь;
		ПараметрВыводитьВакансии = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("АФМ_ВыводитьВакансии"));
		Если Не ПараметрВыводитьВакансии = Неопределено Тогда
			ВыводитьВакансии = ПараметрВыводитьВакансии.Значение;
		КонецЕсли;
		
		ВременноНеРаботающие = Ложь;
		ПараметрВременноНеРаботающие = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("АФМ_ВременноНеРаботающие"));
		Если Не ПараметрВременноНеРаботающие = Неопределено Тогда
			ВременноНеРаботающие = ПараметрВременноНеРаботающие.Значение;
		КонецЕсли;
		
		ВыводитьВнеШтатногоРасписания = Ложь;
		ПараметрВыводитьВнеШтатногоРасписания = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("АФМ_ВыводитьВнеШтатногоРасписания"));
		Если Не ПараметрВыводитьВнеШтатногоРасписания = Неопределено Тогда
			ВыводитьВнеШтатногоРасписания = ПараметрВыводитьВнеШтатногоРасписания.Значение;
		КонецЕсли;
		
		//соберем исходную таблицу с данными
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Отчет.СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ТаблицаДанных = СостояниеШтатногоРасписания_ШтатнаяРасстановка_СобратьТаблицуДанных(ДатаОтчета, ДанныеОтчета, ВыводитьВакансии, ВременноНеРаботающие, ВыводитьВнеШтатногоРасписания, СоответствиеПользовательскихПолей);
		
		//макет
		Макет1 = УправлениеПечатью.МакетПечатнойФормы("Отчет.СостояниеШтатногоРасписания.АФМ_Макет_ШтатнаяРасстановка");
		Макет2 = УправлениеПечатью.МакетПечатнойФормы("Отчет.СостояниеШтатногоРасписания.АФМ_Макет_СводнаяШтатнаяРасстановка");
		
		Макеты = Новый Структура("ОбластьШапка1, ОбластьШапка2, ОбластьУровень1, ОбластьУровень2, ОбластьСтрока, ОбластьИтогУровень2, ОбластьИтогУровень1, ОбластьИтоги, 
								|ОбластьСводнаяШапка1, ОбластьСводнаяШапка2, ОбластьСводнаяОрганизация, ОбластьСводнаяИтоги, ОбластьСводнаяПодпись");
		Макеты.ОбластьШапка1 = Макет1.ПолучитьОбласть("ОбластьШапка1");
		Макеты.ОбластьШапка2 = Макет1.ПолучитьОбласть("ОбластьШапка2");
		Макеты.ОбластьУровень1 = Макет1.ПолучитьОбласть("ОбластьУровень1");
		Макеты.ОбластьУровень2 = Макет1.ПолучитьОбласть("ОбластьУровень2");
		Макеты.ОбластьСтрока = Макет1.ПолучитьОбласть("ОбластьСтрока");
		Макеты.ОбластьИтогУровень2 = Макет1.ПолучитьОбласть("ОбластьИтогУровень2");
		Макеты.ОбластьИтогУровень1 = Макет1.ПолучитьОбласть("ОбластьИтогУровень1");
		Макеты.ОбластьИтоги = Макет1.ПолучитьОбласть("ОбластьИтоги");
		
		Макеты.ОбластьСводнаяШапка1 = Макет2.ПолучитьОбласть("ОбластьСводнаяШапка1");
		Макеты.ОбластьСводнаяШапка2 = Макет2.ПолучитьОбласть("ОбластьСводнаяШапка2");
		Макеты.ОбластьСводнаяОрганизация = Макет2.ПолучитьОбласть("ОбластьСводнаяОрганизация");
		Макеты.ОбластьСводнаяИтоги = Макет2.ПолучитьОбласть("ОбластьСводнаяИтоги");
		Макеты.ОбластьСводнаяПодпись = Макет2.ПолучитьОбласть("ОбластьСводнаяПодпись");
		
		//формируем отчет
		Если СводнаяШтатнаяРасстановка = Ложь Тогда
			
			//по организациям
			Для Каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
				
				//СтруктураОтветсвенногоБухгалтера = ПолучитьПодписьюОтветсвенногоБухгалтера(СтрокаОрганизации.Организация, КонецДня(ДатаОтчета));
				ПараметрыПодписей = ПолучитьСведенияОбОтветственныхЛицах(СтрокаОрганизации.Организация, КонецДня(ДатаОтчета));
				
				ОбщиеПараметры = Новый Структура;
				ОбщиеПараметры.Вставить("ДатаОтчета", ДатаОтчета);
				ОбщиеПараметры.Вставить("ДатаОтчетаТекст", ДатаОтчетаТекст);
				ОбщиеПараметры.Вставить("ОрганизацияТекст", СокрЛП(СтрокаОрганизации.Организация.НаименованиеСокращенное));
				ОбщиеПараметры.Вставить("ОбщаяПодпись", ПараметрыПодписей.РуководительПодпись);
				
				СостояниеШтатногоРасписания_ШтатнаяРасстановка_ВывестиОрганизацию(СтрокаОрганизации.Организация, ТаблицаДанных, Макеты, ДокументРезультат, СоответствиеПользовательскихПолей, ОбщиеПараметры);
				
			КонецЦикла;
		
		Иначе
			
			//сводный (с расчетом средних показателей)
			ОбщиеПараметры = Новый Структура;
			ОбщиеПараметры.Вставить("ДатаОтчета", ДатаОтчета);
			ОбщиеПараметры.Вставить("ДатаОтчетаТекст", ДатаОтчетаТекст);
			ОбщиеПараметры.Вставить("ОбщаяПодпись", "_____________________________  _________________  ________________________");
			
			СостояниеШтатногоРасписания_ШтатнаяРасстановка_ФормированиеСводногоОтчета(ТаблицаДанных, Макеты, ОбщиеПараметры, ДокументРезультат);
			
		КонецЕсли;
		
		//завершение
		СтандартнаяОбработка = Ложь;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета ""Штатное расписание"" внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;	
	
КонецПроцедуры

Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_ИзменитьНастройки(НастройкиОтчета, СоответствиеПользовательскихПолей)
	
	//изменим выбранные поля в отчете
	НастройкиОтчета.Выбор.Элементы.Очистить();
	
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("Сотрудник"));
	
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("Сотрудник.ОкладТарифСотрудника"));
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("Сотрудник.ФОТСотрудника"));
	
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("КоличествоСтавок"));
	
	//отключим уровень - ДатаОтчета
	ВеткаОрганизации = НастройкиОтчета.Структура[0];
	ВеткаОрганизации.Структура[0].Использование = Ложь;
	
	//изменим группировку по подразделению
	ВеткаПодразделения = ВеткаОрганизации.Структура[1];
	ВеткаПодразделения.ПоляГруппировки.Элементы.Очистить();
	НовоеПоле = ВеткаПодразделения.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Подразделение");
	
КонецПроцедуры

Функция СостояниеШтатногоРасписания_ШтатнаяРасстановка_СобратьТаблицуДанных(ДатаОтчета, ДанныеОтчета, ВыводитьВакансии, ВременноНеРаботающие, ВыводитьВнеШтатногоРасписания, СоответствиеПользовательскихПолей)
	
	//описание таблицы
	ТаблицаСтавок = Новый ТаблицаЗначений;
	ТаблицаСтавок.Колонки.Добавить("Организация");
	ТаблицаСтавок.Колонки.Добавить("ПозицияШтатногоРасписания");
	ТаблицаСтавок.Колонки.Добавить("КолвоЕдениц");
	ТаблицаСтавок.Колонки.Добавить("Остаток");
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("Уровень1");
	ТаблицаДанных.Колонки.Добавить("Уровень1Код");
	ТаблицаДанных.Колонки.Добавить("Уровень2");
	ТаблицаДанных.Колонки.Добавить("Уровень2Код");
	ТаблицаДанных.Колонки.Добавить("ПозицияШтатногоРасписания");
	ТаблицаДанных.Колонки.Добавить("Подразделение");
	ТаблицаДанных.Колонки.Добавить("ПодразделениеКод");
	ТаблицаДанных.Колонки.Добавить("Должность");
	ТаблицаДанных.Колонки.Добавить("ДолжностьКод");
	ТаблицаДанных.Колонки.Добавить("ПорядокПозиции");
	ТаблицаДанных.Колонки.Добавить("КолвоЕдениц");
	ТаблицаДанных.Колонки.Добавить("Ставка");
	ТаблицаДанных.Колонки.Добавить("СуммаОклада");
	ТаблицаДанных.Колонки.Добавить("СуммаОкладаПоШР");
	ТаблицаДанных.Колонки.Добавить("СуммаВсего");
	ТаблицаДанных.Колонки.Добавить("СуммаФОТ");
	ТаблицаДанных.Колонки.Добавить("Категория");
	ТаблицаДанных.Колонки.Добавить("ФИО");
	ТаблицаДанных.Колонки.Добавить("Сотрудник");
	ТаблицаДанных.Колонки.Добавить("Премия0Процент"); //Персональная надбавка
	ТаблицаДанных.Колонки.Добавить("Премия0Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия1Считать"); //Надбавка за выслугу лет
	ТаблицаДанных.Колонки.Добавить("Премия1Процент");
	ТаблицаДанных.Колонки.Добавить("Премия1Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия2Процент"); //Премия за месяц
	ТаблицаДанных.Колонки.Добавить("Премия2Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия3Процент"); //Квартальная премия (в расчете на месяц)
	ТаблицаДанных.Колонки.Добавить("Премия3Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия4Процент"); //Выплаты по РК и СН (Районный коэффициент и северная надбавка)
	ТаблицаДанных.Колонки.Добавить("Премия4Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия5Процент"); //Выплаты по РН (Региональная надбавка)
	ТаблицаДанных.Колонки.Добавить("Премия5Сумма");
	ТаблицаДанных.Колонки.Добавить("СуммаИтого");
	ТаблицаДанных.Колонки.Добавить("ВОтпуске");
	ТаблицаДанных.Колонки.Добавить("ВОтпускеТекст");
	ТаблицаДанных.Колонки.Добавить("Проект");
	
	//основные данные из СКД
	Для Каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаШтатногоРасписания Из СтрокаПодразделения.Строки Цикл
				Для Каждого СтрокаСотрудника Из СтрокаШтатногоРасписания.Строки Цикл
					
					//проверка
					Если СтрокаСотрудника.Сотрудник = Неопределено
						ИЛИ СтрокаСотрудника.Сотрудник = Справочники.Сотрудники.ПустаяСсылка() Тогда
						//изменен порядок уровней или пустое значение
						Продолжить;
					КонецЕсли;
					
					//кол-во ставок из штатного расписания
					СтрокаСтавки = ТаблицаСтавок.Добавить();
					СтрокаСтавки.Организация = 		СтрокаСотрудника.Организация;
					СтрокаСтавки.ПозицияШтатногоРасписания = СтрокаСотрудника.ПозицияШтатногоРасписания;
					СтрокаСтавки.КолвоЕдениц = 		СтрокаСотрудника.ПозицияШтатногоРасписанияКоличествоСтавок;
					СтрокаСтавки.Остаток = 			СтрокаСотрудника.ПозицияШтатногоРасписанияКоличествоСтавок;
					
					//основные данные
					СтрокаДанных = ТаблицаДанных.Добавить();
					СтрокаДанных.Организация = 		СтрокаСотрудника.Организация;
					СтрокаДанных.ПозицияШтатногоРасписания = СтрокаСотрудника.ПозицияШтатногоРасписания;
					СтрокаДанных.Подразделение = 	СтрокаСотрудника.Подразделение;
					СтрокаДанных.ПодразделениеКод = СокрЛП(СтрокаДанных.Подразделение.Код);
					СтрокаДанных.Должность = 		СтрокаСотрудника.ПозицияШтатногоРасписания.Должность;
					СтрокаДанных.ДолжностьКод = 	СокрЛП(СтрокаДанных.Должность.РеквизитДопУпорядочивания);
					СтрокаДанных.ПорядокПозиции = 	СтрокаСотрудника.ПозицияШтатногоРасписания.АФМ_ПорядокВШтатномРасписании;
					СтрокаДанных.КолвоЕдениц = 		0; //распределяется, т.к. кол-во ставок по позиции штатного расписания, а не сотруднику. Пример ставки 2, а занято 4.
					СтрокаДанных.Ставка = 			СтрокаСотрудника.КоличествоСтавок; //занимаемая ставка сотрудником (далее уточняется)
					СтрокаДанных.СуммаОклада = 		СтрокаСотрудника.СотрудникОкладТарифСотрудника;
					СтрокаДанных.СуммаОкладаПоШР = 	СтрокаСотрудника.ПозицияШтатногоРасписания.ОкладТариф;
					СтрокаДанных.СуммаВсего = 		0;
					СтрокаДанных.СуммаФОТ = 		СтрокаСотрудника.СотрудникФОТСотрудника;
					СтрокаДанных.Сотрудник = 		СтрокаСотрудника.Сотрудник;
					СтрокаДанных.Категория = 		СтрокаДанных.Должность.АФМ_КатегорияСтатистическогоУчета;
					СтрокаДанных.ВОтпуске = 		Ложь;
					СтрокаДанных.ВОтпускеТекст = 	"";
					
					//уровни функциональных блоков
					ОпределитьУровниГруппировок(СтрокаДанных);
					
					//пустые значения
					СтрокаДанных.ФИО = 				"";
					СтрокаДанных.Премия0Процент = 	0;
					СтрокаДанных.Премия0Сумма = 	0;
					СтрокаДанных.Премия1Считать = 	Ложь;
					СтрокаДанных.Премия1Процент = 	0;
					СтрокаДанных.Премия1Сумма = 	0;
					СтрокаДанных.Премия2Процент = 	0;
					СтрокаДанных.Премия2Сумма = 	0;
					СтрокаДанных.Премия3Процент = 	0;
					СтрокаДанных.Премия3Сумма = 	0;
					СтрокаДанных.Премия4Процент = 	0;
					СтрокаДанных.Премия4Сумма = 	0;
					СтрокаДанных.Премия5Процент = 	0;
					СтрокаДанных.Премия5Сумма = 	0;
					СтрокаДанных.СуммаИтого = 		0;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	МассивОрганизаций = Новый Массив;
	МассивГоловныхОрганизаций = Новый Массив;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если МассивОрганизаций.Найти(СтрокаДанных.Организация) = Неопределено Тогда
			МассивОрганизаций.Добавить(СтрокаДанных.Организация);
			МассивГоловныхОрганизаций.Добавить(РегламентированнаяОтчетность.ГоловнаяОрганизация(СтрокаДанных.Организация));
		КонецЕсли;
	КонецЦикла;
		
	//дополним - ФИО
	ТаблицаФизЛиц = Новый ТаблицаЗначений;
	ТаблицаФизЛиц.Колонки.Добавить("ФизическоеЛицо");
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		НовоеФизЛицо = ТаблицаФизЛиц.Добавить();
		НовоеФизЛицо.ФизическоеЛицо = СтрокаДанных.Сотрудник.ФизическоеЛицо;
	КонецЦикла;
	
	ТаблицаФизЛиц.Свернуть("ФизическоеЛицо");
	
	ФИОФизЛиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаОтчета, ТаблицаФизЛиц.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		ФИОФизЛица = ФИОФизЛиц[СтрокаДанных.Сотрудник.ФизическоеЛицо];
		Если НЕ ФИОФизЛица = Неопределено Тогда
			СтрокаДанных.ФИО = ФИОФизЛица.Фамилия + " " + ФИОФизЛица.Имя + " " + ФИОФизЛица.Отчество;
		КонецЕсли;
	КонецЦикла;
	
	//дополним - Проекты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОтчета", 				НачалоДня(ДатаОтчета));
	Запрос.УстановитьПараметр("МассивСотрудников", 			ТаблицаДанных.ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("МассивОрганизаций", 			МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивГоловныхОрганизаций", 	МассивГоловныхОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставГруппСотрудников.Сотрудник,
	|	СоставГруппСотрудников.ГруппаСотрудников КАК Проект
	|ИЗ
	|	РегистрСведений.СоставГруппСотрудников КАК СоставГруппСотрудников
	|ГДЕ
	|	СоставГруппСотрудников.Сотрудник В (&МассивСотрудников)";
	
	ТаблицаПроектов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПроекта Из ТаблицаПроектов Цикл
		
		Если СтрНайти(СокрЛП(СтрокаПроекта.Проект), "_Общий список") > 0
			ИЛИ СтрНайти(СокрЛП(СтрокаПроекта.Проект),"Уволен") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Сотрудник");
		СтруктураПоиска.Сотрудник = СтрокаПроекта.Сотрудник;
		СтрокаДанных = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокаДанных.Количество() > 0 Тогда
			СтрокаДанных[0].Проект = СокрЛП(СтрокаПроекта.Проект);
		КонецЕсли;
		
	КонецЦикла;
	
	//дополним исходную таблицу - премиями
	МассивВыплатаПоРКиСН = СостояниеШтатногоРасписания_ШтатнаяРасстановка_СформироватьМассивНастроек(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ШтатнаяРасстановкаКолонкаВыплатаПоРКиСН, 1);
	МассивВыплатаПоРН = СостояниеШтатногоРасписания_ШтатнаяРасстановка_СформироватьМассивНастроек(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ШтатнаяРасстановкаКолонкаВыплатаПоРН, 1);
	МассивКвартальнаяПремия = СостояниеШтатногоРасписания_ШтатнаяРасстановка_СформироватьМассивНастроек(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ШтатнаяРасстановкаКолонкаКвартальнаяПремия, 1);
	МассивПремияЗаМесяц = СостояниеШтатногоРасписания_ШтатнаяРасстановка_СформироватьМассивНастроек(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ШтатнаяРасстановкаКолонкаПремияЗаМесяц, 1);
	МассивНадбавкаЗаВыслугуЛет = СостояниеШтатногоРасписания_ШтатнаяРасстановка_СформироватьМассивНастроек(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ШтатнаяРасстановкаКолонкаНадбавкаЗаВыслугуЛет, 2);
	МассивПерсональнаяНадбавка = СостояниеШтатногоРасписания_ШтатнаяРасстановка_СформироватьМассивНастроек(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ШтатнаяРасстановкаКолонкаПерсональнаяНадбавка, 1);
	
	СостояниеШтатногоРасписания_ШтатнаяРасстановка_РасчетПремий(ТаблицаДанных, ДатаОтчета,
		МассивВыплатаПоРКиСН, МассивВыплатаПоРН, МассивКвартальнаяПремия, МассивПремияЗаМесяц, МассивНадбавкаЗаВыслугуЛет, МассивПерсональнаяНадбавка);	
	
	//уточним ставку (ставка из типового отчета не подходит)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
	|	ВЫБОР
	|		КОГДА ЗанятыеПозицииШтатногоРасписания.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ЗанятыеПозицииШтатногоРасписания.УсловноеДвижение = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА ЗанятыеПозицииШтатногоРасписания.ДатаОтменыУсловногоДвижения <= &ДатаОтчета
	|						ТОГДА ЗанятыеПозицииШтатногоРасписания.УсловноеКоличествоСтавок
	|					ИНАЧЕ ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок
	|				КОНЕЦ
	|		ИНАЧЕ ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок
	|	КОНЕЦ КАК ЗанятыеПозиции,
	|	ЗанятыеПозицииШтатногоРасписания.Сотрудник
	|ПОМЕСТИТЬ ВТВыборка
	|ИЗ
	|	РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
	|ГДЕ
	|	ЗанятыеПозицииШтатногоРасписания.Активность = ИСТИНА
	|	И ЗанятыеПозицииШтатногоРасписания.Период <= &ДатаОтчета
	|	И ЗанятыеПозицииШтатногоРасписания.Сотрудник В(&МассивСотрудников)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыборка.ПозицияШтатногоРасписания,
	|	ВТВыборка.Сотрудник,
	|	СУММА(ВТВыборка.ЗанятыеПозиции) КАК ЗанятыеПозиции
	|ИЗ
	|	ВТВыборка КАК ВТВыборка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыборка.Сотрудник,
	|	ВТВыборка.ПозицияШтатногоРасписания";
	
	НовыеСтавки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		//ошибка в 1С: возникает ситуация по задвоению позиций штатных расписаний, когда сотрудник
		//	уходит в декрет, но потом делается кадровый перевод, таким образом по одной штатной позиции будет минусовой остаток,
		//	по другой (на ту которую перевелся) плюс. НО - сотрудник же в декрете, у него нет занимаемых ставок.
		//	Поэтому ставка собирается по сотруднику вцелом, а не по позиции.
		
		СтруктураПоиска = Новый Структура("Сотрудник");
		СтруктураПоиска.Сотрудник = СтрокаДанных.Сотрудник;
		СтрокиОстатковСтавок = НовыеСтавки.НайтиСтроки(СтруктураПоиска);
		
		СтавкаШРОбщийОстаток = 0;
		Для Каждого СтрокаШР Из СтрокиОстатковСтавок Цикл
			СтавкаШРОбщийОстаток = СтавкаШРОбщийОстаток + СтрокаШР.ЗанятыеПозиции;
		КонецЦикла;
		Если СтавкаШРОбщийОстаток > 1 Тогда
			СтавкаШРОбщийОстаток = 1;
		КонецЕсли;
		Если СтавкаШРОбщийОстаток < 0 Тогда
			СтавкаШРОбщийОстаток = 0;
		КонецЕсли;
		СтрокаДанных.Ставка = СтавкаШРОбщийОстаток;
		
	КонецЦикла;
	
	//распределим кол-во штатных единиц из штатного расписания
	ТаблицаСтавок.Свернуть("Организация, ПозицияШтатногоРасписания, КолвоЕдениц, Остаток");
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Если СтрокаДанных.Ставка = 0 Тогда
			//занимаемая ставка нулевая, значит по ним не распределяем штатные позиции
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Организация, ПозицияШтатногоРасписания");
		СтруктураПоиска.Организация = СтрокаДанных.Организация;
		СтруктураПоиска.ПозицияШтатногоРасписания = СтрокаДанных.ПозицияШтатногоРасписания;
		НайденныеСтавки = ТаблицаСтавок.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтавки.Количество() > 0 Тогда
			
			РаспределеннаяЕденица = 1;
			ДробныйОстаток = Ложь;
			Если НЕ (НайденныеСтавки[0].Остаток - Цел(НайденныеСтавки[0].Остаток)) = 0 И НЕ НайденныеСтавки[0].Остаток = 0 Тогда
				//дробный остаток ставки
				ДробныйОстаток = Истина;
			КонецЕсли;
			Если ДробныйОстаток = Истина Тогда
				РаспределеннаяЕденица = СтрокаДанных.Ставка;
			КонецЕсли;
			
			НайденныеСтавки[0].Остаток = НайденныеСтавки[0].Остаток - РаспределеннаяЕденица;
			Если НайденныеСтавки[0].Остаток >= 0 Тогда
				СтрокаДанных.КолвоЕдениц = РаспределеннаяЕденица;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Прочитаем данные по отпускам (Отпуск по уходу за ребенком, отпуск по беременности и родам)
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	СостоянияСотрудниковСрезПоследних.Состояние,
	|	СостоянияСотрудниковСрезПоследних.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудниковСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СостоянияСотрудниковСрезПоследних.ОкончаниеПредположительно
	|		ИНАЧЕ СостоянияСотрудниковСрезПоследних.ДействуетДо
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.СостоянияСотрудников.СрезПоследних(&ДатаОтчета, ) КАК СостоянияСотрудниковСрезПоследних
	|ГДЕ
	|	(СостоянияСотрудниковСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком)
	|			ИЛИ СостоянияСотрудниковСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам))";
	
	СостоянияОтпусков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СостояниеСотрудника Из СостоянияОтпусков Цикл
		
		СтруктураПоиска = Новый Структура("Сотрудник");
		СтруктураПоиска.Сотрудник = СостояниеСотрудника.Сотрудник;
		СтрокаДанных = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокаДанных.Количество() > 0 Тогда
			
			ВОтпускеТекст = "Отпуск";
			Если СостояниеСотрудника.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком Тогда
				ВОтпускеТекст = "Отпуск по уходу за ребенком";
			ИначеЕсли СостояниеСотрудника.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам Тогда
				ВОтпускеТекст = "Отпуск по беременности и родам";
			КонецЕсли;
			ВОтпускеТекст = ВОтпускеТекст + " c " + Формат(СостояниеСотрудника.ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(СостояниеСотрудника.ДатаОкончания,"ДФ=dd.MM.yyyy");
			
			СтрокаДанных[0].ВОтпуске = Истина;
			СтрокаДанных[0].ВОтпускеТекст = ВОтпускеТекст;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//выведем период персональной надбавки
	МассивСотрудниковСНадбавкой = Новый Массив;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если СтрокаДанных.Премия0Процент >0 Тогда
			МассивСотрудниковСНадбавкой.Добавить(СтрокаДанных.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивСотрудниковСНадбавкой", 	МассивСотрудниковСНадбавкой);
	Запрос.УстановитьПараметр("МассивПерсональнаяНадбавка", 	МассивПерсональнаяНадбавка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияПоказатели.Ссылка КАК ВидРасчета
	|ПОМЕСТИТЬ ВТВидыРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|ГДЕ
	|	НачисленияПоказатели.Показатель В(&МассивПерсональнаяНадбавка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
	|	ПлановыеНачисленияСрезПоследних.Начисление,
	|	ПлановыеНачисленияСрезПоследних.Период КАК ПериодНачало,
	|	ПлановыеНачисленияСрезПоследних.ДействуетДо КАК ПериодКонец
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления.СрезПоследних(
	|			&ДатаОтчета,
	|			Сотрудник В (&МассивСотрудниковСНадбавкой)
	|				И Начисление В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТВидыРасчета.ВидРасчета
	|					ИЗ
	|						ВТВидыРасчета)) КАК ПлановыеНачисленияСрезПоследних
	|ГДЕ
	|	(ПлановыеНачисленияСрезПоследних.ДействуетДо > &ДатаОтчета
	|			ИЛИ ПлановыеНачисленияСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	И ПлановыеНачисленияСрезПоследних.Используется = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	ПериодНадбавки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПериода Из ПериодНадбавки Цикл
		
		СтруктураПоиска = Новый Структура("Сотрудник");
		СтруктураПоиска.Сотрудник = СтрокаПериода.Сотрудник;
		СтрокаДанных = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокаДанных.Количество() > 0 Тогда
			
			ВОтпускеТекст = СокрЛП(СтрокаДанных[0].ВОтпускеТекст);
			Если НЕ ВОтпускеТекст = "" Тогда
				ВОтпускеТекст = ВОтпускеТекст + Символы.ПС;
			КонецЕсли;
			ВОтпускеТекст = ВОтпускеТекст + СокрЛП(СтрокаПериода.Начисление) + " (с " + Формат(СтрокаПериода.ПериодНачало, "ДФ=dd.MM.yyyy");
			ВОтпускеТекст = ВОтпускеТекст + ?(СтрокаПериода.ПериодКонец = Дата(1,1,1), "", " по " + Формат(СтрокаПериода.ПериодКонец, "ДФ=dd.MM.yyyy"));
			ВОтпускеТекст = ВОтпускеТекст + ")";
			
			СтрокаДанных[0].ВОтпускеТекст = ВОтпускеТекст;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//вывод данных по срочным трудовым договрам
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияКонтрактаДоговораСотрудникаСрезПоследних.Сотрудник,
	|	СведенияКонтрактаДоговораСотрудникаСрезПоследних.ДатаОкончания
	|ИЗ
	|	РегистрСведений.СведенияКонтрактаДоговораСотрудника.СрезПоследних(&ДатаОтчета, Сотрудник В (&МассивСотрудников)) КАК СведенияКонтрактаДоговораСотрудникаСрезПоследних
	|ГДЕ
	|	СведенияКонтрактаДоговораСотрудникаСрезПоследних.СрочныйДоговор = ИСТИНА";
	
	ДанныеСрочныхТД = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СрочныйТД Из ДанныеСрочныхТД Цикл
		
		СтруктураПоиска = Новый Структура("Сотрудник");
		СтруктураПоиска.Сотрудник = СрочныйТД.Сотрудник;
		СтрокаДанных = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокаДанных.Количество() > 0 Тогда
			
			ВОтпускеТекст = СокрЛП(СтрокаДанных[0].ВОтпускеТекст);
			Если НЕ ВОтпускеТекст = "" Тогда
				ВОтпускеТекст = ВОтпускеТекст + Символы.ПС;
			КонецЕсли;
			ВОтпускеТекст = ВОтпускеТекст + "Срочный ТД до ";
			ВОтпускеТекст = ВОтпускеТекст + ?(СрочныйТД.ДатаОкончания = Дата(1,1,1), "___.___.______", Формат(СрочныйТД.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			
			СтрокаДанных[0].ВОтпускеТекст = ВОтпускеТекст;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//совмещение, собирается по:
	//	Документ.Совмещение (редко вводят)
	//	регистру сведений "КадроваяИсторияСотрудников" (только перемещение)
	//	регистру сведений "ОсновныеДанныеКонтрактаДоговораСотрудника" (только прием)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК ВидРасчета
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
	|	ПлановыеНачисленияСрезПоследних.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТСовмещение
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления.СрезПоследних(
	|			&ДатаОтчета,
	|			Сотрудник В (&МассивСотрудников)
	|				И Начисление В
	|					(ВЫБРАТЬ
	|						ВТНачисления.ВидРасчета
	|					ИЗ
	|						ВТНачисления)) КАК ПлановыеНачисленияСрезПоследних
	|ГДЕ
	|	(ПлановыеНачисленияСрезПоследних.ДействуетДо > &ДатаОтчета
	|			ИЛИ ПлановыеНачисленияСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	И ПлановыеНачисленияСрезПоследних.Используется = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК ВидСовмещения,
	|	Совмещение.СовмещающийСотрудник КАК Сотрудник,
	|	Совмещение.ОтсутствующийСотрудник КАК ОтсутствующийСотрудник,
	|	Совмещение.ПричинаСовмещения КАК ПричинаСовмещения
	|ПОМЕСТИТЬ ВТСовмещение1
	|ИЗ
	|	Документ.Совмещение КАК Совмещение
	|ГДЕ
	|	Совмещение.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТСовмещение.ДокументОснование
	|			ИЗ
	|				ВТСовмещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	2 КАК ВидСовмещения,
	|	ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних.Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ОтсутствующийСотрудник,
	|	ВЫРАЗИТЬ(ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних.Регистратор.ИныеУсловияДоговора КАК СТРОКА(150)) КАК ПричинаСовмещения
	|ПОМЕСТИТЬ ВТСовмещение2
	|ИЗ
	|	РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника.СрезПоследних(&ДатаОтчета, Сотрудник В (&МассивСотрудников)) КАК ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних
	|ГДЕ
	|	ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних.Регистратор ССЫЛКА Документ.ПриемНаРаботу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	2 КАК ВидСовмещения,
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ОтсутствующийСотрудник,
	|	КадроваяИсторияСотрудниковСрезПоследних.Регистратор.АФМ_ИныеУсловияДоговора КАК ПричинаСовмещения
	|ПОМЕСТИТЬ ВТСовмещение3
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&ДатаОтчета, Сотрудник В (&МассивСотрудников)) КАК КадроваяИсторияСотрудниковСрезПоследних
	|ГДЕ
	|	КадроваяИсторияСотрудниковСрезПоследних.Регистратор ССЫЛКА Документ.КадровыйПеревод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСовмещение1.ВидСовмещения,
	|	ВТСовмещение1.Сотрудник,
	|	ВТСовмещение1.ОтсутствующийСотрудник,
	|	ВТСовмещение1.ПричинаСовмещения
	|ИЗ
	|	ВТСовмещение1 КАК ВТСовмещение1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСовмещение2.ВидСовмещения,
	|	ВТСовмещение2.Сотрудник,
	|	ВТСовмещение2.ОтсутствующийСотрудник,
	|	ВТСовмещение2.ПричинаСовмещения
	|ИЗ
	|	ВТСовмещение2 КАК ВТСовмещение2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСовмещение3.ВидСовмещения,
	|	ВТСовмещение3.Сотрудник,
	|	ВТСовмещение3.ОтсутствующийСотрудник,
	|	ВТСовмещение3.ПричинаСовмещения
	|ИЗ
	|	ВТСовмещение3 КАК ВТСовмещение3";
	
	ДанныеСовмещений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Совмещение Из ДанныеСовмещений Цикл
		
		Если НЕ СокрЛП(Совмещение.ПричинаСовмещения) = "" Тогда
			
			СтруктураПоиска = Новый Структура("Сотрудник");
			СтруктураПоиска.Сотрудник = Совмещение.Сотрудник;
			СтрокаДанных = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокаДанных.Количество() > 0 Тогда
				
				ВОтпускеТекст = СокрЛП(СтрокаДанных[0].ВОтпускеТекст);
				Если НЕ ВОтпускеТекст = "" Тогда
					ВОтпускеТекст = ВОтпускеТекст + Символы.ПС;
				КонецЕсли;
				
				Если Совмещение.ВидСовмещения = 1 Тогда
					ВОтпускеТекст = ВОтпускеТекст + СокрЛП(Совмещение.ПричинаСовмещения) + " ";
					ВОтпускеТекст = ВОтпускеТекст + СокрЛП(Совмещение.ОтсутствующийСотрудник.ФизическоеЛицо);
				ИначеЕсли Совмещение.ВидСовмещения = 2 Тогда
					ВОтпускеТекст = ВОтпускеТекст + СокрЛП(Совмещение.ПричинаСовмещения);
				КонецЕсли;
				
				СтрокаДанных[0].ВОтпускеТекст = ВОтпускеТекст;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//добавим вакансии
	Если ВыводитьВакансии = Истина Тогда
		СостояниеШтатногоРасписания_ШтатнаяРасстановка_ДополнитьРасчетВакансиями(ТаблицаДанных, ТаблицаСтавок, ДатаОтчета, МассивВыплатаПоРН, МассивКвартальнаяПремия, МассивПремияЗаМесяц);
	КонецЕсли;
	
	//удалим временно неработающих
	Если ВременноНеРаботающие = Ложь Тогда
		
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			Если СтрокаДанных.ВОтпуске = Истина Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаДанных);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			ТаблицаДанных.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	//добавим ВНЕ штатного расписания (сокращенные позиции штатного расписания, но на них числятся сотрудники)
	Если ВыводитьВнеШтатногоРасписания = Истина Тогда
		СостояниеШтатногоРасписания_ШтатнаяРасстановка_ДополнитьВнеШтатногоРасписания(ТаблицаДанных, Запрос, ДатаОтчета, МассивВыплатаПоРКиСН, МассивВыплатаПоРН, МассивКвартальнаяПремия, МассивПремияЗаМесяц, МассивНадбавкаЗаВыслугуЛет);
	КонецЕсли;
	
	//посчитаем итоговые суммы
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Если СтрокаДанных.ВОтпуске = Истина Тогда
			
			СтрокаДанных.Премия0Сумма = 0;
			СтрокаДанных.Премия1Сумма = 0;
			СтрокаДанных.Премия2Сумма = 0;
			СтрокаДанных.Премия3Сумма = 0;
			СтрокаДанных.Премия4Сумма = 0;
			СтрокаДанных.Премия5Сумма = 0;
			
		Иначе 
		
			СтавкаПоПозиции = СтрокаДанных.Ставка;
			Если СтавкаПоПозиции = 0 Тогда
				//значит вакансия, но расчет нужен
				Если СтрокаДанных.КолвоЕдениц > 0 Тогда
					СтавкаПоПозиции = СтрокаДанных.КолвоЕдениц;
				Иначе
					СтавкаПоПозиции = 1;
				Конецесли
			КонецЕсли;
			
			СтрокаДанных.Премия0Сумма = Окр(СтрокаДанных.СуммаОклада * СтрокаДанных.Премия0Процент * СтавкаПоПозиции / 100, 2);
			СтрокаДанных.СуммаВсего = Окр((СтрокаДанных.СуммаОклада + СтрокаДанных.Премия0Сумма) * СтавкаПоПозиции, 2);
			
			СтрокаДанных.Премия1Сумма = Окр(СтрокаДанных.СуммаОклада * СтрокаДанных.Премия1Процент / 100, 2);
			СтрокаДанных.Премия2Сумма = Окр(СтрокаДанных.СуммаВсего * СтрокаДанных.Премия2Процент / 100, 2);
			СтрокаДанных.Премия3Сумма = Окр(СтрокаДанных.СуммаВсего * СтрокаДанных.Премия3Процент / 100, 2);
			СтрокаДанных.Премия5Сумма = Окр((СтрокаДанных.СуммаВсего + СтрокаДанных.Премия1Сумма + СтрокаДанных.Премия2Сумма + СтрокаДанных.Премия3Сумма) * СтрокаДанных.Премия5Процент / 100, 2);
			
			Премия4СуммаБаза = СтрокаДанных.СуммаВсего + СтрокаДанных.Премия1Сумма + СтрокаДанных.Премия2Сумма + СтрокаДанных.Премия3Сумма + СтрокаДанных.Премия5Сумма;
			СтрокаДанных.Премия4Сумма = Окр(Премия4СуммаБаза * СтрокаДанных.Премия4Процент / 100, 2);
			
		КонецЕсли;
		
		СуммаИтого = СтрокаДанных.СуммаВсего + СтрокаДанных.Премия1Сумма + СтрокаДанных.Премия2Сумма + СтрокаДанных.Премия3Сумма + СтрокаДанных.Премия4Сумма + СтрокаДанных.Премия5Сумма;
		СтрокаДанных.СуммаИтого = СуммаИтого;
		
	КонецЦикла;
	
	//сортировки
	ТаблицаДанных.Сортировать("Организация, Уровень1Код, Уровень2Код, ПодразделениеКод, ПорядокПозиции, ДолжностьКод, ФИО");
	
	//удалим префиксы и нули у кодов подразделений (только после сортировки, иначе собьется порядок)
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		ПодразделениеКодНовый = "";
		АнализироватьСимволы = Истина;
		ПодразделениеКод = СокрЛП(СтрокаДанных.ПодразделениеКод);
		КолвоСимволов = СтрДлина(ПодразделениеКод);
		Для НомерСимвола = 1 По КолвоСимволов Цикл
			
			ПодразделениеКодСимвол = Сред(ПодразделениеКод, НомерСимвола, 1);
			
			Если АнализироватьСимволы = Истина Тогда
				Попытка
					ПодразделениеКодЧисло = Число(ПодразделениеКодСимвол);
				Исключение
					ПодразделениеКодЧисло = 0;
				КонецПопытки;
				Если ПодразделениеКодЧисло > 0 Тогда
					АнализироватьСимволы = Ложь;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ПодразделениеКодНовый = ПодразделениеКодНовый + ПодразделениеКодСимвол;
			
		КонецЦикла;
		
		СтрокаДанных.ПодразделениеКод = ПодразделениеКодНовый;
		
	КонецЦикла;
	
	//завершение
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_РасчетПремий(ТаблицаДанных, ДатаОтчета,
	МассивВыплатаПоРКиСН, МассивВыплатаПоРН, МассивКвартальнаяПремия, МассивПремияЗаМесяц, МассивНадбавкаЗаВыслугуЛет, МассивПерсональнаяНадбавка) Экспорт
	
	//справочно: запускается из других отчетов
	
	//параметры
	МассивПоказателей = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПоказателей, МассивВыплатаПоРКиСН);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПоказателей, МассивВыплатаПоРН);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПоказателей, МассивКвартальнаяПремия);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПоказателей, МассивПремияЗаМесяц);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПоказателей, МассивПерсональнаяНадбавка);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ЗапросПремии = Новый Запрос;
	ЗапросПремии.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросПремии.УстановитьПараметр("ДатаОтчета", 					НачалоДня(ДатаОтчета));
	ЗапросПремии.УстановитьПараметр("МассивСотрудников", 			ТаблицаДанных.ВыгрузитьКолонку("Сотрудник"));
	ЗапросПремии.УстановитьПараметр("МассивПоказателей", 			МассивПоказателей);
	ЗапросПремии.УстановитьПараметр("МассивВыплатаПоРКиСН", 		МассивВыплатаПоРКиСН);
	ЗапросПремии.УстановитьПараметр("МассивВыплатаПоРН", 			МассивВыплатаПоРН);
	ЗапросПремии.УстановитьПараметр("МассивКвартальнаяПремия", 		МассивКвартальнаяПремия);
	ЗапросПремии.УстановитьПараметр("МассивПремияЗаМесяц", 			МассивПремияЗаМесяц);
	ЗапросПремии.УстановитьПараметр("МассивНадбавкаЗаВыслугуЛет", 	МассивНадбавкаЗаВыслугуЛет);
	ЗапросПремии.УстановитьПараметр("МассивПерсональнаяНадбавка", 	МассивПерсональнаяНадбавка);
	
	//общий расчет
	
	//--> Дебов Игорь 28.06.2016 - 29.06.2016
	ЗапросПремии.Текст =
	"ВЫБРАТЬ
	|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
	|	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление,
	|	ПлановыеНачисленияСрезПоследних.ДокументОснование КАК ДокументОснование,
	|	ПлановыеНачисленияСрезПоследних.ГоловнаяОрганизация КАК Организация
	|ПОМЕСТИТЬ ВТПлановыеНачисления
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления.СрезПоследних(&ДатаОтчета, Сотрудник В (&МассивСотрудников)) КАК ПлановыеНачисленияСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеНачисленияСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИЛИ ПлановыеНачисленияСрезПоследних.ДействуетДо > &ДатаОтчета
	|				ТОГДА ПлановыеНачисленияСрезПоследних.Используется
	|			ИНАЧЕ ПлановыеНачисленияСрезПоследних.ИспользуетсяПоОкончании
	|		КОНЕЦ = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоказатели.Ссылка КАК Начисление,
	|	НачисленияПоказатели.Показатель КАК Показатель,
	|	ИСТИНА КАК НаличиеПоказателя
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|ГДЕ
	|	НачисленияПоказатели.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТПлановыеНачисления.Начисление
	|			ИЗ
	|				ВТПлановыеНачисления)
	|	И (НачисленияПоказатели.Показатель В (&МассивПоказателей)
	|			ИЛИ НачисленияПоказатели.Ссылка В (&МассивНадбавкаЗаВыслугуЛет)
	|				И НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПлановыеНачисления.Сотрудник КАК Сотрудник,
	|	ВТПлановыеНачисления.Начисление КАК Начисление,
	|	ВТПлановыеНачисления.ДокументОснование КАК ДокументОснование,
	|	ВТПлановыеНачисления.Организация КАК Организация,
	|	ВТПоказатели.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТДействующиеНачисления
	|ИЗ
	|	ВТПлановыеНачисления КАК ВТПлановыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ВТПоказатели
	|		ПО ВТПлановыеНачисления.Начисление = ВТПоказатели.Начисление
	|ГДЕ
	|	ЕСТЬNULL(ВТПоказатели.НаличиеПоказателя, ЛОЖЬ) = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДействующиеНачисления.Сотрудник,
	|	ВТДействующиеНачисления.Начисление,
	|	ВТДействующиеНачисления.ДокументОснование,
	|	ВТДействующиеНачисления.Организация,
	|	ВТДействующиеНачисления.Показатель,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение
	|ПОМЕСТИТЬ ВТДействующиеНачисленияСПодразделением
	|ИЗ
	|	ВТДействующиеНачисления КАК ВТДействующиеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|				&ДатаОтчета,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТДействующиеНачисления.Сотрудник
	|					ИЗ
	|						ВТДействующиеНачисления
	|					ГДЕ
	|						ВТДействующиеНачисления.Показатель.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения))) КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ПО ВТДействующиеНачисления.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	|ГДЕ
	|	ВТДействующиеНачисления.Показатель.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПоказателейСрезПоследних.Сотрудник КАК Сотрудник,
	|	ЗначенияПоказателейСрезПоследних.Организация КАК Организация,
	|	ЗначенияПоказателейСрезПоследних.Показатель КАК Показатель,
	|	ЗначенияПоказателейСрезПоследних.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ ЗначенияПоказателейСрезПоследних.ДействуетДо > &ДатаОтчета
	|			ТОГДА ЗначенияПоказателейСрезПоследних.Значение
	|		ИНАЧЕ ЗначенияПоказателейСрезПоследних.ЗначениеПоОкончании
	|	КОНЕЦ КАК ЗначениеРасчет
	|ПОМЕСТИТЬ ВТЗначенияПоказателей
	|ИЗ
	|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних(
	|			&ДатаОтчета,
	|			Сотрудник В (&МассивСотрудников)
	|				И (Показатель В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ВТДействующиеНачисления.Показатель
	|						ИЗ
	|							ВТДействующиеНачисления
	|						ГДЕ
	|							ВТДействующиеНачисления.Показатель.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника))
	|					ИЛИ Показатель В (&МассивКвартальнаяПремия))) КАК ЗначенияПоказателейСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних(
	|				&ДатаОтчета,
	|				Показатель В (&МассивКвартальнаяПремия)
	|					И Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ВТДействующиеНачисления.Сотрудник
	|						ИЗ
	|							ВТДействующиеНачисления)) КАК ПрименениеДополнительныхПоказателейСрезПоследних
	|		ПО ЗначенияПоказателейСрезПоследних.Организация = ПрименениеДополнительныхПоказателейСрезПоследних.Организация
	|			И ЗначенияПоказателейСрезПоследних.Сотрудник = ПрименениеДополнительныхПоказателейСрезПоследних.Сотрудник
	|			И ЗначенияПоказателейСрезПоследних.Показатель = ПрименениеДополнительныхПоказателейСрезПоследних.Показатель
	|ГДЕ
	|	ЕСТЬNULL(ПрименениеДополнительныхПоказателейСрезПоследних.Применение, ИСТИНА) = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДействующиеНачисленияСПодразделением.Сотрудник,
	|	ВТДействующиеНачисленияСПодразделением.Организация,
	|	ВТДействующиеНачисленияСПодразделением.Показатель,
	|	ВТДействующиеНачисленияСПодразделением.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.ДействуетДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.ДействуетДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) > &ДатаОтчета
	|			ТОГДА ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.Значение, 0)
	|		ИНАЧЕ ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.ЗначениеПоОкончании, 0)
	|	КОНЕЦ
	|ИЗ
	|	ВТДействующиеНачисленияСПодразделением КАК ВТДействующиеНачисленияСПодразделением
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений.СрезПоследних(&ДатаОтчета, ) КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних
	|		ПО ВТДействующиеНачисленияСПодразделением.Подразделение = ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.Подразделение
	|			И ВТДействующиеНачисленияСПодразделением.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.Показатель
	|ГДЕ
	|	НЕ ВТДействующиеНачисленияСПодразделением.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДействующиеНачисления.Сотрудник КАК Сотрудник,
	|	ВТДействующиеНачисления.Начисление КАК Начисление,
	|	ВТДействующиеНачисления.ДокументОснование КАК ДокументОснование,
	|	ВТДействующиеНачисления.Организация КАК Организация,
	|	ВТДействующиеНачисления.Показатель КАК Показатель,
	|	ЕСТЬNULL(ВТЗначенияПоказателей.ЗначениеРасчет, 0) КАК Значение
	|ПОМЕСТИТЬ ВТОбщая
	|ИЗ
	|	ВТДействующиеНачисления КАК ВТДействующиеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ВТЗначенияПоказателей
	|		ПО ВТДействующиеНачисления.Сотрудник = ВТЗначенияПоказателей.Сотрудник
	|			И ВТДействующиеНачисления.Организация = ВТЗначенияПоказателей.Организация
	|			И ВТДействующиеНачисления.Показатель = ВТЗначенияПоказателей.Показатель
	|			И ВТДействующиеНачисления.ДокументОснование = ВТЗначенияПоказателей.ДокументОснование
	|ГДЕ
	|	НЕ ВТДействующиеНачисления.Показатель В (&МассивКвартальнаяПремия)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТЗначенияПоказателей.Сотрудник,
	|	НЕОПРЕДЕЛЕНО,
	|	ВТЗначенияПоказателей.ДокументОснование,
	|	ВТЗначенияПоказателей.Организация,
	|	ВТЗначенияПоказателей.Показатель,
	|	ВТЗначенияПоказателей.ЗначениеРасчет
	|ИЗ
	|	ВТЗначенияПоказателей КАК ВТЗначенияПоказателей
	|ГДЕ
	|	ВТЗначенияПоказателей.Показатель В(&МассивКвартальнаяПремия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДатаОтчета КАК Период,
	|	ВТОбщая.Организация,
	|	ВТОбщая.Сотрудник,
	|	ВЫБОР
	|		КОГДА ВТОбщая.Начисление В (&МассивНадбавкаЗаВыслугуЛет)
	|			ТОГДА ВТОбщая.Начисление
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Начисление,
	|	ВЫБОР
	|		КОГДА ВТОбщая.Начисление В (&МассивНадбавкаЗаВыслугуЛет)
	|			ТОГДА ВТОбщая.Показатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Показатель,
	|	ВЫБОР
	|		КОГДА ВТОбщая.Показатель В (&МассивВыплатаПоРКиСН)
	|			ТОГДА ВТОбщая.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыплатаПоРКиСН,
	|	ВЫБОР
	|		КОГДА ВТОбщая.Показатель В (&МассивВыплатаПоРН)
	|			ТОГДА ВТОбщая.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыплатаПоРН,
	|	ВЫБОР
	|		КОГДА ВТОбщая.Показатель В (&МассивКвартальнаяПремия)
	|			ТОГДА ВТОбщая.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КвартальнаяПремия,
	|	ВЫБОР
	|		КОГДА ВТОбщая.Показатель В (&МассивПремияЗаМесяц)
	|			ТОГДА ВТОбщая.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПремияЗаМесяц,
	|	ВЫБОР
	|		КОГДА ВТОбщая.Показатель В (&МассивПерсональнаяНадбавка)
	|			ТОГДА ВТОбщая.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПерсональнаяНадбавка,
	|	ВЫБОР
	|		КОГДА ВТОбщая.Начисление В (&МассивНадбавкаЗаВыслугуЛет)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьВыслугаЛет
	|ПОМЕСТИТЬ ВТДелениеПоКолонкам
	|ИЗ
	|	ВТОбщая КАК ВТОбщая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДелениеПоКолонкам.Период КАК Период,
	|	ВТДелениеПоКолонкам.Организация КАК Организация,
	|	ВТДелениеПоКолонкам.Сотрудник КАК Сотрудник,
	|	СУММА(ВТДелениеПоКолонкам.ВыплатаПоРКиСН) КАК ВыплатаПоРКиСН,
	|	СУММА(ВТДелениеПоКолонкам.ВыплатаПоРН) КАК ВыплатаПоРН,
	|	СУММА(ВТДелениеПоКолонкам.КвартальнаяПремия) КАК КвартальнаяПремия,
	|	СУММА(ВТДелениеПоКолонкам.ПремияЗаМесяц) КАК ПремияЗаМесяц,
	|	СУММА(ВТДелениеПоКолонкам.ПерсональнаяНадбавка) КАК ПерсональнаяНадбавка,
	|	МАКСИМУМ(ВТДелениеПоКолонкам.ЕстьВыслугаЛет) КАК ЕстьВыслугаЛет,
	|	МАКСИМУМ(ВТДелениеПоКолонкам.Начисление) КАК Начисление,
	|	МАКСИМУМ(ВТДелениеПоКолонкам.Показатель) КАК Показатель
	|ПОМЕСТИТЬ ВТПодИтог
	|ИЗ
	|	ВТДелениеПоКолонкам КАК ВТДелениеПоКолонкам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДелениеПоКолонкам.Организация,
	|	ВТДелениеПоКолонкам.Период,
	|	ВТДелениеПоКолонкам.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПлановыеНачисления.Сотрудник КАК Сотрудник,
	|	ВТПлановыеНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСевернаяНадбавкаСотрудники
	|ИЗ
	|	ВТПлановыеНачисления КАК ВТПлановыеНачисления
	|ГДЕ
	|	ВТПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки КАК Процент
	|ПОМЕСТИТЬ ВТСевернаяНадбавка
	|ИЗ
	|	РегистрСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц КАК ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц
	|ГДЕ
	|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки > 0
	|	И ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				ВТСевернаяНадбавкаСотрудники.ФизическоеЛицо
	|			ИЗ
	|				ВТСевернаяНадбавкаСотрудники)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних.ПроцентСевернойНадбавки
	|ИЗ
	|	РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц.СрезПоследних(
	|			&ДатаОтчета,
	|			ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ВТСевернаяНадбавкаСотрудники.ФизическоеЛицо
	|				ИЗ
	|					ВТСевернаяНадбавкаСотрудники)) КАК ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних
	|ГДЕ
	|	ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних.ПроцентСевернойНадбавки > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСевернаяНадбавка.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ВТСевернаяНадбавка.Процент) КАК Процент
	|ПОМЕСТИТЬ ВТСевернаяНадбавкаИтог
	|ИЗ
	|	ВТСевернаяНадбавка КАК ВТСевернаяНадбавка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСевернаяНадбавка.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПодИтог.Период КАК Период,
	|	ВТПодИтог.Организация КАК Организация,
	|	ВТПодИтог.Сотрудник КАК Сотрудник,
	|	ВТПодИтог.ВыплатаПоРКиСН КАК ВыплатаПоРКиСН,
	|	ВТПодИтог.ВыплатаПоРН КАК ВыплатаПоРН,
	|	ВТПодИтог.КвартальнаяПремия КАК КвартальнаяПремия,
	|	ВТПодИтог.ПремияЗаМесяц КАК ПремияЗаМесяц,
	|	ВТПодИтог.ПерсональнаяНадбавка КАК ПерсональнаяНадбавка,
	|	ВТПодИтог.ЕстьВыслугаЛет КАК ЕстьВыслугаЛет,
	|	ВТПодИтог.Начисление КАК Начисление,
	|	ВТПодИтог.Показатель КАК Показатель,
	|	ЕСТЬNULL(ВТСевернаяНадбавкаИтог.Процент, 0) КАК СевернаяНадбавка
	|ПОМЕСТИТЬ ВТИтог
	|ИЗ
	|	ВТПодИтог КАК ВТПодИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСевернаяНадбавкаИтог КАК ВТСевернаяНадбавкаИтог
	|		ПО ВТПодИтог.Сотрудник.ФизическоеЛицо = ВТСевернаяНадбавкаИтог.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДействующиеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДействующиеНачисленияСПодразделением
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗначенияПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОбщая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДелениеПоКолонкам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПодИтог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСевернаяНадбавкаСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСевернаяНадбавка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСевернаяНадбавкаИтог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтог.Период КАК Период,
	|	ВТИтог.Организация КАК Организация,
	|	ВТИтог.Сотрудник КАК Сотрудник,
	|	ВТИтог.ВыплатаПоРКиСН КАК ВыплатаПоРКиСН,
	|	ВТИтог.ВыплатаПоРН КАК ВыплатаПоРН,
	|	ВТИтог.КвартальнаяПремия КАК КвартальнаяПремия,
	|	ВТИтог.ПремияЗаМесяц КАК ПремияЗаМесяц,
	|	ВТИтог.ПерсональнаяНадбавка КАК ПерсональнаяНадбавка,
	|	ВТИтог.ЕстьВыслугаЛет КАК ЕстьВыслугаЛет,
	|	ВТИтог.Начисление КАК Начисление,
	|	ВТИтог.Показатель КАК Показатель,
	|	ВТИтог.СевернаяНадбавка КАК СевернаяНадбавка
	|ИЗ
	|	ВТИтог КАК ВТИтог
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Сотрудник";
	//<-- Дебов Игорь 28.06.2016 - 29.06.2016
	
	ТаблицаПремий = ЗапросПремии.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		СтруктураПоиска = Новый Структура("Организация, Сотрудник");
		СтруктураПоиска.Организация = СтрокаДанных.Организация;
		СтруктураПоиска.Сотрудник = СтрокаДанных.Сотрудник;
		НайденныеПремии = ТаблицаПремий.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеПремии.Количество() > 0 Тогда
			
			Премия4Процент = НайденныеПремии[0].ВыплатаПоРКиСН;
			Если Премия4Процент > 0 И Премия4Процент < 5 Тогда
				Премия4Процент = (НайденныеПремии[0].ВыплатаПоРКиСН - 1) * 100; //задается 1.15 это 15%
			КонецЕсли;
			Если НайденныеПремии[0].СевернаяНадбавка > 0 Тогда
				Премия4Процент = Премия4Процент + НайденныеПремии[0].СевернаяНадбавка;
			КонецЕсли;
			СтрокаДанных.Премия4Процент = Премия4Процент;
			
			СтрокаДанных.Премия5Процент = НайденныеПремии[0].ВыплатаПоРН;
			СтрокаДанных.Премия3Процент = НайденныеПремии[0].КвартальнаяПремия;
			СтрокаДанных.Премия2Процент = НайденныеПремии[0].ПремияЗаМесяц;
			СтрокаДанных.Премия1Считать = ?(НайденныеПремии[0].ЕстьВыслугаЛет = 0, Ложь, Истина);
			СтрокаДанных.Премия0Процент = НайденныеПремии[0].ПерсональнаяНадбавка;
		КонецЕсли;
		
	КонецЦикла;
	
	//рассчитаем процент - надбавки за выслугу лет
	ЗапросДополнительный = Новый Запрос;
	ЗапросДополнительный.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросДополнительный.Текст =
	"ВЫБРАТЬ
	|	ВТИтог.Организация,
	|	ВТИтог.Сотрудник,
	|	ВТИтог.Период,
	|	ВТИтог.Начисление КАК НачислениеСтаж
	|ИЗ
	|	ВТИтог КАК ВТИтог
	|ГДЕ
	|	ВТИтог.ЕстьВыслугаЛет > 0";
	СотрудникиДаты = ЗапросДополнительный.Выполнить().Выгрузить();
	
	СтажиСотрудников = КадровыйУчетРасширенный.СведенияОСтажахСотрудников(СотрудникиДаты);
	
	ЗапросДополнительный = Новый Запрос;
	ЗапросДополнительный.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросДополнительный.Текст =
	"ВЫБРАТЬ
	|	ВТИтог.Начисление КАК НачислениеСтаж,
	|	ВТИтог.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТИтог КАК ВТИтог
	|ГДЕ
	|	ВТИтог.ЕстьВыслугаЛет > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИтог.Начисление,
	|	ВТИтог.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка КАК Показатель,
	|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.НомерСтроки,
	|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа КАК ВерхняяГраницаИнтервалаСтажа,
	|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя
	|ПОМЕСТИТЬ ВТГраницы
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
	|ГДЕ
	|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТПоказатели.Показатель
	|			ИЗ
	|				ВТПоказатели)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоказатели.НачислениеСтаж КАК НачислениеСтаж,
	|	ВТПоказатели.Показатель КАК Показатель,
	|	ВТПоказатели.Показатель.ВидСтажа КАК ВидСтажа,
	|	ЕСТЬNULL(ВТГраницы.НомерСтроки, 0) КАК НомерСтроки,
	|	ЕСТЬNULL(ВТГраницы.ВерхняяГраницаИнтервалаСтажа, 0) КАК ВерхняяГраницаИнтервала,
	|	ЕСТЬNULL(ВТГраницы.ЗначениеПоказателя, 0) КАК ЗначениеПоказателя
	|ИЗ
	|	ВТПоказатели КАК ВТПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГраницы КАК ВТГраницы
	|		ПО ВТПоказатели.Показатель = ВТГраницы.Показатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачислениеСтаж,
	|	Показатель,
	|	НомерСтроки";
	
	ШкалаСтажей = ЗапросДополнительный.Выполнить().Выгрузить();
	
	Для Каждого СтрокаСотрудника Из СотрудникиДаты Цикл
		
		СтруктураПоиска = Новый Структура("НачислениеСтаж", СтрокаСотрудника.НачислениеСтаж);
		НайденнаяШкалаСтажа = ШкалаСтажей.НайтиСтроки(СтруктураПоиска);
		
		Если НайденнаяШкалаСтажа.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщийСтажВМесяцах = 0;
		Попытка
			СоответсвиеСтаж = СтажиСотрудников.Получить(СтрокаСотрудника.Сотрудник);
			СоответсвиеПоВидуСтажа = СоответсвиеСтаж.Получить(НайденнаяШкалаСтажа[0].ВидСтажа);
			ОбщийСтажВМесяцах = (СоответсвиеПоВидуСтажа.Лет * 12) + СоответсвиеПоВидуСтажа.Месяцев + Окр(СоответсвиеПоВидуСтажа.Дней / 30, 2);
		Исключение
		КонецПопытки;
		
		ПроцентНадбавки = 0;
		Если ОбщийСтажВМесяцах > 0 Тогда
			
			ПоследняяВерхняяГраница = 0;
			Для Каждого СтрокаШкалы Из НайденнаяШкалаСтажа Цикл
				
				Если СтрокаШкалы.ВерхняяГраницаИнтервала = 0 И НЕ СтрокаШкалы.НомерСтроки = 0 Тогда
					//последние значение в шкале
					Если ОбщийСтажВМесяцах > ПоследняяВерхняяГраница Тогда
						ПроцентНадбавки = СтрокаШкалы.ЗначениеПоказателя;
					КонецЕсли;
				Иначе
					//обычное значение
					Если СтрокаШкалы.ВерхняяГраницаИнтервала >= ОбщийСтажВМесяцах И ОбщийСтажВМесяцах > ПоследняяВерхняяГраница Тогда
						ПроцентНадбавки = СтрокаШкалы.ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
				
				ПоследняяВерхняяГраница = СтрокаШкалы.ВерхняяГраницаИнтервала;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПроцентНадбавки > 0 Тогда
			СтруктураПоиска = Новый Структура("Организация, Сотрудник");
			СтруктураПоиска.Организация = СтрокаСотрудника.Организация;
			СтруктураПоиска.Сотрудник = СтрокаСотрудника.Сотрудник;
			СтрокиДанных = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДанных Из СтрокиДанных Цикл
				СтрокаДанных.Премия1Процент = ПроцентНадбавки;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	//завершение
	МенеджерВТ = Неопределено;
	
КонецПроцедуры

Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_ДополнитьРасчетВакансиями(ТаблицаДанных, ТаблицаСтавок, ДатаОтчета, МассивВыплатаПоРН, МассивКвартальнаяПремия, МассивПремияЗаМесяц)
	
	//дополним таблицу ставок, позициями из штатного расписания, которых совсем нет в исходном расчете
	
	//--> Дебов Игорь 28.06.2016
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	Запрос.УстановитьПараметр("Организация", ТаблицаДанных.ВыгрузитьКолонку("Организация"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец КАК Организация,
	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания,
	|	ИсторияИспользованияШтатногоРасписания.Дата,
	|	ИсторияИспользованияШтатногоРасписания.КоличествоСтавок,
	|	ИсторияИспользованияШтатногоРасписания.Используется
	|ПОМЕСТИТЬ ВТВыборка
	|ИЗ
	|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
	|ГДЕ
	|	ИсторияИспользованияШтатногоРасписания.Дата <= &ДатаОтчета
	|	И ИсторияИспользованияШтатногоРасписания.Активность = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыборка.Организация,
	|	ВТВыборка.ПозицияШтатногоРасписания,
	|	МАКСИМУМ(ВТВыборка.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТСрезПоследних
	|ИЗ
	|	ВТВыборка КАК ВТВыборка
	|ГДЕ
	|	ВТВыборка.Организация В(&Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыборка.Организация,
	|	ВТВыборка.ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСрезПоследних.Организация,
	|	ВТСрезПоследних.ПозицияШтатногоРасписания,
	|	ЕСТЬNULL(ВТВыборка.КоличествоСтавок, 0) КАК КоличествоСтавок,
	|	ЕСТЬNULL(ВТВыборка.Используется, ЛОЖЬ) КАК Используется
	|ПОМЕСТИТЬ ВТПодИтог
	|ИЗ
	|	ВТСрезПоследних КАК ВТСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыборка КАК ВТВыборка
	|		ПО ВТСрезПоследних.Организация = ВТВыборка.Организация
	|			И ВТСрезПоследних.ПозицияШтатногоРасписания = ВТВыборка.ПозицияШтатногоРасписания
	|			И ВТСрезПоследних.Дата = ВТВыборка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПодИтог.Организация КАК Организация,
	|	ВТПодИтог.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ВТПодИтог.КоличествоСтавок,
	|	ВТПодИтог.Используется,
	|	ИСТИНА КАК ДобавитьВВакансии
	|ИЗ
	|	ВТПодИтог КАК ВТПодИтог
	|ГДЕ
	|	ВТПодИтог.КоличествоСтавок > 0
	|	И ВТПодИтог.Используется = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПозицияШтатногоРасписания";
	
	ТаблицаВсеПозиции = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаВсеПозиции.Количество() > 0 Тогда
		
		Для Каждого СтрокаСтавки Из ТаблицаСтавок Цикл
			
			СтруктураПоиска = Новый Структура("Организация,ПозицияШтатногоРасписания");
			СтруктураПоиска.Организация = СтрокаСтавки.Организация;
			СтруктураПоиска.ПозицияШтатногоРасписания = СтрокаСтавки.ПозицияШтатногоРасписания;
			СтрокиПоиска = ТаблицаВсеПозиции.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиПоиска.Количество() > 0 Тогда
				СтрокиПоиска[0].ДобавитьВВакансии = Ложь;
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Для Каждого СтрокаПозиции Из ТаблицаВсеПозиции Цикл
		 		
		Если СтрокаПозиции.ДобавитьВВакансии = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСтавки = ТаблицаСтавок.Добавить();
		СтрокаСтавки.Организация = 					СтрокаПозиции.Организация;
		СтрокаСтавки.ПозицияШтатногоРасписания = 	СтрокаПозиции.ПозицияШтатногоРасписания;
		СтрокаСтавки.КолвоЕдениц = 					СтрокаПозиции.КоличествоСтавок;
		СтрокаСтавки.Остаток = 						СтрокаПозиции.КоличествоСтавок;
		
	КонецЦикла;
	//<-- Дебов Игорь 28.06.2016
	
	//определеим таблицу вакансий
	ТаблицаВакансий = ТаблицаДанных.СкопироватьКолонки();
	
	Для Каждого СтрокаСтавки Из ТаблицаСтавок Цикл
		
		ОстатокСтавки = СтрокаСтавки.Остаток;
		Если ОстатокСтавки <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ОстатокСтавки > 0 Цикл
			
			ТекущаяСтавка = 1;
			Если ОстатокСтавки = 0.1 ИЛИ ОстатокСтавки = 0.25 Тогда
				ТекущаяСтавка = ОстатокСтавки;
				ОстатокСтавки = 0;
			Иначе
				ОстатокСтавки = ОстатокСтавки - 1;
				Если ОстатокСтавки < 0 Тогда
					//частичные ставки не выводим
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаВакансии = ТаблицаВакансий.Добавить();
			СтрокаВакансии.Организация = 				СтрокаСтавки.Организация;
			СтрокаВакансии.ПозицияШтатногоРасписания = 	СтрокаСтавки.ПозицияШтатногоРасписания;
			СтрокаВакансии.Подразделение = 				СтрокаСтавки.ПозицияШтатногоРасписания.Подразделение;
			СтрокаВакансии.ПодразделениеКод = 			СокрЛП(СтрокаСтавки.ПозицияШтатногоРасписания.Подразделение.Код);
			СтрокаВакансии.Должность = 					СтрокаСтавки.ПозицияШтатногоРасписания.Должность;
			СтрокаВакансии.ДолжностьКод = 				СокрЛП(СтрокаСтавки.ПозицияШтатногоРасписания.Должность.РеквизитДопУпорядочивания);
			СтрокаВакансии.ПорядокПозиции = 			СтрокаСтавки.ПозицияШтатногоРасписания.АФМ_ПорядокВШтатномРасписании;
			СтрокаВакансии.КолвоЕдениц = 				ТекущаяСтавка;
			СтрокаВакансии.Ставка = 					0;
			СтрокаВакансии.СуммаОклада = 				СтрокаСтавки.ПозицияШтатногоРасписания.ОкладТариф;
			СтрокаВакансии.СуммаОкладаПоШР = 			СтрокаВакансии.СуммаОклада;
			СтрокаВакансии.СуммаВсего = 				СтрокаВакансии.СуммаОклада;
			СтрокаВакансии.СуммаФОТ = 					СтрокаСтавки.ПозицияШтатногоРасписания.ФОТ;
			СтрокаВакансии.Сотрудник = 					Справочники.Сотрудники.ПустаяСсылка();
			СтрокаВакансии.ФИО = 						"Вакансия";
			СтрокаВакансии.Категория = 					СтрокаВакансии.Должность.АФМ_КатегорияСтатистическогоУчета;
			СтрокаВакансии.ВОтпуске = 					Ложь;
			СтрокаВакансии.ВОтпускеТекст = 				"";
			СтрокаВакансии.Премия0Процент = 			0;
			СтрокаВакансии.Премия0Сумма = 				0;
			СтрокаВакансии.Премия1Считать = 			Ложь;
			СтрокаВакансии.Премия1Процент = 			0;
			СтрокаВакансии.Премия1Сумма = 				0;
			СтрокаВакансии.Премия2Процент = 			0;
			СтрокаВакансии.Премия2Сумма = 				0;
			СтрокаВакансии.Премия3Процент = 			0;
			СтрокаВакансии.Премия3Сумма = 				0;
			СтрокаВакансии.Премия4Процент = 			0;
			СтрокаВакансии.Премия4Сумма = 				0;
			СтрокаВакансии.Премия5Процент = 			0;
			СтрокаВакансии.Премия5Сумма = 				0;
			СтрокаВакансии.СуммаИтого = 				0;
			
			//уровни функциональных блоков
			ОпределитьУровниГруппировок(СтрокаВакансии);
			
		КонецЦикла;
		
	КонецЦикла;
	
	//определим премии
	МассивПоказателей = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПоказателей, МассивВыплатаПоРН);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПоказателей, МассивКвартальнаяПремия);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПоказателей, МассивПремияЗаМесяц);
	
	ЗапросПремииПоШР = Новый Запрос;
	ЗапросПремииПоШР.УстановитьПараметр("МассивПозицийШР", ТаблицаВакансий.ВыгрузитьКолонку("ПозицияШтатногоРасписания"));
	ЗапросПремииПоШР.УстановитьПараметр("ДатаОтчета", НачалоДня(ДатаОтчета));
	ЗапросПремииПоШР.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	ЗапросПремииПоШР.УстановитьПараметр("МассивВыплатаПоРН", МассивВыплатаПоРН);
	ЗапросПремииПоШР.УстановитьПараметр("МассивКвартальнаяПремия", МассивКвартальнаяПремия);
	ЗапросПремииПоШР.УстановитьПараметр("МассивПремияЗаМесяц", МассивПремияЗаМесяц);
	
	ЗапросПремииПоШР.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсторияПоказателейПоШтатномуРасписанию.Дата,
	|	ИсторияПоказателейПоШтатномуРасписанию.ПозицияШтатногоРасписания,
	|	ИсторияПоказателейПоШтатномуРасписанию.Показатель,
	|	ИсторияПоказателейПоШтатномуРасписанию.Значение
	|ПОМЕСТИТЬ ВТВыборДанных
	|ИЗ
	|	РегистрСведений.ИсторияПоказателейПоШтатномуРасписанию КАК ИсторияПоказателейПоШтатномуРасписанию
	|ГДЕ
	|	ИсторияПоказателейПоШтатномуРасписанию.Активность = ИСТИНА
	|	И ИсторияПоказателейПоШтатномуРасписанию.Дата <= &ДатаОтчета
	|	И ИсторияПоказателейПоШтатномуРасписанию.ПозицияШтатногоРасписания В(&МассивПозицийШР)
	|	И ИсторияПоказателейПоШтатномуРасписанию.Показатель В(&МассивПоказателей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТВыборДанных.Дата) КАК Дата,
	|	ВТВыборДанных.ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТПоследнееЗначение
	|ИЗ
	|	ВТВыборДанных КАК ВТВыборДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыборДанных.ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоследнееЗначение.ПозицияШтатногоРасписания,
	|	ВТВыборДанных.Показатель,
	|	ВТВыборДанных.Значение
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТПоследнееЗначение КАК ВТПоследнееЗначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыборДанных КАК ВТВыборДанных
	|		ПО ВТПоследнееЗначение.ПозицияШтатногоРасписания = ВТВыборДанных.ПозицияШтатногоРасписания
	|			И ВТПоследнееЗначение.Дата = ВТВыборДанных.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоказатели.ПозицияШтатногоРасписания,
	|	ВЫБОР
	|		КОГДА ВТПоказатели.Показатель В (&МассивВыплатаПоРН)
	|			ТОГДА ВТПоказатели.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыплатаПоРН,
	|	ВЫБОР
	|		КОГДА ВТПоказатели.Показатель В (&МассивКвартальнаяПремия)
	|			ТОГДА ВТПоказатели.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КвартальнаяПремия,
	|	ВЫБОР
	|		КОГДА ВТПоказатели.Показатель В (&МассивПремияЗаМесяц)
	|			ТОГДА ВТПоказатели.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПремияЗаМесяц
	|ПОМЕСТИТЬ ВТРаспределение
	|ИЗ
	|	ВТПоказатели КАК ВТПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаспределение.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	СУММА(ВТРаспределение.ВыплатаПоРН) КАК ВыплатаПоРН,
	|	СУММА(ВТРаспределение.КвартальнаяПремия) КАК КвартальнаяПремия,
	|	СУММА(ВТРаспределение.ПремияЗаМесяц) КАК ПремияЗаМесяц
	|ИЗ
	|	ВТРаспределение КАК ВТРаспределение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРаспределение.ПозицияШтатногоРасписания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПозицияШтатногоРасписания";
	
	ТаблицаПремийПоШР = ЗапросПремииПоШР.Выполнить().Выгрузить();
	
	Для Каждого СтрокаВакансии Из ТаблицаВакансий Цикл
		
		СтруктураПоиска = Новый Структура("ПозицияШтатногоРасписания");
		СтруктураПоиска.ПозицияШтатногоРасписания = СтрокаВакансии.ПозицияШтатногоРасписания;
		НайденныеПремии = ТаблицаПремийПоШР.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеПремии.Количество() > 0 Тогда
			СтрокаВакансии.Премия5Процент = НайденныеПремии[0].ВыплатаПоРН;
			СтрокаВакансии.Премия3Процент = НайденныеПремии[0].КвартальнаяПремия;
			СтрокаВакансии.Премия2Процент = НайденныеПремии[0].ПремияЗаМесяц;
		КонецЕсли;
		
	КонецЦикла;
	
	//перенесем в таблицу данных
	Для Каждого СтрокаВакансии Из ТаблицаВакансий Цикл
		СтрокаДанных = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаВакансии);
	КонецЦикла;
	
КонецПроцедуры

Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_ДополнитьВнеШтатногоРасписания(ТаблицаДанных, Запрос, ДатаОтчета,
	МассивВыплатаПоРКиСН, МассивВыплатаПоРН, МассивКвартальнаяПремия, МассивПремияЗаМесяц, МассивНадбавкаЗаВыслугуЛет)
	
	//дополнительные параметры
	ТаблицаДанныхДоп = ТаблицаДанных.СкопироватьКолонки();
	
	ФункциональныйБлокВнеШР = Справочники.АФМ_ФункциональныеБлоки.НайтиПоКоду("ЯЯ"); //нужно добавить в справочник, если нет
	
	//выбор данных
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	СостоянияСотрудниковСрезПоследних.Состояние КАК Состояние,
	|	СостоянияСотрудниковСрезПоследних.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудниковСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СостоянияСотрудниковСрезПоследних.ОкончаниеПредположительно
	|		ИНАЧЕ СостоянияСотрудниковСрезПоследних.ДействуетДо
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТОтпускники
	|ИЗ
	|	РегистрСведений.СостоянияСотрудников.СрезПоследних(&ДатаОтчета, НЕ Сотрудник В (&МассивСотрудников)) КАК СостоянияСотрудниковСрезПоследних
	|ГДЕ
	|	(СостоянияСотрудниковСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком)
	|			ИЛИ СостоянияСотрудниковСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам))
	|	И СостоянияСотрудниковСрезПоследних.Сотрудник.ГоловнаяОрганизация В(&МассивГоловныхОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
	|	КадроваяИсторияСотрудниковСрезПоследних.Организация
	|ПОМЕСТИТЬ ВТПозицииШР
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|			&ДатаОтчета,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТОтпускники.Сотрудник
	|				ИЗ
	|					ВТОтпускники)) КАК КадроваяИсторияСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ИсторияИспользованияШтатногоРасписания.Дата КАК Дата,
	|	ИсторияИспользованияШтатногоРасписания.Используется КАК Используется
	|ПОМЕСТИТЬ ВТВыборкаИсторииШР
	|ИЗ
	|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
	|ГДЕ
	|	ИсторияИспользованияШтатногоРасписания.Активность = ИСТИНА
	|	И ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания В
	|			(ВЫБРАТЬ
	|				ВТПозицииШР.ПозицияШтатногоРасписания
	|			ИЗ
	|				ВТПозицииШР)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыборкаИсторииШР.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	МАКСИМУМ(ВТВыборкаИсторииШР.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТПоследнееЗНачениеИсторииШР
	|ИЗ
	|	ВТВыборкаИсторииШР КАК ВТВыборкаИсторииШР
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыборкаИсторииШР.ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоследнееЗНачениеИсторииШР.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ВТВыборкаИсторииШР.Используется КАК Используется
	|ПОМЕСТИТЬ ВТСокращенныеПозицииШР
	|ИЗ
	|	ВТПоследнееЗНачениеИсторииШР КАК ВТПоследнееЗНачениеИсторииШР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыборкаИсторииШР КАК ВТВыборкаИсторииШР
	|		ПО ВТПоследнееЗНачениеИсторииШР.ПозицияШтатногоРасписания = ВТВыборкаИсторииШР.ПозицияШтатногоРасписания
	|			И ВТПоследнееЗНачениеИсторииШР.Дата = ВТВыборкаИсторииШР.Дата
	|ГДЕ
	|	ЕСТЬNULL(ВТВыборкаИсторииШР.Используется, ИСТИНА) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтпускники.Сотрудник КАК Сотрудник,
	|	ВТОтпускники.Состояние КАК Состояние,
	|	ВТОтпускники.ДатаНачала КАК ДатаНачала,
	|	ВТОтпускники.ДатаОкончания КАК ДатаОкончания,
	|	ВТПозицииШР.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ВТПозицииШР.Организация
	|ПОМЕСТИТЬ ВТОтпускникиШР
	|ИЗ
	|	ВТОтпускники КАК ВТОтпускники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПозицииШР КАК ВТПозицииШР
	|		ПО ВТОтпускники.Сотрудник = ВТПозицииШР.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтпускникиШР.Сотрудник КАК Сотрудник,
	|	ВТОтпускникиШР.Состояние КАК Состояние,
	|	ВТОтпускникиШР.ДатаНачала КАК ДатаНачала,
	|	ВТОтпускникиШР.ДатаОкончания КАК ДатаОкончания,
	|	ВТОтпускникиШР.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ВТОтпускникиШР.Организация
	|ПОМЕСТИТЬ ВТПодИтог
	|ИЗ
	|	ВТОтпускникиШР КАК ВТОтпускникиШР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСокращенныеПозицииШР КАК ВТСокращенныеПозицииШР
	|		ПО ВТОтпускникиШР.ПозицияШтатногоРасписания = ВТСокращенныеПозицииШР.ПозицияШтатногоРасписания
	|ГДЕ
	|	ЕСТЬNULL(ВТСокращенныеПозицииШР.Используется, ИСТИНА) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение) КАК Оклад
	|ПОМЕСТИТЬ ВТОклады
	|ИЗ
	|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних(
	|			&ДатаОтчета,
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТПодИтог.Сотрудник
	|					ИЗ
	|						ВТПодИтог)
	|				И Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.Оклад)) КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПодИтог.Сотрудник,
	|	ВТПодИтог.Состояние,
	|	ВТПодИтог.ДатаНачала,
	|	ВТПодИтог.ДатаОкончания,
	|	ВТПодИтог.ПозицияШтатногоРасписания,
	|	ВТПодИтог.Организация,
	|	ЕСТЬNULL(ВТОклады.Оклад, 0) КАК Оклад
	|ИЗ
	|	ВТПодИтог КАК ВТПодИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОклады КАК ВТОклады
	|		ПО ВТПодИтог.Сотрудник = ВТОклады.Сотрудник";
	
	ДанныеВнеШтатногоРасписания = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВнеШтатногоРасписания Из ДанныеВнеШтатногоРасписания Цикл
		
		//основные данные
		СтрокаДанных = ТаблицаДанныхДоп.Добавить();
		СтрокаДанных.Организация = 		ВнеШтатногоРасписания.Организация;
		СтрокаДанных.ПозицияШтатногоРасписания = ВнеШтатногоРасписания.ПозицияШтатногоРасписания;
		СтрокаДанных.Подразделение = 	ВнеШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение;
		СтрокаДанных.ПодразделениеКод = СокрЛП(ВнеШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение.Код);
		СтрокаДанных.Должность = 		ВнеШтатногоРасписания.ПозицияШтатногоРасписания.Должность;
		СтрокаДанных.ДолжностьКод = 	СокрЛП(СтрокаДанных.Должность.РеквизитДопУпорядочивания);
		СтрокаДанных.ПорядокПозиции = 	ВнеШтатногоРасписания.ПозицияШтатногоРасписания.АФМ_ПорядокВШтатномРасписании;
		СтрокаДанных.КолвоЕдениц = 		0;
		СтрокаДанных.Ставка = 			1;
		СтрокаДанных.СуммаОклада = 		ВнеШтатногоРасписания.Оклад;
		СтрокаДанных.СуммаОкладаПоШР = 	ВнеШтатногоРасписания.Оклад;
		СтрокаДанных.СуммаВсего = 		ВнеШтатногоРасписания.Оклад;
		СтрокаДанных.СуммаФОТ = 		ВнеШтатногоРасписания.Оклад;
		СтрокаДанных.Сотрудник = 		ВнеШтатногоРасписания.Сотрудник;
		СтрокаДанных.Категория = 		СтрокаДанных.Должность.АФМ_КатегорияСтатистическогоУчета;
		СтрокаДанных.ВОтпуске = 		Ложь;
		
		ВОтпускеТекст = "Отпуск";
		Если ВнеШтатногоРасписания.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком Тогда
			ВОтпускеТекст = "Отпуск по уходу за ребенком";
		ИначеЕсли ВнеШтатногоРасписания.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам Тогда
			ВОтпускеТекст = "Отпуск по беременности и родам";
		КонецЕсли;
		ВОтпускеТекст = ВОтпускеТекст + " c " + Формат(ВнеШтатногоРасписания.ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(ВнеШтатногоРасписания.ДатаОкончания,"ДФ=dd.MM.yyyy");
		СтрокаДанных.ВОтпускеТекст = 	ВОтпускеТекст;
		
		//уровни функциональных блоков
		ОпределитьУровниГруппировок(СтрокаДанных);
		СтрокаДанных.Уровень1 = 	ФункциональныйБлокВнеШР;
		СтрокаДанных.Уровень1Код = 	СокрЛП(ФункциональныйБлокВнеШР.Код);
		
		//пустые значения
		СтрокаДанных.ФИО = 				СокрЛП(ВнеШтатногоРасписания.Сотрудник.ФизическоеЛицо);
		СтрокаДанных.Премия0Процент = 	0;
		СтрокаДанных.Премия0Сумма = 	0;
		СтрокаДанных.Премия1Считать = 	Ложь;
		СтрокаДанных.Премия1Процент = 	0;
		СтрокаДанных.Премия1Сумма = 	0;
		СтрокаДанных.Премия2Процент = 	0;
		СтрокаДанных.Премия2Сумма = 	0;
		СтрокаДанных.Премия3Процент = 	0;
		СтрокаДанных.Премия3Сумма = 	0;
		СтрокаДанных.Премия4Процент = 	0;
		СтрокаДанных.Премия4Сумма = 	0;
		СтрокаДанных.Премия5Процент = 	0;
		СтрокаДанных.Премия5Сумма = 	0;
		СтрокаДанных.СуммаИтого = 		0;
		
	КонецЦикла;
	
	//расчет премий
	Если ТаблицаДанныхДоп.Количество() > 0 Тогда
		
		МассивПерсональнаяНадбавка = Новый Массив;
		СостояниеШтатногоРасписания_ШтатнаяРасстановка_РасчетПремий(ТаблицаДанныхДоп, ДатаОтчета,
			МассивВыплатаПоРКиСН, МассивВыплатаПоРН, МассивКвартальнаяПремия, МассивПремияЗаМесяц, МассивНадбавкаЗаВыслугуЛет, МассивПерсональнаяНадбавка);	
		
	КонецЕсли;
		
	//перенесем данные в основную таблицу
	Для Каждого СтрокаДанныхДоп Из ТаблицаДанныхДоп Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхДоп);
	КонецЦикла;
	
КонецПроцедуры

Функция СостояниеШтатногоРасписания_ШтатнаяРасстановка_СформироватьМассивНастроек(Настройка, ВидПоиска) Экспорт
	
	МассивИтоговый = Новый Массив;
	
	СтрокаНастроек = АФМ_ПредопределенныеДанные.ПолучитьПредопределенноеЗначение(Настройка);
	Если СокрЛП(СтрокаНастроек) = "" ИЛИ СтрокаНастроек = Неопределено Тогда
		Возврат МассивИтоговый;
	КонецЕсли;
	
	МассивНастроек = СтрРазделить(СтрокаНастроек, ",");
	
	Для Каждого ЭлементНастройки Из МассивНастроек Цикл
		
		Если ВидПоиска = 1 Тогда
			НайденноеЗначение=Справочники.ПоказателиРасчетаЗарплаты.НайтиПоРеквизиту("Идентификатор", СокрЛП(ЭлементНастройки));
			Если НЕ НайденноеЗначение=Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка() Тогда
				МассивИтоговый.Добавить(НайденноеЗначение);
			КонецЕсли;
			
		ИначеЕсли ВидПоиска = 2 Тогда
			НайденноеЗначение=ПланыВидовРасчета.Начисления.НайтиПоНаименованию(СокрЛП(ЭлементНастройки), Истина);
			Если НЕ НайденноеЗначение=ПланыВидовРасчета.Начисления.ПустаяСсылка() Тогда
				МассивИтоговый.Добавить(НайденноеЗначение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивИтоговый;
	
КонецФункции

Процедура ОпределитьУровниГруппировок(СтрокаДанных)
	
	//справочно: вызывается при формировании разных отчетов
	
	Уровень1 = Справочники.АФМ_ФункциональныеБлоки.ПустаяСсылка();
	Уровень2 = Справочники.АФМ_ФункциональныеБлоки.ПустаяСсылка();
	Уровень2Код = "00-000";
	
	Если НЕ СтрокаДанных.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка()
		И НЕ СтрокаДанных.Подразделение = Неопределено Тогда
		
		Если СтрокаДанных.Подразделение.АФМ_ФункциональныйБлок.ГруппироватьВШтатномРасписании = Истина Тогда
			Уровень1 = СтрокаДанных.Подразделение.АФМ_ФункциональныйБлок.Родитель;
			Уровень2 = СтрокаДанных.Подразделение.АФМ_ФункциональныйБлок;
			Уровень2Код = Уровень2.Код;
		Иначе
			Уровень1 = СтрокаДанных.Подразделение.АФМ_ФункциональныйБлок;
			Уровень2 = СтрокаДанных.Подразделение;
			Уровень2Код = Лев(СокрЛП(Уровень1.Код), 3) + "000";
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДанных.Уровень1 = 	Уровень1;
	СтрокаДанных.Уровень1Код = 	Уровень1.Код;
	СтрокаДанных.Уровень2 = 	Уровень2;
	СтрокаДанных.Уровень2Код = 	Уровень2Код;
	
КонецПроцедуры

Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_ВывестиОрганизацию(Организация, ТаблицаДанных, Макеты, ДокументРезультат, СоответствиеПользовательскихПолей, ОбщиеПараметры)
	
	//параметры
	НомерПП = 0;
	
	//шапка
	Макеты.ОбластьШапка1.Параметры.Заполнить(ОбщиеПараметры);
	ДокументРезультат.Вывести(Макеты.ОбластьШапка1);
	ДокументРезультат.Вывести(Макеты.ОбластьШапка2);
	
	//группировки (функциональные блоки / подразделения)
	НайденныеУровни1 = СостояниеШтатногоРасписания_ШтатнаяРасстановка_ПолучитьУровень(Организация, ТаблицаДанных, , 1);
	
	Для Каждого СтрокаУровня1 Из НайденныеУровни1 Цикл
		
		//вывод шапки 1 уровня
		СостояниеШтатногоРасписания_ШтатнаяРасстановка_ВыводШапкиУровня(ДокументРезультат, СтрокаУровня1, Макеты.ОбластьУровень1, 1);
		
		//вывод второго уровня
		НайденныеУровни2 = СостояниеШтатногоРасписания_ШтатнаяРасстановка_ПолучитьУровень(Организация, ТаблицаДанных, СтрокаУровня1.Уровень1, 2);
		
		Для Каждого СтрокаУровня2 Из НайденныеУровни2 Цикл
			
			//вывод шапки 2 уровня
			СостояниеШтатногоРасписания_ШтатнаяРасстановка_ВыводШапкиУровня(ДокументРезультат, СтрокаУровня2, Макеты.ОбластьУровень2, 2);
			
			//вывод строк
			СтруктураПоискаПоУровням2 = Новый Структура("Организация, Уровень1, Уровень2");
			СтруктураПоискаПоУровням2.Организация = Организация;
			СтруктураПоискаПоУровням2.Уровень1 = СтрокаУровня1.Уровень1;
			СтруктураПоискаПоУровням2.Уровень2 = СтрокаУровня2.Уровень2;
			ДанныеПоУровню2 = ТаблицаДанных.НайтиСтроки(СтруктураПоискаПоУровням2);
			
			Для Каждого СтрокаДанных Из ДанныеПоУровню2 Цикл
				
				//строки
				НомерПП = НомерПП + 1;
				
				ОкладаТекст = Формат(СтрокаДанных.СуммаОклада, "ЧДЦ=2; ЧГ=3,0");
				//Если НЕ СтрокаДанных.СуммаОклада = СтрокаДанных.СуммаОкладаПоШР И НЕ СтрокаДанных.СуммаОкладаПоШР = 0 Тогда
				//	ОкладаТекст = ОкладаТекст + Символы.ПС + Формат(СтрокаДанных.СуммаОкладаПоШР, "ЧДЦ=2; ЧГ=3,0");
				//КонецЕсли;
				
				ПараметрыСтроки = Новый Структура;
				ПараметрыСтроки.Вставить("НомерПП", Формат(НомерПП, "ЧДЦ=; ЧГ=0"));
				ПараметрыСтроки.Вставить("ПодразделениеНаименование", СокрЛП(СтрокаДанных.Подразделение.Наименование));
				ПараметрыСтроки.Вставить("ДолжностьНаименование", СокрЛП(СтрокаДанных.Должность.Наименование));
				ПараметрыСтроки.Вставить("ОкладаТекст", ОкладаТекст);
				
				Макеты.ОбластьСтрока.Параметры.Заполнить(СтрокаДанных);
				Макеты.ОбластьСтрока.Параметры.Заполнить(ПараметрыСтроки);
				ДокументРезультат.Вывести(Макеты.ОбластьСтрока);
				
			КонецЦикла;
			
			//вывод итогов по 2 уровню
			СостояниеШтатногоРасписания_ШтатнаяРасстановка_ВыводИтоговПоУровня(ТаблицаДанных, Организация, СтрокаУровня1.Уровень1, СтрокаУровня2.Уровень2, 2, ДокументРезультат, Макеты.ОбластьИтогУровень2, ДанныеПоУровню2);
		
		КонецЦикла;
		
		//вывод итогов по 1 уровню
		СостояниеШтатногоРасписания_ШтатнаяРасстановка_ВыводИтоговПоУровня(ТаблицаДанных, Организация, СтрокаУровня1.Уровень1, , 1, ДокументРезультат, Макеты.ОбластьИтогУровень1);
		
	КонецЦикла;
	
	//итоги + подписи
	Макеты.ОбластьИтоги.Параметры.Заполнить(ОбщиеПараметры);
	СостояниеШтатногоРасписания_ШтатнаяРасстановка_ВыводИтоговПоУровня(ТаблицаДанных, Организация, , , 0, ДокументРезультат, Макеты.ОбластьИтоги);
	
КонецПроцедуры

Функция СостояниеШтатногоРасписания_ШтатнаяРасстановка_ПолучитьУровень(Организация, ТаблицаДанных, Уровень1=Неопределено, ИндексУровня)
	
	Колонка1Наименование = "Уровень"+СокрЛП(ИндексУровня);
	Колонка2Наименование = "Уровень"+СокрЛП(ИндексУровня)+"Код";
	
	ТаблицаУровня = Новый ТаблицаЗначений;
	ТаблицаУровня.Колонки.Добавить(Колонка1Наименование);
	ТаблицаУровня.Колонки.Добавить(Колонка2Наименование);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	Если ИндексУровня = 2 Тогда
		СтруктураПоиска.Вставить("Уровень1", Уровень1);
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаДанных Из НайденныеСтроки Цикл
		
		НоваяCтрока = ТаблицаУровня.Добавить();
		НоваяCтрока[Колонка1Наименование] = СтрокаДанных[Колонка1Наименование];
		НоваяCтрока[Колонка2Наименование] = СтрокаДанных[Колонка2Наименование];
		
	КонецЦикла;
	
	ТаблицаУровня.Свернуть(Колонка1Наименование+", "+Колонка2Наименование);
	ТаблицаУровня.Сортировать(Колонка2Наименование);
	
	Возврат ТаблицаУровня;
	
КонецФункции

Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_ВыводШапкиУровня(ДокументРезультат, СтрокаУровня, ОбластьУровень, ИндексУровня)
	
	КолонкаНаименование = "Уровень"+СокрЛП(ИндексУровня);
	
	ПараметрыУровня = Новый Структура;
	ПараметрыУровня.Вставить(КолонкаНаименование, СокрЛП(СтрокаУровня[КолонкаНаименование].Наименование));
	
	ОбластьУровень.Параметры.Заполнить(ПараметрыУровня);
	ДокументРезультат.Вывести(ОбластьУровень);
	
КонецПроцедуры

Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_ВыводИтоговПоУровня(ТаблицаДанных, Организация, Уровень1 = Неопределено, Уровень2 = Неопределено, ИндексУровня,
	ДокументРезультат, ОбластьУровень, ДанныеПоУровню = Неопределено)
	
	//чтение данных по уровню
	Если ДанныеПоУровню = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", Организация);
		Если НЕ Уровень1 = Неопределено Тогда
			СтруктураПоиска.Вставить("Уровень1", Уровень1);
		КонецЕсли;
		Если НЕ Уровень2 = Неопределено Тогда
			СтруктураПоиска.Вставить("Уровень2", Уровень2);
		КонецЕсли;
		ДанныеПоУровню = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		
	КонецЕсли;
	
	//подсчет итогов по уровню
	Реквизиты = "КолвоЕдениц,Ставка,СуммаВсего,Премия1Сумма,Премия2Сумма,Премия3Сумма,Премия4Сумма,Премия5Сумма,СуммаИтого";
	Категории = "Руководители,Специалисты,Рабочие";
	
	МассивКатегории = СтрРазделить(Категории, ",");
	МассивРеквизиты = СтрРазделить(Реквизиты, ",");
	МассивПараметры = Новый Массив;
	Для Каждого Реквизит Из МассивРеквизиты Цикл
		Для Каждого Категория Из МассивКатегории Цикл
			МассивПараметры.Добавить(Реквизит + Категория);
		КонецЦикла;
	КонецЦикла;
	СтрокаПараметры = Реквизиты + "," + СтрСоединить(МассивПараметры, ",");
	
	СоответствиеКатегорий = Новый Соответствие();
	Для Каждого Категория Из МассивКатегории Цикл
		СоответствиеКатегорий.Вставить(Перечисления.АФМ_КатегорииСтатистическогоУчета[Категория], Категория);
	КонецЦикла; 
	
	ПараметрыУровня = Новый Структура(СтрокаПараметры);
	Для Каждого ЭлементСтруктуры Из ПараметрыУровня Цикл
		ПараметрыУровня[ЭлементСтруктуры.Ключ] = 0;
	КонецЦикла; 
	
	Если НЕ Уровень1 = Неопределено Тогда
		ПараметрыУровня.Вставить("Уровень1", СокрЛП(Уровень1.Наименование));
	КонецЕсли;
	Если НЕ Уровень2 = Неопределено Тогда
		ПараметрыУровня.Вставить("Уровень2", СокрЛП(Уровень2.Наименование));
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоУровню Цикл
		
		//итоги по категориям
		Если ЗначениеЗаполнено(СтрокаДанных.Должность) Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.Должность.АФМ_КатегорияСтатистическогоУчета) Тогда
				Для Каждого Реквизит Из МассивРеквизиты Цикл
					ИмяПараметра = Реквизит + СоответствиеКатегорий[СтрокаДанных.Должность.АФМ_КатегорияСтатистическогоУчета];
					ПараметрыУровня[ИмяПараметра] = ПараметрыУровня[ИмяПараметра] + СтрокаДанных[Реквизит];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		//общие итоги
		Для Каждого Реквизит Из МассивРеквизиты Цикл
			ПараметрыУровня[Реквизит] = ПараметрыУровня[Реквизит] + СтрокаДанных[Реквизит];
		КонецЦикла;
		
	КонецЦикла;
	
	//вывод области
	ОбластьУровень.Параметры.Заполнить(ПараметрыУровня);
	ДокументРезультат.Вывести(ОбластьУровень);
	
КонецПроцедуры
//<-- АФМ-Серверс Дебов Игорь Заявка 000000008963 27.05.2016

//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000006160 18.06.2016
Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_ФормированиеСводногоОтчета(ТаблицаДанных, Макеты, ОбщиеПараметры, ДокументРезультат)
	
	//расчет сводных данных
	ЦентральнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	ВыборкаОрганизаций = Справочники.Организации.Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		Если СокрЛП(ВыборкаОрганизаций.Префикс) = "ИА" Тогда
			ЦентральнаяОрганизация = ВыборкаОрганизаций.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитКолва = "КолвоЕдениц";
	СписокПолей = "КолвоЕдениц,СуммаОклада,СуммаВсего,Премия0Процент,Премия0Сумма,Премия1Процент,Премия1Сумма,Премия2Процент,Премия2Сумма,Премия3Процент,Премия3Сумма,Премия4Процент,Премия4Сумма,Премия5Процент,Премия5Сумма,СуммаИтого";
	СписокПолейСр = "КолвоЕдениц,СуммаОклада,СуммаВсего,Премия0ПроцентСр,Премия0СуммаСр,Премия1ПроцентСр,Премия1СуммаСр,Премия2ПроцентСр,Премия2СуммаСр,Премия3ПроцентСр,Премия3СуммаСр,Премия4ПроцентСр,Премия4СуммаСр,Премия5ПроцентСр,Премия5СуммаСр,СуммаИтогоСр";
	СписокКатегорий = "Руководители,Специалисты,Рабочие";
	
	//данные поумолчанию
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если СтрокаДанных.Категория = Перечисления.АФМ_КатегорииСтатистическогоУчета.ПустаяСсылка() Тогда
			СтрокаДанных.Категория = Перечисления.АФМ_КатегорииСтатистическогоУчета.Специалисты;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Организация = ЦентральнаяОрганизация;
	СтрокаДанных.Категория = Перечисления.АФМ_КатегорииСтатистическогоУчета.Специалисты;
	СтрокаДанных.КолвоЕдениц = 0;
	СтрокаДанных.СуммаОклада = 0;
	СтрокаДанных.СуммаВсего = 0;
	СтрокаДанных.Премия0Процент = 0;
	СтрокаДанных.Премия0Сумма = 0;
	СтрокаДанных.Премия1Процент = 0;
	СтрокаДанных.Премия1Сумма = 0;
	СтрокаДанных.Премия2Процент = 0;
	СтрокаДанных.Премия2Сумма = 0;
	СтрокаДанных.Премия3Процент = 0;
	СтрокаДанных.Премия3Сумма = 0;
	СтрокаДанных.Премия4Процент = 0;
	СтрокаДанных.Премия4Сумма = 0;
	СтрокаДанных.Премия5Процент = 0;
	СтрокаДанных.Премия5Сумма = 0;
	
	//свернем данные
	ТаблицаДанных.Свернуть("Организация,Категория", СписокПолей);
	
	//добавим колонки
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Порядок");
	ТаблицаОрганизаций.Колонки.Добавить("Организация");
	ТаблицаОрганизаций.Колонки.Добавить("ОрганизацияТекст");
	
	ТаблицаДанных.Колонки.Добавить("Премия0ПроцентСр");
	ТаблицаДанных.Колонки.Добавить("Премия0СуммаСр");
	ТаблицаДанных.Колонки.Добавить("Премия1ПроцентСр");
	ТаблицаДанных.Колонки.Добавить("Премия1СуммаСр");
	ТаблицаДанных.Колонки.Добавить("Премия2ПроцентСр");
	ТаблицаДанных.Колонки.Добавить("Премия2СуммаСр");
	ТаблицаДанных.Колонки.Добавить("Премия3ПроцентСр");
	ТаблицаДанных.Колонки.Добавить("Премия3СуммаСр");
	ТаблицаДанных.Колонки.Добавить("Премия4ПроцентСр");
	ТаблицаДанных.Колонки.Добавить("Премия4СуммаСр");
	ТаблицаДанных.Колонки.Добавить("Премия5ПроцентСр");
	ТаблицаДанных.Колонки.Добавить("Премия5СуммаСр");
	ТаблицаДанных.Колонки.Добавить("СуммаИтогоСр");
	
	//рассчитаем новые колонки
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Порядок = 0;
		Если СтрокаДанных.Организация = ЦентральнаяОрганизация Тогда
			Порядок = 1;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		НоваяСтрока.Порядок = Порядок;
		НоваяСтрока.Организация = СтрокаДанных.Организация;
		НоваяСтрока.ОрганизацияТекст = СокрЛП(СтрокаДанных.Организация.НаименованиеСокращенное);
		
		Если СтрокаДанных.КолвоЕдениц = 0 Тогда
			
			СтрокаДанных.Премия0ПроцентСр = 0;
			СтрокаДанных.Премия0СуммаСр = 0;
			СтрокаДанных.Премия1ПроцентСр = 0;
			СтрокаДанных.Премия1СуммаСр = 0;
			СтрокаДанных.Премия2ПроцентСр = 0;
			СтрокаДанных.Премия2СуммаСр = 0;
			СтрокаДанных.Премия3ПроцентСр = 0;
			СтрокаДанных.Премия3СуммаСр = 0;
			СтрокаДанных.Премия4ПроцентСр = 0;
			СтрокаДанных.Премия4СуммаСр = 0;
			СтрокаДанных.Премия5ПроцентСр = 0;
			СтрокаДанных.Премия5СуммаСр = 0;
			
		Иначе
			
			СтрокаДанных.Премия0ПроцентСр = Окр(СтрокаДанных.Премия0Процент / СтрокаДанных.КолвоЕдениц, 2);
			СтрокаДанных.Премия0СуммаСр = СтрокаДанных.Премия0Сумма;
			СтрокаДанных.Премия1ПроцентСр = Окр(СтрокаДанных.Премия1Процент / СтрокаДанных.КолвоЕдениц, 2);
			СтрокаДанных.Премия1СуммаСр = СтрокаДанных.Премия1Сумма;
			СтрокаДанных.Премия2ПроцентСр = Окр(СтрокаДанных.Премия2Процент / СтрокаДанных.КолвоЕдениц, 2);
			СтрокаДанных.Премия2СуммаСр = СтрокаДанных.Премия2Сумма;
			СтрокаДанных.Премия3ПроцентСр = Окр(СтрокаДанных.Премия3Процент / СтрокаДанных.КолвоЕдениц, 2);
			СтрокаДанных.Премия3СуммаСр = СтрокаДанных.Премия3Сумма;
			СтрокаДанных.Премия4ПроцентСр = Окр(СтрокаДанных.Премия4Процент / СтрокаДанных.КолвоЕдениц, 2);
			СтрокаДанных.Премия4СуммаСр = СтрокаДанных.Премия4Сумма;
			СтрокаДанных.Премия5ПроцентСр = Окр(СтрокаДанных.Премия5Процент / СтрокаДанных.КолвоЕдениц, 2);
			СтрокаДанных.Премия5СуммаСр = СтрокаДанных.Премия5Сумма;
			
		КонецЕсли;
		
		СтрокаДанных.СуммаИтогоСр = СтрокаДанных.СуммаИтого;
		
	КонецЦикла;
	
	//сортировки
	ТаблицаОрганизаций.Свернуть("Порядок, Организация, ОрганизацияТекст");
	ТаблицаОрганизаций.Сортировать("Порядок, ОрганизацияТекст");
	
	ТаблицаДанных.Сортировать("Организация, Категория");
	
	//вывод отчета
	ДанныеПоФилиалам = Новый Массив;
	ДанныеПоОбществу = Новый Массив;
	
	//шапка
	Макеты.ОбластьСводнаяШапка1.Параметры.Заполнить(ОбщиеПараметры);
	ДокументРезультат.Вывести(Макеты.ОбластьСводнаяШапка1);
	ДокументРезультат.Вывести(Макеты.ОбластьСводнаяШапка2);
	
	//вывод блоков
	ТекПорядок = Неопределено;
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
		
		//вывод итога по филиалам
		Если НЕ ТекПорядок = СтрокаОрганизации.Порядок Тогда
			ТекПорядок = СтрокаОрганизации.Порядок;
			Если ТекПорядок = 1 Тогда
				ПараметрыОбласти = Новый Структура;
				ПараметрыОбласти.Вставить("ТекстИтога", "филиалам");
				Макеты.ОбластьСводнаяИтоги.Параметры.Заполнить(ПараметрыОбласти);
				СостояниеШтатногоРасписания_ШтатнаяРасстановка_Свод_ИтогиПоБлоку(ДанныеПоФилиалам, Макеты.ОбластьСводнаяИтоги, СписокПолейСр, СписокКатегорий, РеквизитКолва);
				ДокументРезультат.Вывести(Макеты.ОбластьСводнаяИтоги);
			КонецЕсли;
		КонецЕсли;
		
		//вывод организации
		СтруктураПоиска = Новый Структура("Организация", СтрокаОрганизации.Организация);
		ДанныеПоОрганизации = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		
		ПараметрыОбласти = Новый Структура;
		ПараметрыОбласти.Вставить("ОрганизацияТекст", СтрокаОрганизации.ОрганизацияТекст);
		Макеты.ОбластьСводнаяОрганизация.Параметры.Заполнить(ПараметрыОбласти);
		СостояниеШтатногоРасписания_ШтатнаяРасстановка_Свод_ИтогиПоБлоку(ДанныеПоОрганизации, Макеты.ОбластьСводнаяОрганизация, СписокПолейСр, СписокКатегорий, РеквизитКолва);
		ДокументРезультат.Вывести(Макеты.ОбластьСводнаяОрганизация);
		
		//запись итогов
		Для Каждого СтрокаДанныхПоОрганизации Из ДанныеПоОрганизации Цикл
			Если СтрокаОрганизации.Порядок = 0 Тогда
				ДанныеПоФилиалам.Добавить(СтрокаДанныхПоОрганизации);
			КонецЕсли;
			ДанныеПоОбществу.Добавить(СтрокаДанныхПоОрганизации);
		КонецЦикла;
		
	КонецЦикла;
	
	//итоги по обществу
	ПараметрыОбласти = Новый Структура;
	ПараметрыОбласти.Вставить("ТекстИтога", "Обществу");
	Макеты.ОбластьСводнаяИтоги.Параметры.Заполнить(ПараметрыОбласти);
	СостояниеШтатногоРасписания_ШтатнаяРасстановка_Свод_ИтогиПоБлоку(ДанныеПоОбществу, Макеты.ОбластьСводнаяИтоги, СписокПолейСр, СписокКатегорий, РеквизитКолва);
	ДокументРезультат.Вывести(Макеты.ОбластьСводнаяИтоги);
	
	//подписи
	Макеты.ОбластьСводнаяПодпись.Параметры.Заполнить(ОбщиеПараметры);
	ДокументРезультат.Вывести(Макеты.ОбластьСводнаяПодпись);
	
КонецПроцедуры

Процедура СостояниеШтатногоРасписания_ШтатнаяРасстановка_Свод_ИтогиПоБлоку(ДанныеПоУровню, ОбластьУровень, Реквизиты, Категории, РеквизитКолва)
	
	//подсчет итогов по блоку
	МассивКатегории = СтрРазделить(Категории, ",");
	МассивРеквизиты = СтрРазделить(Реквизиты, ",");
	МассивПараметры = Новый Массив;
	Для Каждого Реквизит Из МассивРеквизиты Цикл
		Для Каждого Категория Из МассивКатегории Цикл
			МассивПараметры.Добавить(Реквизит + Категория);
		КонецЦикла;
	КонецЦикла;
	СтрокаПараметры = Реквизиты + "," + СтрСоединить(МассивПараметры, ",");
	
	СоответствиеКатегорий = Новый Соответствие();
	Для Каждого Категория Из МассивКатегории Цикл
		СоответствиеКатегорий.Вставить(Перечисления.АФМ_КатегорииСтатистическогоУчета[Категория], Категория);
	КонецЦикла; 
	
	ПараметрыУровня = Новый Структура(СтрокаПараметры);
	Для Каждого ЭлементСтруктуры Из ПараметрыУровня Цикл
		ПараметрыУровня[ЭлементСтруктуры.Ключ] = 0;
	КонецЦикла; 
	
	//итоги по категориям
	Для Каждого СтрокаДанных Из ДанныеПоУровню Цикл
		
		//итоги по категориям
		Для Каждого Реквизит Из МассивРеквизиты Цикл
			ИмяПараметра = Реквизит + СоответствиеКатегорий[СтрокаДанных.Категория];
			ПараметрыУровня[ИмяПараметра] = ПараметрыУровня[ИмяПараметра] + СтрокаДанных[Реквизит];
			
		Если Реквизит = РеквизитКолва ИЛИ СтрНайти(Реквизит, "Сумма") > 0 Тогда
				ПараметрыУровня[Реквизит] = ПараметрыУровня[Реквизит] + СтрокаДанных[Реквизит];
			Иначе
				ПараметрыУровня[Реквизит] = ПараметрыУровня[Реквизит] + (СтрокаДанных[Реквизит] * СтрокаДанных[РеквизитКолва]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//общие итоги
	Для Каждого Реквизит Из МассивРеквизиты Цикл
		
		Если Реквизит = РеквизитКолва ИЛИ СтрНайти(Реквизит, "Сумма") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыУровня[РеквизитКолва] = 0 Тогда
			ПараметрыУровня[Реквизит] = 0;
		Иначе
			ПараметрыУровня[Реквизит] = Окр(ПараметрыУровня[Реквизит] / ПараметрыУровня[РеквизитКолва], 2);
		КонецЕсли;
		
	КонецЦикла;
	
	//вывод параметров в область
	ОбластьУровень.Параметры.Заполнить(ПараметрыУровня);
	
КонецПроцедуры
//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000006160 18.06.2016

#КонецОбласти

#КонецОбласти

#Область УнифицированнаяФормаТ13

//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000006781
//Модифицируем запрос на выборку данных
Процедура УнифицированнаяФормаТ13_ИзменениеЗапросаСхемыСКД(Отчет)
	
	СхемаКомпоновки = Отчет.СхемаКомпоновкиДанных;
	
	НаборДанныхДанныеОВремени = СхемаКомпоновки.НаборыДанных.ДанныеОВремени;
	
	Если Не СтрНайти(НаборДанныхДанныеОВремени.Запрос, "ВТСостоянияСотрудниковАФМ") = 0 Тогда
		// Схема уже изменена.
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(НаборДанныхДанныеОВремени.Запрос);
	ИндексЗамещаемогоЗапроса = СхемаЗапроса.ПакетЗапросов.Количество();
	
	//модификация запроса
	ТекстЗапросаРезультат = "";
	Для Индекс = 0 По ИндексЗамещаемогоЗапроса - 1 Цикл
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов[Индекс];
		ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
		Если СокрЛП(ЗапросПакета.ТаблицаДляПомещения)="ВТСостоянияСотрудников" Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) = ТИП(Документ.ОтпускПоУходуЗаРебенком)
			               |				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) = ТИП(Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком)
			               |			ТОГДА ДанныеСостоянийСотрудников.Регистратор.НачисленияУтверждены
			               |		КОГДА ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) = ТИП(Документ.Отпуск)
			               |				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) = ТИП(Документ.БольничныйЛист)
			               |				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) = ТИП(Документ.ОплатаДнейУходаЗаДетьмиИнвалидами)
			               |			ТОГДА ДанныеСостоянийСотрудников.Регистратор.ДокументРассчитан
			               |		КОГДА ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) = ТИП(Документ.Отгул)
			               |				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) = ТИП(Документ.ОтпускБезСохраненияОплаты)
			               |				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) = ТИП(Документ.ПростойСотрудников)
			               |				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеСостоянийСотрудников.Регистратор) = ТИП(Документ.ПрогулНеявка)
			               |			ТОГДА ДанныеСостоянийСотрудников.Регистратор.ПерерасчетВыполнен
			               |		ИНАЧЕ ИСТИНА
			               |	КОНЕЦ КАК ДокументРассчитан,
			               |	ДанныеСостоянийСотрудников.Сотрудник,
			               |	ДанныеСостоянийСотрудников.Начало КАК НачалоПериода2,
			               |	ДанныеСостоянийСотрудников.Окончание КАК ОкончаниеПериода2,
			               |	ДанныеСостоянийСотрудников.Состояние
			               |ПОМЕСТИТЬ ВТДанныеСостянийАФМ
			               |ИЗ
			               |	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
			               |ГДЕ
			               |	ДанныеСостоянийСотрудников.Начало >= &ДатаНачала
			               |	И ДанныеСостоянийСотрудников.Активность = ИСТИНА
			               |	И ДанныеСостоянийСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение)
			               |	И ДанныеСостоянийСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)
			               |	И ДанныеСостоянийСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	СостоянияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
			               |	СостоянияСотрудниковСрезПоследних.Состояние КАК Состояние,
			               |	&ДатаНачала КАК НачалоПериода,
			               |	ВЫБОР
			               |		КОГДА СостоянияСотрудниковСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			               |				ИЛИ СостоянияСотрудниковСрезПоследних.ДействуетДо > &ДатаОкончания
			               |			ТОГДА &ДатаОкончания
			               |		ИНАЧЕ СостоянияСотрудниковСрезПоследних.ДействуетДо
			               |	КОНЕЦ КАК ОкончаниеПериода,
			               |	СостоянияСотрудниковСрезПоследних.ВидВремени КАК ВидВремени,
			               |	СостоянияСотрудниковСрезПоследних.Период КАК НачалоПериода2,
			               |	СостоянияСотрудниковСрезПоследних.ДействуетДо КАК ОкончаниеПериода2
			               |ПОМЕСТИТЬ ВТСостоянияСотрудниковАФМ
			               |ИЗ
			               |	РегистрСведений.СостоянияСотрудников.СрезПоследних(
			               |			&ДатаНачала,
			               |			Сотрудник В
			               |				(ВЫБРАТЬ
			               |					СотрудникиМесяцы.Сотрудник
			               |				ИЗ
			               |					ВТСотрудникиМесяцы КАК СотрудникиМесяцы)) КАК СостоянияСотрудниковСрезПоследних
			               |ГДЕ
			               |	СостоянияСотрудниковСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение)
			               |	И СостоянияСотрудниковСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)
			               |	И СостоянияСотрудниковСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	СостоянияСотрудников.Сотрудник,
			               |	СостоянияСотрудников.Состояние,
			               |	СостоянияСотрудников.Период,
			               |	ВЫБОР
			               |		КОГДА СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			               |				ИЛИ СостоянияСотрудников.ДействуетДо > &ДатаОкончания
			               |			ТОГДА &ДатаОкончания
			               |		ИНАЧЕ СостоянияСотрудников.ДействуетДо
			               |	КОНЕЦ,
			               |	СостоянияСотрудников.ВидВремени,
			               |	СостоянияСотрудников.Период,
			               |	СостоянияСотрудников.ДействуетДо
			               |ИЗ
			               |	ВТСотрудникиМесяцы КАК Сотрудники
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
			               |		ПО Сотрудники.Сотрудник = СостоянияСотрудников.Сотрудник
			               |			И Сотрудники.ДатаНачала < СостоянияСотрудников.Период
			               |			И Сотрудники.ДатаОкончания >= СостоянияСотрудников.Период
			               |			И (СостоянияСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение))
			               |			И (СостоянияСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа))
			               |			И (СостоянияСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком))
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТСостоянияСотрудниковАФМ.Сотрудник,
			               |	ВТСостоянияСотрудниковАФМ.Состояние,
			               |	ВТСостоянияСотрудниковАФМ.НачалоПериода,
			               |	ВТСостоянияСотрудниковАФМ.ОкончаниеПериода,
			               |	ВТСостоянияСотрудниковАФМ.ВидВремени
			               |ПОМЕСТИТЬ ВТСостоянияСотрудников
			               |ИЗ
			               |	ВТСостоянияСотрудниковАФМ КАК ВТСостоянияСотрудниковАФМ
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСостянийАФМ КАК ВТДанныеСостянийАФМ
			               |		ПО ВТСостоянияСотрудниковАФМ.Сотрудник = ВТДанныеСостянийАФМ.Сотрудник
			               |			И ВТСостоянияСотрудниковАФМ.Состояние = ВТДанныеСостянийАФМ.Состояние
			               |			И ВТСостоянияСотрудниковАФМ.НачалоПериода2 = ВТДанныеСостянийАФМ.НачалоПериода2
			               |			И ВТСостоянияСотрудниковАФМ.ОкончаниеПериода2 = ВТДанныеСостянийАФМ.ОкончаниеПериода2
			               |ГДЕ
			               |	ЕСТЬNULL(ВТДанныеСостянийАФМ.ДокументРассчитан, ИСТИНА) = ИСТИНА";
		КонецЕсли;
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаРезультат, ТекстЗапроса);	
	КонецЦикла;
	НаборДанныхДанныеОВремени.Запрос = ТекстЗапросаРезультат;
	
КонецПроцедуры
//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000006781

#КонецОбласти

#Область ШтатноеРасписаниеНачисления

//--> АФМ-Серверс Дебов-Уфимцев Заявка №000000008962
Процедура ШтатноеРасписаниеНачисления_ТЗ_ВывестиРезультат(Отчет, ДокументРезультат, СтандартнаяОбработка)
	
	Попытка
		
		КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
		
		СтандартнаяОбработка = Ложь;
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ3";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.НачатьАвтогруппировкуСтрок(); 
		
		Если НЕ КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("НомерДокумента") Тогда
			ДокументРезультат.Очистить();
		КонецЕсли;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		//--> АФМ-Серверс
		ШтатноеРасписаниеНачисления_ТЗ_ИзменитьНастройки(НастройкиОтчета);
		//<-- АФМ-Серверс
		
		НастройкиОтчета.ПараметрыВывода.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГоризонтальноеРасположениеОбщихИтогов"), РасположениеИтоговКомпоновкиДанных.Нет);
		НастройкиОтчета.ПараметрыВывода.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВертикальноеРасположениеОбщихИтогов"), РасположениеИтоговКомпоновкиДанных.Нет);
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаАктуальности"));
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДатаАктуальности") Тогда
			ЗначениеПараметра.Значение = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДатаАктуальности;
		КонецЕсли; 
		
		Если ЗначениеПараметра <> Неопределено Тогда
			Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("Дата") 
				Или ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартнаяДатаНачала") Тогда
				ДатаАктуальности = Дата(ЗначениеПараметра.Значение);
				Если ДатаАктуальности = '00010101' Тогда
					ЗначениеПараметра.Значение = ТекущаяДатаСеанса();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НастройкиШтатногоРасписания = УправлениеШтатнымРасписанием.НастройкиШтатногоРасписания();
		ПредставлениеТарифовИНадбавок = НастройкиШтатногоРасписания.ПредставлениеТарифовИНадбавок;
		
		ЗначениеПараметраВРРайонныйКоэффициент = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВРРайонныйКоэффициент"));
		ЗначениеПараметраВРРайонныйКоэффициент.Значение = РасчетЗарплаты.НачислениеРайонныйКоэффициент();
		ЗначениеПараметраВРРайонныйКоэффициент.Использование = Истина;
		
		ЗначениеПараметраИспользоватьВилкуСтавокВШтатномРасписании = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИспользоватьВилкуСтавокВШтатномРасписании"));
		ЗначениеПараметраИспользоватьВилкуСтавокВШтатномРасписании.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
		ЗначениеПараметраИспользоватьВилкуСтавокВШтатномРасписании.Использование = Истина;
		
		Данные = Новый ДеревоЗначений;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Отчет.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Данные);
		
		// Выведем данные
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		Для Каждого СтрокаОрганизации Из Данные.Строки Цикл
			ШтатноеРасписаниеНачисления_ТЗ_ВывестиМакетыСГруппировкамиТ3(ДокументРезультат, СтрокаОрганизации, ДатаАктуальности, ПредставлениеТарифовИНадбавок, КомпоновщикНастроек);
		КонецЦикла;
		
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета Т-3 внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;
		
КонецПроцедуры
	
Процедура ШтатноеРасписаниеНачисления_ТЗ_ВывестиМакетыСГруппировкамиТ3(ДокументРезультат, Данные, ДатаАктуальности, ПредставлениеТарифовИНадбавок, КомпоновщикНастроек)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ШтатноеРасписаниеНачисления.АФМ_ПФ_MXL_Т3");
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	СписокНадбавок = Новый СписокЗначений;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Для Каждого СтрокаФункциональныйБлок Из Данные.Строки Цикл
			Для Каждого СтрокаПодразделениеОрганизации Из СтрокаФункциональныйБлок.Строки Цикл
				Для Каждого СтрокаПозиции Из СтрокаПодразделениеОрганизации.Строки Цикл
					Для каждого СтрокаНадбавки Из СтрокаПозиции.Строки Цикл
						Если СтрокаНадбавки.Начисление = NULL Тогда
							Продолжить;
						КонецЕсли; 
						Если СписокНадбавок.НайтиПоЗначению(СтрокаНадбавки.Начисление) = Неопределено Тогда
							СписокНадбавок.Добавить(СтрокаНадбавки.Начисление, СтрокаНадбавки.Начисление);
						КонецЕсли; 
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли; 
	
	ШтатноеРасписаниеНачисления_ТЗ_ВывестиШапкуДокументаТ3(ДокументРезультат, Данные, СписокНадбавок, Макет, КомпоновщикНастроек);
	ШтатноеРасписаниеНачисления_ТЗ_ВывестиТабличнуюЧастьТ3(ДокументРезультат, Данные.Строки, СписокНадбавок, Макет, ПредставлениеТарифовИНадбавок);
	ШтатноеРасписаниеНачисления_ТЗ_ВывестиПодвалДокументаТ3(ДокументРезультат, Данные, СписокНадбавок, Макет, ДатаАктуальности, КомпоновщикНастроек);

КонецПроцедуры

Процедура ШтатноеРасписаниеНачисления_ТЗ_ВывестиШапкуДокументаТ3(ДокументРезультат, Данные, СписокНадбавок, Макет, КомпоновщикНастроек)
	
	Шапка = Макет.ПолучитьОбласть("Шапка|ДоНадбавок");
	ШапкаНадбавка = Макет.ПолучитьОбласть("Шапка|Надбавка");
	ШапкаПослеНадбавок = Макет.ПолучитьОбласть("Шапка|ПослеНадбавок");
	Шапка.Параметры.Заполнить(Данные);
	ШапкаПослеНадбавок.Параметры.Заполнить(Данные);
	
	Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДатаАктуальности") Тогда
		ДатаОтчета = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДатаАктуальности;
	Иначе
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаАктуальности"));
		ДатаОтчета = ЗначениеПараметра.Значение;
		Если Не ЗначениеЗаполнено(ДатаОтчета) Тогда
			ДатаОтчета = ТекущаяДатаСеанса();
		КонецЕсли; 
	КонецЕсли; 
	Если ТипЗнч(ДатаОтчета) = Тип("СтандартнаяДатаНачала") Тогда
		ДатаОтчета = ДатаОтчета.Дата;
	КонецЕсли; 
	
	Шапка.Параметры.ДатаАктуальности = Формат(ДатаОтчета, "ДЛФ=DD");
	
	Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("НомерДокумента") Тогда
		Шапка.Параметры.НомерДокумента 
			= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.НомерДокумента, Истина, Истина);
	КонецЕсли;
	
	Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДатаДокумента") Тогда
		Шапка.Параметры.ДатаДокумента = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДатаДокумента;
	КонецЕсли;
	
	ШтатноеРасписаниеНачисления_ТЗ_ИзменитьПараметрыОбластьШапка(Шапка, КомпоновщикНастроек);
	
	ДокументРезультат.Вывести(Шапка);
	
	НомерКолонки = 6;
	Для Каждого ДанныеНадбавки Из СписокНадбавок Цикл
		ДокументРезультат.Присоединить(ШапкаНадбавка);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Пока НомерКолонки < 9 Цикл
		ДокументРезультат.Присоединить(ШапкаНадбавка);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	ШапкаПослеНадбавок.Параметры.КоличествоСтавок = Данные.Строки.Итог("КоличествоСтавок");

	ШтатноеРасписаниеНачисления_ТЗ_ИзменитьПараметрыОбластьШапкаПослеНадбавок(ШапкаПослеНадбавок, Данные);

	ДокументРезультат.Присоединить(ШапкаПослеНадбавок);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеНачисления_ТЗ_ВывестиТабличнуюЧастьТ3(ДокументРезультат, Данные, СписокНадбавок, Макет, ПредставлениеТарифовИНадбавок)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ФОИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий = 
		ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании");
	
	ИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	СтрокаДоНадбавок = Макет.ПолучитьОбласть("Строка|ДоНадбавок");
	СтрокаНадбавки = Макет.ПолучитьОбласть("Строка|Надбавка");
	СтрокаПослеНадбавок = Макет.ПолучитьОбласть("Строка|ПослеНадбавок");
	ПодвалЛистаДоНадбавок = Макет.ПолучитьОбласть("ПодвалЛиста|ДоНадбавок");;
	ПодвалЛистаНадбавки = Макет.ПолучитьОбласть("ПодвалЛиста|Надбавка");;
	ПодвалЛистаПослеНадбавок = Макет.ПолучитьОбласть("ПодвалЛиста|ПослеНадбавок");;
	Подвал = Макет.ПолучитьОбласть("Подвал");;
	Подписи = Макет.ПолучитьОбласть("Подписи");
	
	ОбластьПодвалЦИУС		= Макет.ПолучитьОбласть("ПодвалЦИУС|ДоНадбавок");
	ОбластьПодвалКатегории	= Макет.ПолучитьОбласть("ПодвалКатегории|ДоНадбавок");
	ОбластьШапкаЛиста		= Макет.ПолучитьОбласть("ШапкаЛиста|ДоНадбавок");
	
	ОбластьФункциональныйБлокДоНадбавок				= Макет.ПолучитьОбласть("ФункциональныйБлок|ДоНадбавок");
	ОбластьФункциональныйБлокНадбавка				= Макет.ПолучитьОбласть("ФункциональныйБлок|Надбавка");
	ОбластьФункциональныйБлокПослеНадбавок			= Макет.ПолучитьОбласть("ФункциональныйБлок|ПослеНадбавок");
	
	ОбластьПодразделениеОрганизацииДоНадбавок		= Макет.ПолучитьОбласть("ПодразделениеОрганизации|ДоНадбавок");
	ОбластьПодразделениеОрганизацииНадбавка			= Макет.ПолучитьОбласть("ПодразделениеОрганизации|Надбавка");
	ОбластьПодразделениеОрганизацииПослеНадбавок	= Макет.ПолучитьОбласть("ПодразделениеОрганизации|ПослеНадбавок");
	
	ОбластьПодвалФункциональныйБлокДоНадбавок			= Макет.ПолучитьОбласть("ПодвалФункциональныйБлок|ДоНадбавок");
	ОбластьПодвалФункциональныйБлокНадбавка				= Макет.ПолучитьОбласть("ПодвалФункциональныйБлок|Надбавка");
	ОбластьПодвалФункциональныйБлокПослеНадбавок		= Макет.ПолучитьОбласть("ПодвалФункциональныйБлок|ПослеНадбавок");
	
	ОбластьПодвалПодразделениеОрганизацииДоНадбавок		= Макет.ПолучитьОбласть("ПодвалПодразделениеОрганизации|ДоНадбавок");
	ОбластьПодвалПодразделениеОрганизацииНадбавка		= Макет.ПолучитьОбласть("ПодвалПодразделениеОрганизации|Надбавка");
	ОбластьПодвалПодразделениеОрганизацииПослеНадбавок	= Макет.ПолучитьОбласть("ПодвалПодразделениеОрганизации|ПослеНадбавок");

	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(СтрокаДоНадбавок);
	МассивОбластей.Добавить(ОбластьПодвалПодразделениеОрганизацииДоНадбавок);
	МассивОбластей.Добавить(ОбластьПодвалФункциональныйБлокДоНадбавок);
	МассивОбластей.Добавить(ОбластьПодвалЦИУС);
	МассивОбластей.Добавить(ОбластьПодвалКатегории);

	МассивОбластейФункциональныйБлок = Новый Массив;
	МассивОбластейФункциональныйБлок.Добавить(ОбластьПодвалФункциональныйБлокДоНадбавок);
	МассивОбластейФункциональныйБлок.Добавить(ОбластьПодвалПодразделениеОрганизацииДоНадбавок);
	МассивОбластейФункциональныйБлок.Добавить(ОбластьШапкаЛиста);
	
	МассивОбластейПодразделениеОрганизации = Новый Массив;
	МассивОбластейФункциональныйБлок.Добавить(ОбластьПодвалПодразделениеОрганизацииДоНадбавок);
	МассивОбластейПодразделениеОрганизации.Добавить(ОбластьШапкаЛиста);

	ВсегоПоСтраницеКоличествоСтавок = 0;
	ВсегоКоличествоСтавок = 0;
	
	Если ИспользоватьВилкуСтавокВШтатномРасписании Тогда
		ВсегоПоСтраницеМесячныйФондМинимальный = 0;
		ВсегоМесячныйФондМинимальный = 0;
		ВсегоПоСтраницеМесячныйФондМаксимальный = 0;
		ВсегоМесячныйФондМаксимальный = 0;
		ВсегоПоСтраницеМесячныйФонд = Неопределено;
		ВсегоМесячныйФонд = Неопределено;
	Иначе
		ВсегоПоСтраницеМесячныйФонд = 0;
		ВсегоМесячныйФонд = 0;
	КонецЕсли;
	
	ВывестиШапкуТаблицы = Истина;

	МассивПараметров = СтрРазделить("КоличествоСтавок,ОкладТариф,МесячныйФонд", ",");
	
	ШтатноеРасписаниеНачисления_ТЗ_ВывестиШапкуТаблицыТ3(ДокументРезультат, СписокНадбавок, Макет);
	ВывестиШапкуТаблицы = Ложь;
	
	Для Каждого СтрокаФункциональныйБлок Из Данные Цикл
		
		Если Не ДокументРезультат.ПроверитьВывод(МассивОбластейФункциональныйБлок) Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 

		ОбластьФункциональныйБлокДоНадбавок.Параметры.ФункциональныйБлок = СтрокаФункциональныйБлок.ФункциональныйБлок;
		ШтатноеРасписаниеНачисления_ТЗ_ВывестиСоставныеОбласти(ДокументРезультат, ОбластьФункциональныйБлокДоНадбавок, ОбластьФункциональныйБлокНадбавка, ОбластьФункциональныйБлокПослеНадбавок);
		
		Для Каждого СтрокаПодразделениеОрганизации Из СтрокаФункциональныйБлок.Строки Цикл
			
			Если Не ДокументРезультат.ПроверитьВывод(МассивОбластейПодразделениеОрганизации) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли; 

			//--> Игорь
			ОбластьПодразделениеОрганизацииДоНадбавок.Параметры.ПодразделениеОрганизации = СтрокаПодразделениеОрганизации.ПодразделениеГруппа;
			//<-- Игорь
			ШтатноеРасписаниеНачисления_ТЗ_ВывестиСоставныеОбласти(ДокументРезультат, ОбластьПодразделениеОрганизацииДоНадбавок, ОбластьПодразделениеОрганизацииНадбавка, ОбластьПодразделениеОрганизацииПослеНадбавок);
			
			Для Каждого СтрокаДанных Из СтрокаПодразделениеОрганизации.Строки Цикл

				Если НЕ ДокументРезультат.ПроверитьВывод(МассивОбластей) Тогда

					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ВывестиШапкуТаблицы = Истина;
					ВсегоПоСтраницеКоличествоСтавок = 0;
			
					Если ИспользоватьВилкуСтавокВШтатномРасписании Тогда
						ВсегоПоСтраницеМесячныйФондМинимальный = 0;
						ВсегоПоСтраницеМесячныйФондМаксимальный = 0;
					Иначе
						ВсегоПоСтраницеМесячныйФонд = 0;
					КонецЕсли;
			
				КонецЕсли; 
		
				Если ВывестиШапкуТаблицы Тогда
					//--> Игорь
					//	не выводим шапку на каждом листе
					//ШтатноеРасписаниеНачисления_ТЗ_ВывестиШапкуТаблицыТ3(ДокументРезультат, СписокНадбавок, Макет);
					//<-- Игорь
					ВывестиШапкуТаблицы = Ложь;
				КонецЕсли;
		
				ВсегоКоличествоСтавок = ВсегоКоличествоСтавок + СтрокаДанных.КоличествоСтавок;
				ВсегоПоСтраницеКоличествоСтавок = ВсегоПоСтраницеКоличествоСтавок + СтрокаДанных.КоличествоСтавок;
		
				Если ИспользоватьВилкуСтавокВШтатномРасписании Тогда
					ВсегоПоСтраницеМесячныйФондМинимальный = ВсегоПоСтраницеМесячныйФондМинимальный + СтрокаДанных.ФОТПоПозицииМин;
					ВсегоМесячныйФондМинимальный = ВсегоМесячныйФондМинимальный + СтрокаДанных.ФОТПоПозицииМин;
					ВсегоПоСтраницеМесячныйФондМаксимальный = ВсегоПоСтраницеМесячныйФондМаксимальный + СтрокаДанных.ФОТПоПозицииМакс;
					ВсегоМесячныйФондМаксимальный = ВсегоМесячныйФондМаксимальный + СтрокаДанных.ФОТПоПозицииМакс;
				Иначе
					ВсегоПоСтраницеМесячныйФонд = ВсегоПоСтраницеМесячныйФонд + СтрокаДанных.ФОТПоПозиции;
					ВсегоМесячныйФонд = ВсегоМесячныйФонд + СтрокаДанных.ФОТПоПозиции;
				КонецЕсли;
		
				СтрокаДоНадбавок.Параметры.Заполнить(СтрокаДанных);
				Если ФОИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий Тогда
					Если ЗначениеЗаполнено(СтрокаДанных.РазрядКатегория) Тогда
						СтрокаДоНадбавок.Параметры.Должность = Строка(СтрокаДанных.Должность) + ", " + СтрокаДанных.РазрядКатегория;
					КонецЕсли;
				КонецЕсли;
				СтрокаДоНадбавок.Параметры.КоличествоСтавок = Формат(СтрокаДанных.КоличествоСтавок, УправлениеШтатнымРасписанием.ФорматКоличестваСтавок());
				СтрокаДоНадбавок.Параметры.ПодразделениеКод = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаДанных.ПодразделениеКод, Истина, Истина);
		
				Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
					Если ИспользоватьВилкуСтавокВШтатномРасписании Тогда
						СтрокаДанных.ОкладТариф = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(СтрокаДанных.ОкладТарифМин, СтрокаДанных.ОкладТарифМакс);
					Иначе
						СтрокаДанных.ОкладТариф = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(СтрокаДанных.ОкладТариф, СтрокаДанных.ОкладТариф);
					КонецЕсли;
					СтрокаДоНадбавок.Параметры.ОкладТарифнаяСтавка = СтрокаДанных.ОкладТариф;
				КонецЕсли;
		
				Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(СтрокаДанных.Подразделение) Тогда
					СтрокаДоНадбавок.Параметры.Подразделение = СтрокаДанных.Подразделение.ПолноеНаименование();
				КонецЕсли;
		
				ДокументРезультат.Вывести(СтрокаДоНадбавок, 2);
		
				НомерКолонки = 6;
				Для Каждого ДанныеНадбавки Из СписокНадбавок Цикл
			
					СтрокаДанныхНадбавки = СтрокаДанных.Строки.Найти(ДанныеНадбавки.Значение, "Начисление");
					Если СтрокаДанныхНадбавки <> Неопределено Тогда
						СтрокаНадбавки.Параметры.Заполнить(СтрокаДанныхНадбавки);
						СтрокаНадбавки.Параметры.РазмерНадбавки = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеРазмераНадбавки(
						СтрокаДанныхНадбавки, ПредставлениеТарифовИНадбавок, ИспользоватьВилкуСтавокВШтатномРасписании);
					Иначе
						СтрокаНадбавки.Параметры.РазмерНадбавки = "";
					КонецЕсли;
					
					ДокументРезультат.Присоединить(СтрокаНадбавки);
					НомерКолонки = НомерКолонки + 1;
					
				КонецЦикла;
		
				СтрокаНадбавки = Макет.ПолучитьОбласть("Строка|Надбавка");
				Пока НомерКолонки < 9 Цикл
					ДокументРезультат.Присоединить(СтрокаНадбавки);
					НомерКолонки = НомерКолонки + 1;
				КонецЦикла;
		
				Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
					СтрокаПослеНадбавок.Параметры.Заполнить(СтрокаДанных);
					Если ИспользоватьВилкуСтавокВШтатномРасписании Тогда
						СтрокаДанных.МесячныйФонд = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(СтрокаДанных.ФОТПоПозицииМин, СтрокаДанных.ФОТПоПозицииМакс);
					Иначе
						СтрокаДанных.МесячныйФонд = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(СтрокаДанных.ФОТПоПозиции, СтрокаДанных.ФОТПоПозиции);
					КонецЕсли;
					СтрокаПослеНадбавок.Параметры.МесячныйФонд = СтрокаДанных.МесячныйФонд;
				КонецЕсли;
				
				ДокументРезультат.Присоединить(СтрокаПослеНадбавок);
				
			КонецЦикла;

			//--> Игорь
			ОбластьПодвалПодразделениеОрганизацииДоНадбавок.Параметры.ПодразделениеОрганизации	= СтрокаПодразделениеОрганизации.ПодразделениеГруппа;
			//<-- Игорь
			ШтатноеРасписаниеНачисления_ТЗ_ЗаполнитьПараметрыИтогов(ОбластьПодвалПодразделениеОрганизацииДоНадбавок, МассивПараметров, СтрокаПодразделениеОрганизации);
			ШтатноеРасписаниеНачисления_ТЗ_ЗаполнитьПараметрыИтогов(ОбластьПодвалПодразделениеОрганизацииПослеНадбавок, МассивПараметров, СтрокаПодразделениеОрганизации);
			
			ШтатноеРасписаниеНачисления_ТЗ_ВывестиСоставныеОбласти(ДокументРезультат, ОбластьПодвалПодразделениеОрганизацииДоНадбавок, ОбластьПодвалПодразделениеОрганизацииНадбавка, ОбластьПодвалПодразделениеОрганизацииПослеНадбавок);
		КонецЦикла;
		
		ОбластьПодвалФункциональныйБлокДоНадбавок.Параметры.ФункциональныйБлок	= СтрокаФункциональныйБлок.ФункциональныйБлок;
		ШтатноеРасписаниеНачисления_ТЗ_ЗаполнитьПараметрыИтогов(ОбластьПодвалФункциональныйБлокДоНадбавок, МассивПараметров, СтрокаФункциональныйБлок);
		ШтатноеРасписаниеНачисления_ТЗ_ЗаполнитьПараметрыИтогов(ОбластьПодвалФункциональныйБлокПослеНадбавок, МассивПараметров, СтрокаФункциональныйБлок);
		
		ШтатноеРасписаниеНачисления_ТЗ_ВывестиСоставныеОбласти(ДокументРезультат, ОбластьПодвалФункциональныйБлокДоНадбавок, ОбластьПодвалФункциональныйБлокНадбавка, ОбластьПодвалФункциональныйБлокПослеНадбавок);
	КонецЦикла;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеНачисления_ТЗ_ВывестиШапкуТаблицыТ3(ДокументРезультат, СписокНадбавок, Макет)
	
	ЗаголовокТаблицыДоНадбавок = Макет.ПолучитьОбласть("ШапкаЛиста|ДоНадбавок");
	ЗаголовокТаблицыНадбавки = Макет.ПолучитьОбласть("ШапкаЛиста|Надбавка");
	ЗаголовокТаблицыПослеНадбавок = Макет.ПолучитьОбласть("ШапкаЛиста|ПослеНадбавок");
	ДокументРезультат.Вывести(ЗаголовокТаблицыДоНадбавок, 2);
	НомерКолонки = 6;
	Для Каждого ДанныеНадбавки Из СписокНадбавок Цикл
		ЗаголовокТаблицыНадбавки.Параметры.ИмяНадбавки = ДанныеНадбавки.Представление;
		ЗаголовокТаблицыНадбавки.Параметры.НомерКолонки = НомерКолонки;
		ДокументРезультат.Присоединить(ЗаголовокТаблицыНадбавки);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла; 
	ЗаголовокТаблицыНадбавки = Макет.ПолучитьОбласть("ШапкаЛиста|Надбавка");
	Пока НомерКолонки < 9 Цикл
		ЗаголовокТаблицыНадбавки.Параметры.НомерКолонки = НомерКолонки;
		ДокументРезультат.Присоединить(ЗаголовокТаблицыНадбавки);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	//--> Игорь
	ОбластьЗаголовкаНадбавок = ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 2, 9 , ДокументРезультат.ВысотаТаблицы - 2, 9 + (НомерКолонки - 6) * 3 - 1);
	//<-- Игорь
	ОбластьЗаголовкаНадбавок.Объединить();
	ОбластьЗаголовкаНадбавок.Текст = НСтр("ru = 'Надбавка, руб.'");
	ЗаголовокТаблицыПослеНадбавок.Параметры.НомерКолонкиФонд = НомерКолонки;
	ЗаголовокТаблицыПослеНадбавок.Параметры.НомерКолонкиПримечание = НомерКолонки + 1;
	ДокументРезультат.Присоединить(ЗаголовокТаблицыПослеНадбавок);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеНачисления_ТЗ_ВывестиПодвалДокументаТ3(ДокументРезультат, Данные, СписокНадбавок, Макет, ДатаАктуальности, КомпоновщикНастроек)
	
	ПодвалДоНадбавок	= Макет.ПолучитьОбласть("ПодвалЦИУС|ДоНадбавок");
	ПодвалНадбавки		= Макет.ПолучитьОбласть("ПодвалЦИУС|Надбавка");
	ПодвалПослеНадбавок	= Макет.ПолучитьОбласть("ПодвалЦИУС|ПослеНадбавок");
	ПодвалКатегорииДоНадбавок		= Макет.ПолучитьОбласть("ПодвалКатегории|ДоНадбавок");
	ПодвалКатегорииНадбавки			= Макет.ПолучитьОбласть("ПодвалКатегории|Надбавка");
	ПодвалКатегорииПослеНадбавок	= Макет.ПолучитьОбласть("ПодвалКатегории|ПослеНадбавок");
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(ПодвалКатегорииДоНадбавок);
	МассивОбластей.Добавить(ПодвалКатегорииПослеНадбавок);
	Подписи = Макет.ПолучитьОбласть("Подписи");
	ПодвалДоНадбавок.Параметры.КоличествоСтавок	= Формат(ШтатноеРасписаниеНачисления_ТЗ_ИтогПоДереву(Данные, "КоличествоСтавок"), УправлениеШтатнымРасписанием.ФорматКоличестваСтавок());
	ПодвалДоНадбавок.Параметры.ОкладТариф		= ШтатноеРасписаниеНачисления_ТЗ_ИтогПоДереву(Данные, "ОкладТариф");

	ДокументРезультат.Вывести(ПодвалДоНадбавок);
	НомерКолонки = 6;
	Для Каждого ДанныеНадбавки Из СписокНадбавок Цикл
		ДокументРезультат.Присоединить(ПодвалНадбавки);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	Пока НомерКолонки < 9 Цикл
		ДокументРезультат.Присоединить(ПодвалНадбавки);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	МесячныйФонд = "";
	МесячныйФондМинимальный = 0;
	МесячныйФондМаксимальный = 0;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Для Каждого СтрокаФункциональныйБлок Из Данные.Строки Цикл
		Для Каждого СтрокаПодразделениеОрганизации Из СтрокаФункциональныйБлок.Строки Цикл
		Для Каждого СтрокаДанных Из СтрокаподразделениеОрганизации.Строки Цикл
			МесячныйФондМинимальный = МесячныйФондМинимальный + СтрокаДанных.ФОТПоПозицииМин;
			МесячныйФондМаксимальный = МесячныйФондМаксимальный + СтрокаДанных.ФОТПоПозицииМакс;
		КонецЦикла;
		КонецЦикла;
		КонецЦикла;
	КонецЕсли; 
	МесячныйФонд = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(МесячныйФондМинимальный, МесячныйФондМаксимальный);
	ПодвалПослеНадбавок.Параметры.МесячныйФонд = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(МесячныйФонд, МесячныйФонд);
	ДокументРезультат.Присоединить(ПодвалПослеНадбавок);

	ШтатноеРасписаниеНачисления_ТЗ_ЗаполнитьКатегорииВПодвале(Данные, МассивОбластей);
	ШтатноеРасписаниеНачисления_ТЗ_ВывестиСоставныеОбласти(ДокументРезультат, ПодвалКатегорииДоНадбавок, ПодвалКатегорииНадбавки, ПодвалКатегорииПослеНадбавок);

	Подписи.Параметры.Заполнить(ШтатноеРасписаниеНачисления_ТЗ_СведенияОПодписантах(Данные.Организация, ?(ЗначениеЗаполнено(ДатаАктуальности), ДатаАктуальности, ТекущаяДатаСеанса()), КомпоновщикНастроек));
	
	ДокументРезультат.Вывести(Подписи);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеНачисления_ТЗ_ВывестиСоставныеОбласти(ТабличныйДокумент, ОбластьДо, Область, ОбластьПосле);
	КоличествоКолонокНадбавки = 3;
	ТабличныйДокумент.Вывести(ОбластьДо);
	Для н = 1 По КоличествоКолонокНадбавки  Цикл
		ТабличныйДокумент.Присоединить(Область);	
	КонецЦикла;
	ТабличныйДокумент.Присоединить(ОбластьПосле);
КонецПроцедуры

Функция ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(МинимальноеЗначение, МаксимальноеЗначение, Точность = 2)
	
	Если МинимальноеЗначение = МаксимальноеЗначение Тогда
		
		Возврат Формат(МинимальноеЗначение, "ЧЦ=15; ЧДЦ=" + Точность);
		
	ИначеЕсли МинимальноеЗначение = 0 Тогда
		
		Возврат Формат(МаксимальноеЗначение, "ЧЦ=15; ЧДЦ=" + Точность);
		
	ИначеЕсли МаксимальноеЗначение = 0 Тогда
		
		Возврат Формат(МинимальноеЗначение, "ЧЦ=15; ЧДЦ=" + Точность);
		
	Иначе
		
		Возврат Формат(МинимальноеЗначение, "ЧЦ=15; ЧДЦ=" + Точность) + " - " + Формат(МаксимальноеЗначение, "ЧЦ=15; ЧДЦ=" + Точность);
		
	КонецЕсли;
	
КонецФункции

Функция ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеРазмераНадбавки(СтрокаДанныхНадбавки, ПредставлениеТарифовИНадбавок, ИспользоватьВилкуСтавокВШтатномРасписании)
	
	ПредставлениеРазмераВКоэффициентах = "";
	Если НЕ ЗначениеЗаполнено(ПредставлениеТарифовИНадбавок)
		ИЛИ ПредставлениеТарифовИНадбавок = Перечисления.ПредставлениеТарифовИНадбавок.ТарифыКоэффициенты
		ИЛИ ПредставлениеТарифовИНадбавок = Перечисления.ПредставлениеТарифовИНадбавок.МесячныйРазмерВРубляхИТарифыКоэффициенты  Тогда
		
		Если ИспользоватьВилкуСтавокВШтатномРасписании Тогда
			
			ПредставлениеРазмераВКоэффициентах = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(
				СтрокаДанныхНадбавки.ЗначениеМин, СтрокаДанныхНадбавки.ЗначениеМакс, СтрокаДанныхНадбавки.ПоказательТочность);
				
		Иначе
			
			ПредставлениеРазмераВКоэффициентах = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(
				СтрокаДанныхНадбавки.Значение, СтрокаДанныхНадбавки.Значение, СтрокаДанныхНадбавки.ПоказательТочность);
				
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеРазмераВРублях = "";
	Если ПредставлениеТарифовИНадбавок = Перечисления.ПредставлениеТарифовИНадбавок.МесячныйРазмерВРублях
		ИЛИ ПредставлениеТарифовИНадбавок = Перечисления.ПредставлениеТарифовИНадбавок.МесячныйРазмерВРубляхИТарифыКоэффициенты Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанныхНадбавки.КоличествоСтавок) И СтрокаДанныхНадбавки.КоличествоСтавок <> 0 Тогда
			
			Если ИспользоватьВилкуСтавокВШтатномРасписании Тогда
				
				ПредставлениеРазмераВРублях = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(
					СтрокаДанныхНадбавки.ФОТПоПозицииМин / СтрокаДанныхНадбавки.КоличествоСтавок,
					СтрокаДанныхНадбавки.ФОТПоПозицииМакс / СтрокаДанныхНадбавки.КоличествоСтавок);
					
			Иначе
					
				ПредставлениеРазмераВРублях = ШтатноеРасписаниеНачисления_ТЗ_ПредставлениеЗначенийТ3(
					СтрокаДанныхНадбавки.ФОТПоПозиции / СтрокаДанныхНадбавки.КоличествоСтавок,
					СтрокаДанныхНадбавки.ФОТПоПозиции / СтрокаДанныхНадбавки.КоличествоСтавок);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПредставлениеТарифовИНадбавок = Перечисления.ПредставлениеТарифовИНадбавок.МесячныйРазмерВРублях Тогда
		
		Возврат ПредставлениеРазмераВРублях;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПредставлениеТарифовИНадбавок)
		ИЛИ ПредставлениеТарифовИНадбавок = Перечисления.ПредставлениеТарифовИНадбавок.ТарифыКоэффициенты Тогда
		
		Возврат ПредставлениеРазмераВКоэффициентах;
		
	КонецЕсли;
	
	Возврат ПредставлениеРазмераВРублях + ?(ПустаяСтрока(ПредставлениеРазмераВКоэффициентах), "", " (" + ПредставлениеРазмераВКоэффициентах + ")");
	
КонецФункции

Функция ШтатноеРасписаниеНачисления_ТЗ_СведенияОПодписантах(Организация, ДатаОтчета, КомпоновщикНастроек)
	
	ПараметрыЗаполнения = Новый Структура("ГлавныйБухгалтер,ГлавныйБухгалтерРасшифровкаПодписи,РуководительКадровойСлужбы,РуководительКадровойСлужбыРасшифровкаПодписи,ДолжностьРуководителяКадровойСлужбы");
	КлючиОтветственныхЛиц = "";

	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
	Если НЕ КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ГлавныйБухгалтер", ПараметрыЗаполнения.ГлавныйБухгалтер) Тогда
		
		ПараметрГлавныйБухгалтер = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГлавныйБухгалтер"));
		Если ПараметрГлавныйБухгалтер <> Неопределено И ПараметрГлавныйБухгалтер.Использование Тогда
			ПараметрыЗаполнения.ГлавныйБухгалтер = ПараметрГлавныйБухгалтер.Значение;
		Иначе
			КлючиОтветственныхЛиц = "ГлавныйБухгалтер";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если НЕ КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("РуководительКадровойСлужбы", ПараметрыЗаполнения.РуководительКадровойСлужбы) Тогда

		ПараметрРуководительКадровойСлужбы = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РуководительКадровойСлужбы"));
		Если ПараметрРуководительКадровойСлужбы <> Неопределено И ПараметрРуководительКадровойСлужбы.Использование Тогда
			ПараметрыЗаполнения.РуководительКадровойСлужбы = ПараметрРуководительКадровойСлужбы.Значение;
		Иначе
			КлючиОтветственныхЛиц = ?(ПустаяСтрока(КлючиОтветственныхЛиц), "", КлючиОтветственныхЛиц + ",") + "РуководительКадровойСлужбы";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если НЕ КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДолжностьРуководителяКадровойСлужбы", ПараметрыЗаполнения.ДолжностьРуководителяКадровойСлужбы) Тогда

		ПараметрДолжностьРуководителяКадровойСлужбы = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьРуководителяКадровойСлужбы"));
		Если ПараметрДолжностьРуководителяКадровойСлужбы <> Неопределено И ПараметрДолжностьРуководителяКадровойСлужбы.Использование Тогда
			ПараметрыЗаполнения.ДолжностьРуководителяКадровойСлужбы = ПараметрДолжностьРуководителяКадровойСлужбы.Значение;
		Иначе
			КлючиОтветственныхЛиц = ?(ПустаяСтрока(КлючиОтветственныхЛиц), "", КлючиОтветственныхЛиц + ",") + "ДолжностьРуководителяКадровойСлужбыСтрокой";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Не ПустаяСтрока(КлючиОтветственныхЛиц) Тогда
		
		ОтветственныеЛица = Новый Структура("Организация," + КлючиОтветственныхЛиц, Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ОтветственныеЛица, ДатаОтчета);
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ОтветственныеЛица);
		
		Если ОтветственныеЛица.Свойство("ДолжностьРуководителяКадровойСлужбыСтрокой")
			И ЗначениеЗаполнено(ОтветственныеЛица.ДолжностьРуководителяКадровойСлужбыСтрокой) Тогда
			
			ПараметрыЗаполнения.ДолжностьРуководителяКадровойСлужбы = ОтветственныеЛица.ДолжностьРуководителяКадровойСлужбыСтрокой;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	МассивФизЛиц = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ГлавныйБухгалтер) Тогда
		МассивФизЛиц.Добавить(ПараметрыЗаполнения.ГлавныйБухгалтер);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.РуководительКадровойСлужбы) Тогда
		МассивФизЛиц.Добавить(ПараметрыЗаполнения.РуководительКадровойСлужбы);
	КонецЕсли; 
		
	Если МассивФизЛиц.Количество() > 0 Тогда
		
		ФИОФизЛиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаОтчета, МассивФизЛиц);
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.ГлавныйБухгалтер) Тогда
			ПараметрыЗаполнения.ГлавныйБухгалтерРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИОФизЛиц[ПараметрыЗаполнения.ГлавныйБухгалтер]);
		КонецЕсли; 

		Если ЗначениеЗаполнено(ПараметрыЗаполнения.РуководительКадровойСлужбы) Тогда
			ПараметрыЗаполнения.РуководительКадровойСлужбыРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИОФизЛиц[ПараметрыЗаполнения.РуководительКадровойСлужбы]);
		КонецЕсли; 

	КонецЕсли; 
		
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ШтатноеРасписаниеНачисления_ТЗ_ИзменитьПараметрыОбластьШапка(Шапка, КомпоновщикНастроек)
	
	Если Не КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДатаДокумента") Тогда
		Шапка.Параметры.ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеНачисления_ТЗ_ИзменитьПараметрыОбластьШапкаПослеНадбавок(ШапкаПослеНадбавок, Данные)
	
	ШапкаПослеНадбавок.Параметры.ОрганизацияНаименование = Данные.Организация.НаименованиеСокращенное;
	ШапкаПослеНадбавок.Параметры.КоличествоСтавок = ШтатноеРасписаниеНачисления_ТЗ_ИтогПоДереву(Данные, "КоличествоСтавок");

КонецПроцедуры

Процедура ШтатноеРасписаниеНачисления_ТЗ_ЗаполнитьПараметрыИтогов(Область, МассивПараметров, Дерево);
	
	СтруктураПараметров = Новый Структура(СтрСоединить(МассивПараметров, ","));
	
	Для Каждого Параметр Из МассивПараметров Цикл
		СтруктураПараметров[Параметр] = ШтатноеРасписаниеНачисления_ТЗ_ИтогПоДереву(Дерево, Параметр);
	КонецЦикла;
	Область.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Функция ШтатноеРасписаниеНачисления_ТЗ_ИтогПоДереву(Дерево, Реквизит)
	
	Результат = 0;
	СтрокиДерева = Дерево.Строки;
	Если СтрокиДерева.Количество() Тогда
		Для Каждого СтрокаДерева Из СтрокиДерева  Цикл
			Результат = Результат + ШтатноеРасписаниеНачисления_ТЗ_ИтогПоДереву(СтрокаДерева, Реквизит); 
		КонецЦикла;
	Иначе
		Результат = Дерево[Реквизит];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = 0;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Процедура ШтатноеРасписаниеНачисления_ТЗ_ЗаполнитьКатегорииВПодвале(Дерево, МассивОбластей)
	
	Реквизиты = "КоличествоСтавок,ОкладТариф,МесячныйФонд";
	Категории = "Руководители,Специалисты,Рабочие";
	
	МассивКатегории = СтрРазделить(Категории, ",");
	МассивРеквизиты = СтрРазделить(Реквизиты, ",");
	МассивПараметры = Новый Массив;
	Для Каждого Реквизит Из МассивРеквизиты Цикл
		Для Каждого Категория Из МассивКатегории Цикл
			МассивПараметры.Добавить(Реквизит + Категория);
		КонецЦикла;
	КонецЦикла;
	СтрокаПараметры = СтрСоединить(МассивПараметры, ",");
	СтруктураПараметров = Новый Структура(СтрокаПараметры);
	
	СоответствиеКатегорий = Новый Соответствие();
	Для Каждого Категория Из МассивКатегории Цикл
		//-->  АФМ-Серверс Дебов Игорь
		//СоответствиеКатегорий.Вставить(Перечисления.КатегорииДолжностейДляВоинскогоУчета[Категория], Категория);
		СоответствиеКатегорий.Вставить(Перечисления.АФМ_КатегорииСтатистическогоУчета[Категория], Категория);
		//<--  АФМ-Серверс Дебов Игорь
	КонецЦикла; 
	
	СтруктураРеквизитов = ШтатноеРасписаниеНачисления_ТЗ_ЗаполненныеКатегорииВПодвале(Дерево, МассивРеквизиты, СоответствиеКатегорий, СтрокаПараметры);
	
	Для Каждого Область Из МассивОбластей Цикл
		Область.Параметры.Заполнить(СтруктураРеквизитов);
	КонецЦикла; 
	
КонецПроцедуры

Функция ШтатноеРасписаниеНачисления_ТЗ_ЗаполненныеКатегорииВПодвале(Дерево, МассивРеквизитов, СоответствиеКатегорий, СтрокаПараметры)
	
	СтруктураПараметров = Новый Структура(СтрокаПараметры);
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		СтруктураПараметров[ЭлементСтруктуры.Ключ] = 0;
	КонецЦикла; 
	
	СтрокиДерева = Дерево.Строки;
	Если СтрокиДерева.Количество() Тогда
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			СтруктураПараметровСтрока = ШтатноеРасписаниеНачисления_ТЗ_ЗаполненныеКатегорииВПодвале(СтрокаДерева, МассивРеквизитов, СоответствиеКатегорий, СтрокаПараметры);
			Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
				СтруктураПараметров[ЭлементСтруктуры.Ключ] = СтруктураПараметров[ЭлементСтруктуры.Ключ] + СтруктураПараметровСтрока[ЭлементСтруктуры.Ключ];
			КонецЦикла; 
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(Дерево.Должность) Тогда
			//-->  АФМ-Серверс Дебов Игорь
			//Если ЗначениеЗаполнено(Дерево.Должность.КатегорияВоинскогоУчета) Тогда
			Если ЗначениеЗаполнено(Дерево.Должность.АФМ_КатегорияСтатистическогоУчета) Тогда
			//<--  АФМ-Серверс Дебов Игорь
				Для Каждого Реквизит Из МассивРеквизитов Цикл
					
					//--> АФМ-Серверс Дебов Игорь
					//ИмяПараметра = Реквизит + СоответствиеКатегорий[Дерево.Должность.КатегорияВоинскогоУчета];
					ИмяПараметра = Реквизит + СоответствиеКатегорий[Дерево.Должность.АФМ_КатегорияСтатистическогоУчета];
					//<--  АФМ-Серверс Дебов Игорь
					
					Если ЗначениеЗаполнено(Дерево[Реквизит]) Тогда
						СтруктураПараметров[ИмяПараметра] = Дерево[Реквизит];
					Иначе	
						СтруктураПараметров[ИмяПараметра] = 0;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Сообщить("У должности " + СокрЛП(Дерево.Должность.Наименование) + " не заполнена категория учета");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ШтатноеРасписаниеНачисления_ТЗ_ИзменитьСхему(Отчет)
	
	//общие параметры
	СхемаКомпоновки = Отчет.СхемаКомпоновкиДанных;
	
	НаборДанныхШтатноеРасписание = СхемаКомпоновки.НаборыДанных.ШтатноеРасписание;
	
	ТекстЗапроса = НаборДанныхШтатноеРасписание.Запрос;
	
	//проверка
	Если Не СтрНайти(ТекстЗапроса, "АФМ_ФункциональныйБлок") = 0 Тогда
		// Схема уже изменена.
		Возврат;
	КонецЕсли;
	
	//преобразуем запрос для модификаций
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
			
	ЗапросВыбора	= СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	ОператорВыбор	= ЗапросВыбора.Операторы[0];
			
	//добавляем - ФункциональныйБлок
	ФункциональныйБлокПоле = "
	|ВЫБОР
	|	КОГДА ШтатноеРасписание.Подразделение.АФМ_ФункциональныйБлок.ГруппироватьВШтатномРасписании = Истина ТОГДА
	|		ШтатноеРасписание.Подразделение.АФМ_ФункциональныйБлок.Родитель
	|	ИНАЧЕ
	|		ШтатноеРасписание.Подразделение.АФМ_ФункциональныйБлок
	|КОНЕЦ";
	
	ОператорВыбор.ВыбираемыеПоля.Добавить(ФункциональныйБлокПоле);
	ЗапросВыбора.Колонки[ЗапросВыбора.Колонки.Количество() - 1].Псевдоним = "ФункциональныйБлок";
	
	//добавляем - МесячныйФонд
	ОператорВыбор.ВыбираемыеПоля.Добавить("0");
	ЗапросВыбора.Колонки[ЗапросВыбора.Колонки.Количество() - 1].Псевдоним = "МесячныйФонд";
	
	//меняем поле - подразделение
	//	раньше была группа подразделения, потом решели все делать по функциональным блокам
	ПодразделениеПолеНовое = "
	|ВЫБОР
	|	КОГДА ШтатноеРасписание.Подразделение.АФМ_ФункциональныйБлок.ГруппироватьВШтатномРасписании = Истина ТОГДА
	|		ШтатноеРасписание.Подразделение.АФМ_ФункциональныйБлок
	|	ИНАЧЕ
	|		ШтатноеРасписание.Подразделение
	|КОНЕЦ";
	
	ОператорВыбор.ВыбираемыеПоля.Добавить(ПодразделениеПолеНовое);
	ЗапросВыбора.Колонки[ЗапросВыбора.Колонки.Количество() - 1].Псевдоним = "ПодразделениеГруппа";
	
	ФункциональныйБлокНаличиеПолеНовое = "
	|ВЫБОР
	|	КОГДА ШтатноеРасписание.Подразделение.АФМ_ФункциональныйБлок.ГруппироватьВШтатномРасписании = Истина ТОГДА
	|		1
	|	ИНАЧЕ
	|		0
	|КОНЕЦ";
	
	ОператорВыбор.ВыбираемыеПоля.Добавить(ФункциональныйБлокНаличиеПолеНовое);
	ЗапросВыбора.Колонки[ЗапросВыбора.Колонки.Количество() - 1].Псевдоним = "ФункциональныйБлокНаличие";
	
	//сохраняем изменения в запросе
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	НаборДанныхШтатноеРасписание.Запрос = ТекстЗапроса;
	
	//дополнительные параметры
	КЧ = Новый КвалификаторыЧисла(15, 2);
	Массив = Новый Массив;
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, КЧ);
	
	НовоеПоле = НаборДанныхШтатноеРасписание.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок		= "Функциональный блок";
	НовоеПоле.Поле			= "ФункциональныйБлок";
	НовоеПоле.ПутьКДанным	= "ФункциональныйБлок";
	НовоеПоле.ТипЗначения	= Новый ОписаниеТипов("СправочникСсылка.АФМ_ФункциональныеБлоки");
	
	НовоеПоле = НаборДанныхШтатноеРасписание.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок		= "Месячный фонд";
	НовоеПоле.Поле			= "МесячныйФонд";
	НовоеПоле.ПутьКДанным	= "МесячныйФонд";
	НовоеПоле.ТипЗначения	= Новый ОписаниеТипов(Массив, КЧ);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеНачисления_ТЗ_ИзменитьНастройки(НастройкиОтчета)
	
	//меняем группировку в отчете
	ГруппировкаОрганизация	= НастройкиОтчета.Структура[0];
	
	ГруппировкаПослеОрганизации	= ГруппировкаОрганизация.Структура[0];
	ПолеМесячныйФонд = ГруппировкаПослеОрганизации.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеМесячныйФонд.Поле = Новый ПолеКомпоновкиДанных("МесячныйФонд");
	
	ГруппировкаНачислениеПоказатель = ГруппировкаПослеОрганизации.Структура[0];
	ГруппировкаПослеОрганизации.Структура.Удалить(ГруппировкаНачислениеПоказатель);
	
	ГруппировкаФункциональныйБлок	= ШтатноеРасписаниеНачисления_ТЗ_НоваяГруппировка(ГруппировкаОрганизация,			"ФункциональныйБлок");
	ГруппировкаПодразделение		= ШтатноеРасписаниеНачисления_ТЗ_НоваяГруппировка(ГруппировкаФункциональныйБлок,	"ФункциональныйБлокНаличие,ПодразделениеГруппа");
	
	ГруппировкаПослеПодразделения = ГруппировкаПодразделение.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));

	ШтатноеРасписаниеНачисления_ТЗ_СкопироватьГруппировку(ГруппировкаПослеПодразделения, ГруппировкаПослеОрганизации);
	
	ГруппировкаОрганизация.Структура.Удалить(ГруппировкаПослеОрганизации);
	
	//меняем сортировку (порядок) в отчете
	ПорядокВОтчете = НастройкиОтчета.Порядок.Элементы;
	ПорядокВОтчете.Очистить();
	
	ШтатноеРасписаниеНачисления_ДобавитьПорядок(ПорядокВОтчете, "Организация");
	ШтатноеРасписаниеНачисления_ДобавитьПорядок(ПорядокВОтчете, "ФункциональныйБлок.Код");
	ШтатноеРасписаниеНачисления_ДобавитьПорядок(ПорядокВОтчете, "ФункциональныйБлокНаличие");
	ШтатноеРасписаниеНачисления_ДобавитьПорядок(ПорядокВОтчете, "ПодразделениеГруппа.Код");
	ШтатноеРасписаниеНачисления_ДобавитьПорядок(ПорядокВОтчете, "Подразделение.Код");
	ШтатноеРасписаниеНачисления_ДобавитьПорядок(ПорядокВОтчете, "Позиция.АФМ_ПорядокВШтатномРасписании");
	ШтатноеРасписаниеНачисления_ДобавитьПорядок(ПорядокВОтчете, "Начисление.РеквизитДопУпорядочивания");
	ШтатноеРасписаниеНачисления_ДобавитьПорядок(ПорядокВОтчете, "Показатель.РеквизитДопУпорядочивания");
	
КонецПроцедуры

Функция ШтатноеРасписаниеНачисления_ТЗ_НоваяГруппировка(ГруппировкаРодитель, ПоляГруппировки)
	
	ПоляГруппировкиМассив = СтрРазделить(ПоляГруппировки, ",");
	
	Группировка = ГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Имя = ПоляГруппировки;
	Для Каждого ИмяПоляГруппировки Из ПоляГруппировкиМассив Цикл
		НовоеПоле = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляГруппировки);
	КонецЦикла;
	Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат Группировка;
	
КонецФункции

Процедура ШтатноеРасписаниеНачисления_ТЗ_СкопироватьГруппировку(Приемник, Источник)
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	
	КопируемыеКоллекции = СтрРазделить("Выбор,Отбор,ПараметрыВывода,ПоляГруппировки,Порядок,УсловноеОформление", ",");
	
	Для Каждого Коллекция Из КопируемыеКоллекции Цикл
		ШтатноеРасписаниеНачисления_ТЗ_СкопироватьЭлементы(Приемник[Коллекция], Источник[Коллекция]);
	КонецЦикла;
	
	Для Каждого ВложеннаяГруппировка Из Источник.Структура Цикл
		НоваяГруппировка = Приемник.Структура.Добавить(ТипЗнч(ВложеннаяГруппировка));
		ШтатноеРасписаниеНачисления_ТЗ_СкопироватьГруппировку(НоваяГруппировка, ВложеннаяГруппировка);
	КонецЦикла; 
	
КонецПроцедуры	

Процедура ШтатноеРасписаниеНачисления_ТЗ_СкопироватьЭлементы(Приемник, Источник, ОчищатьПриемник = Ложь)
	
	Если ОчищатьПриемник Тогда
		Приемник.Элементы.Очистить();
	КонецЕсли;
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Источник.Элементы Цикл
		
		ТипЭлемента		= ТипЗнч(Элемент); 
		НовыйЭлемент	= Неопределено;
		
		Если ТипЭлемента = Тип("ЭлементУсловногоОформленияКомпоновкиДанных")
			Или ТипЭлемента = Тип("ОформляемоеПолеКомпоновкиДанных") Тогда
			
			НовыйЭлемент	= Приемник.Элементы.Добавить();
			
		ИначеЕсли ТипЭлемента = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Идентификатор	= Источник.ПолучитьИдентификаторПоОбъекту(Элемент);
			Если Идентификатор <> Неопределено Тогда
				НовыйЭлемент	= Приемник.ПолучитьОбъектПоИдентификатору(Идентификатор);
			КонецЕсли;
		Иначе
			НовыйЭлемент	= Приемник.Элементы.Добавить(ТипЭлемента);
		КонецЕсли;
		
		Если НовыйЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		
		Если ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных")
			Или ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ШтатноеРасписаниеНачисления_ТЗ_СкопироватьЭлементы(НовыйЭлемент, Элемент);
			
		ИначеЕсли ТипЭлемента = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
			ШтатноеРасписаниеНачисления_ТЗ_СкопироватьЭлементы(НовыйЭлемент.Отбор, Элемент.Отбор);
			ШтатноеРасписаниеНачисления_ТЗ_СкопироватьЭлементы(НовыйЭлемент.Оформление, Элемент.Оформление);
			ШтатноеРасписаниеНачисления_ТЗ_СкопироватьЭлементы(НовыйЭлемент.Поля, Элемент.Поля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеНачисления_ДобавитьПорядок(ПорядокВОтчете, ЭлементТекст, ТипУпорядочивания = Неопределено)
	
	Если ТипУпорядочивания=Неопределено Тогда
		ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	КонецЕсли;
	
	НовыйПорядок = ПорядокВОтчете.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных(ЭлементТекст);
	НовыйПорядок.Использование = Истина;
	НовыйПорядок.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	НовыйПорядок.ТипУпорядочивания = ТипУпорядочивания;
	
КонецПроцедуры
//<-- АФМ-Серверс Дебов-Уфимцев Заявка №000000008962

#КонецОбласти

#КонецОбласти

#Область НаградыСотрудников

//--> АФМ-Серверс Дебов Игорь Заявка 000000008697 18.06.2016
Процедура НаградыСотрудников_ВыводОтчета(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Попытка
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НаградыСотрудников_2_АФМ";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		ДатаОтчета=Дата(1,1,1);
		ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если Не ПараметрПериод = Неопределено Тогда
			ДатаОтчета=ПараметрПериод.Значение.Дата;
		КонецЕсли;
		
		//изменим настройки варианта
		НаградыСотрудников_ИзменитьНастройки(НастройкиОтчета);
		
		//выполнение СКД
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Отчет.СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		//параметры отчета
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.НаградыСотрудников.АФМ_Макет_НаградыСотрудников");
		
		Макеты = Новый Структура("Шапка, ГруппировкаУровень1, ГруппировкаУровень2, СтрокаДанных");
		Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
		Макеты.ГруппировкаУровень1 = Макет.ПолучитьОбласть("ГруппировкаУровень1");
		Макеты.ГруппировкаУровень2 = Макет.ПолучитьОбласть("ГруппировкаУровень2");
		Макеты.СтрокаДанных = Макет.ПолучитьОбласть("СтрокаДанных");
		
		//получение данных
		ТаблицаДанных = НаградыСотрудников_СобратьТаблицуДанных(ДатаОтчета, ДанныеОтчета);		
		Если ТаблицаДанных.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		//вывод отчета
		ПерваяОрганизация = Истина;
		Для Каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
			
			Если ПерваяОрганизация = Ложь Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ПерваяОрганизация = Ложь;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Организация");
			СтруктураПоиска.Организация = СтрокаОрганизации.РабочееМестоОрганизация;
			ДанныеПоОрганизации = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
			
			//шапка
			ДокументРезультат.Вывести(Макеты.Шапка);
			
			//группы и строки
			НПП = 0;
			ТекУровень1 = Неопределено;
			ТекУровень2 = Неопределено;
			ТекСотрудник = Неопределено;
			Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
				
				//группы
				Если НЕ ТекУровень1 = СтрокаДанных.Уровень1 Тогда
					Макеты.ГруппировкаУровень1.Параметры.Заполнить(СтрокаДанных);
					ДокументРезультат.Вывести(Макеты.ГруппировкаУровень1);
					ТекУровень1 = СтрокаДанных.Уровень1;
				КонецЕсли;
				Если НЕ ТекУровень2 = СтрокаДанных.Уровень2 Тогда
					Макеты.ГруппировкаУровень2.Параметры.Заполнить(СтрокаДанных);
					ДокументРезультат.Вывести(Макеты.ГруппировкаУровень2);
					ТекУровень2 = СтрокаДанных.Уровень2;
				КонецЕсли;
				
				//строки
				НПП = НПП + 1;
				ПараметрыСтроки = Новый Структура;
				ПараметрыСтроки.Вставить("НПП", Формат(НПП, "ЧДЦ=; ЧГ=0"));
				
				Если НЕ ТекСотрудник = СтрокаДанных.Сотрудник Тогда
					ТекСотрудник = СтрокаДанных.Сотрудник;
				Иначе
					НПП = НПП - 1;
					ПараметрыСтроки.Вставить("НПП", "");
					ПараметрыСтроки.Вставить("ФИО", "");
					ПараметрыСтроки.Вставить("Должность", "");
					ПараметрыСтроки.Вставить("Стаж", "");
				КонецЕсли;
				
				Макеты.СтрокаДанных.Параметры.Заполнить(СтрокаДанных);
				Макеты.СтрокаДанных.Параметры.Заполнить(ПараметрыСтроки);
				ДокументРезультат.Вывести(Макеты.СтрокаДанных);
				
			КонецЦикла;
			
		КонецЦикла;
		
		//завершение
		СтандартнаяОбработка = Ложь;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета [Награды сотрудников] внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;	
	
КонецПроцедуры

Процедура НаградыСотрудников_ИзменитьНастройки(НастройкиОтчета)
	
	ВеткаСотрудника = НастройкиОтчета.Структура[0].Структура[0].Структура[0];
	
	НовоеПоле = ВеткаСотрудника.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("РабочееМесто.Должность");
	
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("ЛичныеДанные.Фамилия"));
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("ЛичныеДанные.Имя"));
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("ЛичныеДанные.Отчество"));
	
КонецПроцедуры

Функция НаградыСотрудников_СобратьТаблицуДанных(ДатаОтчета, ДанныеОтчета)
	
	//описание таблицы
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("Уровень1");
	ТаблицаДанных.Колонки.Добавить("Уровень1Код");
	ТаблицаДанных.Колонки.Добавить("Уровень2");
	ТаблицаДанных.Колонки.Добавить("Уровень2Код");
	ТаблицаДанных.Колонки.Добавить("Подразделение");
	ТаблицаДанных.Колонки.Добавить("ПодразделениеКод");
	ТаблицаДанных.Колонки.Добавить("Должность");
	ТаблицаДанных.Колонки.Добавить("ДолжностьКод");
	ТаблицаДанных.Колонки.Добавить("ПорядокПозиции");
	ТаблицаДанных.Колонки.Добавить("Сотрудник");
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаДанных.Колонки.Добавить("ФИО");
	ТаблицаДанных.Колонки.Добавить("Стаж");
	ТаблицаДанных.Колонки.Добавить("Награда");
	ТаблицаДанных.Колонки.Добавить("НомерПриказа");
	ТаблицаДанных.Колонки.Добавить("ДатаПриказа");
	ТаблицаДанных.Колонки.Добавить("АФМ_НаградноеСобытие");
	
	//основные данные из СКД
	Для Каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
				Для Каждого СтрокаОтчета Из СтрокаСотрудника.Строки Цикл
					
					//проверка
					Если СтрокаОтчета.РабочееМестоСотрудник = Неопределено
						ИЛИ СтрокаОтчета.РабочееМестоСотрудник = Справочники.Сотрудники.ПустаяСсылка() Тогда
						//изменен порядок уровней или пустое значение
						Продолжить;
					КонецЕсли;
					
					//основные данные
					СтрокаДанных = ТаблицаДанных.Добавить();
					СтрокаДанных.Организация = 	СтрокаОтчета.РабочееМестоОрганизация;
					СтрокаДанных.Подразделение = СтрокаОтчета.РабочееМестоПодразделение;
					СтрокаДанных.ПодразделениеКод = СокрЛП(СтрокаОтчета.РабочееМестоПодразделение.Код);
					СтрокаДанных.Должность = СтрокаОтчета.РабочееМестоДолжность;
					СтрокаДанных.ДолжностьКод = СокрЛП(СтрокаОтчета.РабочееМестоДолжность.РеквизитДопУпорядочивания);
					СтрокаДанных.ПорядокПозиции = "";
					СтрокаДанных.Сотрудник = СтрокаОтчета.РабочееМестоСотрудник;
					СтрокаДанных.ФизическоеЛицо = СтрокаОтчета.РабочееМестоСотрудник.ФизическоеЛицо;
					СтрокаДанных.ФИО = СтрокаОтчета.ЛичныеДанныеФамилия + " " + СтрокаОтчета.ЛичныеДанныеИмя + " " + СтрокаОтчета.ЛичныеДанныеОтчество;
					СтрокаДанных.Награда = СтрокаОтчета.НаградыНаграда;
					СтрокаДанных.НомерПриказа = СокрЛП(СтрокаОтчета.НаградыНомерПриказа);
					СтрокаДанных.ДатаПриказа = СтрокаОтчета.НаградыДатаПриказа;
					СтрокаДанных.АФМ_НаградноеСобытие = "";
					
					//уровни функциональных блоков
					ОпределитьУровниГруппировок(СтрокаДанных);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//дополним данными по стажу
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , КвалификаторыДаты));
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.Организация = СтрокаДанных.Организация;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.Период = НачалоДня(ДатаОтчета);
	КонецЦикла;
	
	СтажиСотрудников = КадровыйУчетРасширенный.СведенияОСтажахСотрудников(СотрудникиДаты);
	ВидСтажаВЭнергетике = АФМ_ПредопределенныеДанные.ПолучитьПредопределенноеЗначение(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ВидСтажаРаботыВЭнергетике);
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		ОбщийСтажЛет = 0;
		ОбщийСтажМесяцев = 0;
		
		Попытка
			СоответсвиеСтаж = СтажиСотрудников.Получить(СтрокаДанных.Сотрудник);
			СоответсвиеПоВидуСтажа = СоответсвиеСтаж.Получить(ВидСтажаВЭнергетике);
			ОбщийСтажЛет = СоответсвиеПоВидуСтажа.Лет;
			ОбщийСтажМесяцев = СоответсвиеПоВидуСтажа.Месяцев;
		Исключение
		КонецПопытки;
		
		ПредставлениеЛет = "";
		Если ОбщийСтажЛет = 1 Тогда
			ПредставлениеЛет = "год";
		ИначеЕсли ОбщийСтажЛет > 1 И ОбщийСтажЛет < 5 Тогда
			ПредставлениеЛет = "года";
		Иначе
			ПредставлениеЛет = "лет";
		КонецЕсли;
		СтажРаботыВЭнергетике = ?(ОбщийСтажЛет > 0, СокрЛП(ОбщийСтажЛет) + " " + ПредставлениеЛет, "");
		
		ПредставлениеМесяцев = "";
		Если ОбщийСтажМесяцев = 1 Тогда
			ПредставлениеМесяцев = "месяц";
		ИначеЕсли ОбщийСтажМесяцев > 1 И ОбщийСтажМесяцев < 5 Тогда
			ПредставлениеМесяцев = "месяца";
		Иначе
			ПредставлениеМесяцев = "месяцев";
		КонецЕсли;
		СтажРаботыВЭнергетике = СтажРаботыВЭнергетике + " " + ?(ОбщийСтажМесяцев > 0, СокрЛП(ОбщийСтажМесяцев) + " " + ПредставлениеМесяцев, "");
		
		СтрокаДанных.Стаж = СокрЛП(СтажРаботыВЭнергетике);
		
	КонецЦикла;
	
	//дополним награды
	ЗапросНаграды = Новый Запрос;
	ЗапросНаграды.УстановитьПараметр("ФизическоеЛицо", ТаблицаДанных.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	ЗапросНаграды.Текст =
	"ВЫБРАТЬ
	|	НаградыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НаградыФизическихЛиц.НомерПриказа,
	|	НаградыФизическихЛиц.Награда,
	|	НаградыФизическихЛиц.ДатаПриказа,
	|	НаградыФизическихЛиц.АФМ_НаградноеСобытие
	|ИЗ
	|	РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
	|ГДЕ
	|	НаградыФизическихЛиц.ФизическоеЛицо В(&ФизическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо";
	
	Награды = ЗапросНаграды.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНаграды Из Награды Цикл
		
		Если СтрокаНаграды.АФМ_НаградноеСобытие = Справочники.АФМ_НаградныеСобытия.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ФизическоеЛицо, Награда, НомерПриказа, ДатаПриказа");
		СтруктураПоиска.ФизическоеЛицо = СтрокаНаграды.ФизическоеЛицо;
		СтруктураПоиска.Награда = СтрокаНаграды.Награда;
		СтруктураПоиска.НомерПриказа = СокрЛП(СтрокаНаграды.НомерПриказа);
		СтруктураПоиска.ДатаПриказа = СтрокаНаграды.ДатаПриказа;
		НайденныеДанные = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеДанные.Количество() > 0 Тогда
			НайденныеДанные[0].АФМ_НаградноеСобытие = СокрЛП(СтрокаНаграды.АФМ_НаградноеСобытие);
		КонецЕсли;
		
	КонецЦикла;
	
	//сортировки
	ТаблицаДанных.Сортировать("Организация, Уровень1Код, Уровень2Код, ПодразделениеКод, ПорядокПозиции, ДолжностьКод, ФИО, ДатаПриказа");
	
	//завершение
	Возврат ТаблицаДанных;
	
КонецФункции
//<-- АФМ-Серверс Дебов Игорь Заявка 000000008697 18.06.2016

#КонецОбласти

#Область ОтчетыПоСотрудникам

#Область Т2

//--> АФМ-Серверс Дебов Игорь ДМ0000007968 21.07.2016
Процедура ОтчетыПоСотрудникам_Т2_ИзменитьСхему(Отчет)
	
	НовоеПолеХарактерВыплаты =
	"Выбор
	|	Когда РабочееМесто.ДатаПриема = ДатаВремя(1, 1, 1)
	|		Тогда """"
	|	Когда РабочееМесто.ПриказОПриеме.СрочныйДоговор = Истина
	|		Тогда ""Временно""
	|	Иначе ""Постоянно""
	|Конец";
	
	НастройкиОтчета = Отчет.КомпоновщикНастроек.Настройки;
	
	Для Каждого ПользовательскоеПоле Из НастройкиОтчета.ПользовательскиеПоля.Элементы Цикл
		
		Если ПользовательскоеПоле.Заголовок = "ХарактерРаботы" Тогда
			ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(НовоеПолеХарактерВыплаты);
			ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(НовоеПолеХарактерВыплаты);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//<-- АФМ-Серверс Дебов Игорь ДМ0000007968 21.07.2016

#КонецОбласти

#Область ШтатныеСотрудники

//--> АФМ-Серверс Дебов Игорь Заявка 000000008671 18.06.2016
Процедура ОтчетыПоСотрудникам_ШтатныеСотрудники_ВыводОтчета(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Попытка
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ШтатныеСотрудники_1_АФМ";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		ДатаОтчета=Дата(1,1,1);
		ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если Не ПараметрПериод = Неопределено Тогда
			ДатаОтчета=ПараметрПериод.Значение.Дата;
		КонецЕсли;
		
		//изменим настройки варианта
		ОтчетыПоСотрудникам_ШтатныеСотрудники_ИзменитьНастройки(НастройкиОтчета);
		
		//выполнение СКД
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Отчет.СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		//параметры отчета
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ОтчетыПоСотрудникам.АФМ_Макет_РеестрСотрудников");
		
		Макеты = Новый Структура("ОбластьШапка, ОбластьСтрока");
		Макеты.ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
		Макеты.ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");
		
		//получение данных
		ТаблицаДанных = ОтчетыПоСотрудникам_ШтатныеСотрудники_СобратьТаблицуДанных(ДатаОтчета, ДанныеОтчета);
		Если ТаблицаДанных.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		//вывод отчета
		ПерваяОрганизация = Истина;
		Для Каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
			
			Если ПерваяОрганизация = Ложь Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ПерваяОрганизация = Ложь;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Организация");
			СтруктураПоиска.Организация = СтрокаОрганизации.РабочееМестоОрганизация;
			ДанныеПоОрганизации = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
			
			//шапка
			ПараметрыШапки = Новый Структура;
			ПараметрыШапки.Вставить("ДатаОтчета", Формат(ДатаОтчета, "ДФ=dd.MM.yyyy"));
			Макеты.ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
			ДокументРезультат.Вывести(Макеты.ОбластьШапка);
			
			//строки
			НомерПП = 0;
			Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
				
				НомерПП = НомерПП + 1;
				ПараметрыСтроки = Новый Структура;
				ПараметрыСтроки.Вставить("НомерПП", Формат(НомерПП, "ЧДЦ=; ЧГ=0"));
				
				Макеты.ОбластьСтрока.Параметры.Заполнить(СтрокаДанных);
				Макеты.ОбластьСтрока.Параметры.Заполнить(ПараметрыСтроки);
				ДокументРезультат.Вывести(Макеты.ОбластьСтрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
		//завершение
		СтандартнаяОбработка = Ложь;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета [Штатные сотрудники] внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;	
	
КонецПроцедуры

Процедура ОтчетыПоСотрудникам_ШтатныеСотрудники_ИзменитьНастройки(НастройкиОтчета)
	
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("ЛичныеДанные.Фамилия"));
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("ЛичныеДанные.Имя"));
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных("ЛичныеДанные.Отчество"));
	
КонецПроцедуры

Функция ОтчетыПоСотрудникам_ШтатныеСотрудники_СобратьТаблицуДанных(ДатаОтчета, ДанныеОтчета)
	
	//описание таблицы
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("Уровень1");
	ТаблицаДанных.Колонки.Добавить("Уровень1Код");
	ТаблицаДанных.Колонки.Добавить("Уровень2");
	ТаблицаДанных.Колонки.Добавить("Уровень2Код");
	ТаблицаДанных.Колонки.Добавить("Подразделение");
	ТаблицаДанных.Колонки.Добавить("ПодразделениеКод");
	ТаблицаДанных.Колонки.Добавить("Должность");
	ТаблицаДанных.Колонки.Добавить("ДолжностьКод");
	ТаблицаДанных.Колонки.Добавить("ПорядокПозиции");
	ТаблицаДанных.Колонки.Добавить("Сотрудник");
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаДанных.Колонки.Добавить("ФИО");
	ТаблицаДанных.Колонки.Добавить("СуммаОклада");
	ТаблицаДанных.Колонки.Добавить("Премия0Процент"); //Персональная надбавка
	ТаблицаДанных.Колонки.Добавить("Премия0Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия1Считать"); //Надбавка за выслугу лет
	ТаблицаДанных.Колонки.Добавить("Премия1Процент");
	ТаблицаДанных.Колонки.Добавить("Премия1Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия2Процент"); //пусто
	ТаблицаДанных.Колонки.Добавить("Премия2Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия3Процент"); //пусто
	ТаблицаДанных.Колонки.Добавить("Премия3Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия4Процент"); //пусто
	ТаблицаДанных.Колонки.Добавить("Премия4Сумма");
	ТаблицаДанных.Колонки.Добавить("Премия5Процент"); //пусто
	ТаблицаДанных.Колонки.Добавить("Премия5Сумма");
	
	//основные данные из СКД
	Для Каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаОтчета Из СтрокаПодразделения.Строки Цикл
				
				//проверка
				Если СтрокаОтчета.РабочееМестоСотрудник = Неопределено
					ИЛИ СтрокаОтчета.РабочееМестоСотрудник = Справочники.Сотрудники.ПустаяСсылка() Тогда
					//изменен порядок уровней или пустое значение
					Продолжить;
				КонецЕсли;
				
				//основные данные
				СтрокаДанных = ТаблицаДанных.Добавить();
				СтрокаДанных.Организация = 	СтрокаОтчета.РабочееМестоОрганизация;
				СтрокаДанных.Подразделение = СтрокаОтчета.РабочееМестоПодразделение;
				СтрокаДанных.ПодразделениеКод = СокрЛП(СтрокаОтчета.РабочееМестоПодразделение.Код);
				СтрокаДанных.Должность = СтрокаОтчета.РабочееМестоДолжность;
				СтрокаДанных.ДолжностьКод = СокрЛП(СтрокаОтчета.РабочееМестоДолжность.РеквизитДопУпорядочивания);
				СтрокаДанных.ПорядокПозиции = "";
				СтрокаДанных.Сотрудник = СтрокаОтчета.РабочееМестоСотрудник;
				СтрокаДанных.ФизическоеЛицо = СтрокаОтчета.РабочееМестоСотрудник.ФизическоеЛицо;
				СтрокаДанных.ФИО = СтрокаОтчета.ЛичныеДанныеФамилия + " " + СтрокаОтчета.ЛичныеДанныеИмя + " " + СтрокаОтчета.ЛичныеДанныеОтчество;
				СтрокаДанных.СуммаОклада = СтрокаОтчета.РабочееМестоТарифнаяСтавка;
				
				СтрокаДанных.Премия0Процент = 0;
				СтрокаДанных.Премия0Сумма = 0;
				СтрокаДанных.Премия1Считать = Ложь;
				СтрокаДанных.Премия1Процент = 0;
				СтрокаДанных.Премия1Сумма = 0;
				СтрокаДанных.Премия2Процент = 0;
				СтрокаДанных.Премия2Сумма = 0;
				СтрокаДанных.Премия3Процент = 0;
				СтрокаДанных.Премия3Сумма = 0;
				СтрокаДанных.Премия4Процент = 0;
				СтрокаДанных.Премия4Сумма = 0;
				СтрокаДанных.Премия5Процент = 0;
				СтрокаДанных.Премия5Сумма = 0;
				
				//уровни функциональных блоков
				ОпределитьУровниГруппировок(СтрокаДанных);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//дополним исходную таблицу - премиями
	МассивВыплатаПоРКиСН = Новый Массив;
	МассивВыплатаПоРН = Новый Массив;
	МассивКвартальнаяПремия = Новый Массив;
	МассивПремияЗаМесяц = Новый Массив;
	МассивНадбавкаЗаВыслугуЛет = СостояниеШтатногоРасписания_ШтатнаяРасстановка_СформироватьМассивНастроек(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ШтатнаяРасстановкаКолонкаНадбавкаЗаВыслугуЛет, 2);
	МассивПерсональнаяНадбавка = СостояниеШтатногоРасписания_ШтатнаяРасстановка_СформироватьМассивНастроек(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ШтатнаяРасстановкаКолонкаПерсональнаяНадбавка, 1);
	
	СостояниеШтатногоРасписания_ШтатнаяРасстановка_РасчетПремий(ТаблицаДанных, ДатаОтчета,
		МассивВыплатаПоРКиСН, МассивВыплатаПоРН, МассивКвартальнаяПремия, МассивПремияЗаМесяц, МассивНадбавкаЗаВыслугуЛет, МассивПерсональнаяНадбавка);	
	
	//посчитаем итоговые суммы
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		СтрокаДанных.Премия0Сумма = Окр(СтрокаДанных.СуммаОклада * СтрокаДанных.Премия0Процент / 100, 2);
		СтрокаДанных.Премия1Сумма = Окр(СтрокаДанных.СуммаОклада * СтрокаДанных.Премия1Процент / 100, 2);
		
	КонецЦикла;
	
	//сортировки
	ТаблицаДанных.Сортировать("Организация, Уровень1Код, Уровень2Код, ПодразделениеКод, ПорядокПозиции, ДолжностьКод, ФИО");
	
	//завершение
	Возврат ТаблицаДанных;
	
КонецФункции
//<-- АФМ-Серверс Дебов Игорь Заявка 000000008671 18.06.2016

#КонецОбласти

#КонецОбласти

#Область РеестрПолучателейСтраховогоОбеспечения

//--> АФМ-Серверс Дебов Игорь Заявка ДМ0000007213 06.05.2016
Процедура РеестрПолучателейСтраховогоОбеспечения_ВыводОтчета(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Попытка
		
		//параметры
		КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
		СхемаКомпоновкиДанных = Отчет.СхемаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		//Справочно!!! Так и не получилось внести изменения в настройки СКД, т.к. динамически добавленные поля
		//	в запросе и наборе данных не попадают в доступные поля выбора, при инициализации настроек.
		//	РеестрПолучателейСтраховогоОбеспечения_ИзменентьНастройки(НастройкиОтчета);
		
		СтандартнаяОбработка = Ложь;
		
		//параметры документа
		ДокументРезультат.Очистить();
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АФМ_РеестрПолучателейСтраховогоОбеспечения";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.РеестрПолучателейСтраховогоОбеспечения.АФМ_Макет_РеестрПособий");
		
		Макеты = Новый Структура("ОбластьШапка,ОбластьСтрока,ОбластьГруппа,ОбластьИтого");
		Макеты.ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
		Макеты.ОбластьГруппа = Макет.ПолучитьОбласть("ОбластьГруппа");
		Макеты.ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");
		Макеты.ОбластьИтого = Макет.ПолучитьОбласть("ОбластьИтого");
		
		ДокументРезультат.НачатьАвтогруппировкуСтрок(); 
		
		//получим данные из СКД - метод запроса
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Отчет.СхемаКомпоновкиДанных, НастройкиОтчета);
		
		Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.Данные.Запрос);
		ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
		Для Каждого ОписаниеПараметраЗапроса Из ОписаниеПараметровЗапроса Цикл
			Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетКомпоновкиДанных.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
		КонецЦикла;
		ТаблицаДанные = Запрос.Выполнить().Выгрузить();
		
		ТаблицаДанные.Сортировать("Организация, ВидПособияСоциальногоСтрахованияПорядок, ФизическоеЛицоПредставление, ДатаСтраховогоСлучая");
		
		//определим период
		ПериодНачало=Дата(1,1,1);
		ПериодКонец=Дата(1,1,1);
		ПериодОтчетаТекст="";
		
		ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если Не ПараметрПериод = Неопределено Тогда
			ПериодНачало=ПараметрПериод.Значение.ДатаНачала;
			ПериодКонец=ПараметрПериод.Значение.ДатаОкончания;
			Если Год(ПериодНачало)=Год(ПериодКонец) И Месяц(ПериодНачало)=Месяц(ПериодКонец) Тогда
				ПериодОтчетаТекст=Формат(ПериодКонец,"ДФ='ММММ гггг'")+" г.";
			Иначе
				ПериодОтчетаТекст=Формат(ПериодНачало,"ДФ='MMMM yyyy'")+" - "+Формат(ПериодКонец,"ДФ='MMMM yyyy'");
			КонецЕсли;
		КонецЕсли;
		
		//вывод отчета
		Организация=Неопределено;
		ВидПособияСоциальногоСтрахования=Неопределено;
		
		Для Каждого СтрокаДанных Из ТаблицаДанные Цикл
			//вывод шапка
			Если НЕ Организация=СтрокаДанных.Организация Тогда
				
				Если НЕ Организация=Неопределено Тогда
					//вывод общих итогов
					ВывестиОбщиеИтоги(ДокументРезультат, Макеты.ОбластьИтого, ТаблицаДанные, Организация, ПериодКонец);
					
					//вывод разделителя страниц
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				Организация = СтрокаДанных.Организация;
				
				ПараметрыОбласти = Новый Структура;
				ПараметрыОбласти.Вставить("ПериодТекст", ПериодОтчетаТекст);
				ПараметрыОбласти.Вставить("ОрганизацияТекст", СокрЛП(Организация.НаименованиеСокращенное));
				
				Область = Макеты.ОбластьШапка;
				Область.Параметры.Заполнить(ПараметрыОбласти);
				ДокументРезультат.Вывести(Область);
				
			КонецЕсли;
			
			//вывод группы
			Если НЕ ВидПособияСоциальногоСтрахования=СтрокаДанных.ВидПособияСоциальногоСтрахования Тогда
				
				ВидПособияСоциальногоСтрахования = СтрокаДанных.ВидПособияСоциальногоСтрахования;
				
				ПараметрыОбласти = РассчитатьИтогПоГруппе(ТаблицаДанные, ВидПособияСоциальногоСтрахования);
				
				Область = Макеты.ОбластьГруппа;
				Область.Параметры.Заполнить(ПараметрыОбласти);
				ДокументРезультат.Вывести(Область);
				
			КонецЕсли;
			
			//вывод строк
			Область = Макеты.ОбластьСтрока;
			Область.Параметры.Заполнить(СтрокаДанных);
			ДокументРезультат.Вывести(Область);
			
		КонецЦикла;
		
		//вывод общих итогов
		ВывестиОбщиеИтоги(ДокументРезультат, Макеты.ОбластьИтого, ТаблицаДанные, Организация, ПериодКонец);
		
		//завершение
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета [Реестр пособий за счет ФСС] внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;
	
КонецПроцедуры

Функция РассчитатьИтогПоГруппе(ТаблицаДанные, ВидПособияСоциальногоСтрахования, ПолныеИтоги=Ложь)
	
	ПараметрыОбласти=Новый Структура;
	ПараметрыОбласти.Вставить("ВидПособияСоциальногоСтрахования", ВидПособияСоциальногоСтрахования);
	
	СтруктураПоиска=Новый Структура("ВидПособияСоциальногоСтрахования", ВидПособияСоциальногоСтрахования);
	Если ПолныеИтоги = Истина Тогда
		СтруктураПоиска=Новый Структура("Организация", ВидПособияСоциальногоСтрахования);
	КонецЕсли;
	НайденныеСтроки=ТаблицаДанные.НайтиСтроки(СтруктураПоиска);
	
	СтраховыеСлучаи =		0;
	ОплаченныеДни =			0;
	АФМ_СуммаФСС =			0;
	АФМ_РаботодательДни =	0;
	АФМ_РаботодательСумма =	0;
	АФМ_СуммаВсего =		0;
	СуммаСверхНорм =		0;
	
	Для Каждого СтрокаДанных Из НайденныеСтроки Цикл
		СтраховыеСлучаи = СтраховыеСлучаи + СтрокаДанных.СтраховыеСлучаи;
		ОплаченныеДни = ОплаченныеДни + СтрокаДанных.ОплаченныеДни;
		АФМ_СуммаФСС = АФМ_СуммаФСС + СтрокаДанных.АФМ_СуммаФСС;
		АФМ_РаботодательДни = АФМ_РаботодательДни + СтрокаДанных.АФМ_РаботодательДни;
		АФМ_РаботодательСумма = АФМ_РаботодательСумма + СтрокаДанных.АФМ_РаботодательСумма;
		АФМ_СуммаВсего = АФМ_СуммаВсего + СтрокаДанных.АФМ_СуммаВсего;
		СуммаСверхНорм = СуммаСверхНорм + СтрокаДанных.СуммаСверхНорм;
	КонецЦикла;
	
	ПараметрыОбласти.Вставить("СтраховыеСлучаи",		СтраховыеСлучаи);
	ПараметрыОбласти.Вставить("ОплаченныеДни",			ОплаченныеДни);
	ПараметрыОбласти.Вставить("АФМ_СуммаФСС",			АФМ_СуммаФСС);
	ПараметрыОбласти.Вставить("АФМ_РаботодательДни", 	АФМ_РаботодательДни);
	ПараметрыОбласти.Вставить("АФМ_РаботодательСумма", 	АФМ_РаботодательСумма);
	ПараметрыОбласти.Вставить("АФМ_СуммаВсего",			АФМ_СуммаВсего);
	ПараметрыОбласти.Вставить("СуммаСверхНорм", 		СуммаСверхНорм);
	
	Возврат ПараметрыОбласти;
	
КонецФункции

Процедура ВывестиОбщиеИтоги(ДокументРезультат, Область, ТаблицаДанные, Организация, ПериодКонец)
	
	ПараметрыОбласти = РассчитатьИтогПоГруппе(ТаблицаДанные, Организация, Истина);
	Область.Параметры.Заполнить(ПараметрыОбласти);
	ПараметрыОбласти = ПолучитьПодписьюОтветсвенногоБухгалтера(Организация, ПериодКонец);
	Область.Параметры.Заполнить(ПараметрыОбласти);
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры

Функция ПолучитьПодписьюОтветсвенногоБухгалтера(Организация, МесяцНачисления) Экспорт
	
	ОтветственныйБухгалтер	= Справочники.ФизическиеЛица.ПустаяСсылка();
	ОтветственныйБухгалтерДолжность = "";
	БухгалтерФИО = "";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОтветственныйБухгалтер = АФМ_ПредопределенныеДанные.ПолучитьПредопределенноеЗначение(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ОтветственныйБухгалтер, Организация);
		ОтветственныйБухгалтерДолжность = АФМ_ПредопределенныеДанные.ПолучитьПредопределенноеЗначение(ПланыВидовХарактеристик.АФМ_ПредопределенныеДанные.ДолжностьОтветственногоБухгалтера, Организация);
	КонецЕсли;
	
	Если НЕ ОтветственныйБухгалтер=Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		МассивФизЛиц=Новый Массив;
		МассивФизЛиц.Добавить(ОтветственныйБухгалтер);
		СоответствиеФИО=ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(КонецДня(МесяцНачисления), МассивФизЛиц);
		
		СоответствиеФИОЗначение=СоответствиеФИО.Получить(ОтветственныйБухгалтер);
		Если НЕ СоответствиеФИОЗначение=Неопределено Тогда
			БухгалтерФИО=ВРег(Лев(СоответствиеФИОЗначение.Имя,1))+"."+ВРег(Лев(СоответствиеФИОЗначение.Отчество,1))+". "+СоответствиеФИОЗначение.Фамилия;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("АФМБухгалтерДолжность",ОтветственныйБухгалтерДолжность.Наименование);
	СтруктураПараметров.Вставить("АФМБухгалтерФИО",БухгалтерФИО);
	
	ОбщаяПодпись=СокрЛП(ОтветственныйБухгалтерДолжность.Наименование)+"  ____________________________________  "+БухгалтерФИО;
	ОбщаяПодпись2="Исполнитель  ____________________________________  "+БухгалтерФИО;
	СтруктураПараметров.Вставить("ОбщаяПодпись",ОбщаяПодпись);
	СтруктураПараметров.Вставить("Подпись",ОбщаяПодпись2);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура РеестрПолучателейСтраховогоОбеспечения_ИзменентьНастройки(НастройкиОтчета)
	
	//добавялем поля в доступные
	ПолеВыбора = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("АФМ_СуммаВсего");
	ПолеВыбора.Заголовок = "АФМ_СуммаВсего";
	
	//добавялем поля в структуру
	ГруппаСтрока=НастройкиОтчета.Структура[1].Структура[0].Структура[0];	
	
	ПолеСуммаФСС = ГруппаСтрока.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеСуммаФСС.Поле = Новый ПолеКомпоновкиДанных("АФМ_СуммаВсего");
	
КонецПроцедуры

Процедура РеестрПолучателейСтраховогоОбеспечения_ИзменениеСхемыСКД(Отчет)
	
	//параметры
	СхемаКомпоновки = Отчет.СхемаКомпоновкиДанных;
	НаборДанныхДанные = СхемаКомпоновки.НаборыДанных.Данные;
	
	//проверка
	Если Не СтрНайти(НаборДанныхДанные.Запрос, "АФМ_СуммаВсего") = 0 Тогда
		// Схема уже изменена.
		Возврат;
	КонецЕсли;
	
	//модифицируем запрос
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(НаборДанныхДанные.Запрос);
	ИндексЗамещаемогоЗапроса = СхемаЗапроса.ПакетЗапросов.Количество();
	
	ТекстЗапросаРезультат = "";
	Для Индекс = 0 По ИндексЗамещаемогоЗапроса - 1 Цикл
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов[Индекс];
		ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
		Если СокрЛП(ЗапросПакета.ТаблицаДляПомещения)="ВТПособия" Тогда
			
			НовыеПоля = "ПособияПоСоциальномуСтрахованиюОбороты.СуммаВсего КАК АФМ_СуммаФСС,
			|	ВЫБОР
			|		КОГДА ПособияПоСоциальномуСтрахованиюОбороты.СуммаФинансируемаяРаботодателем <> 0
			|			И ПособияПоСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность) ТОГДА
			|			3
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК АФМ_РаботодательДни,
			|	ПособияПоСоциальномуСтрахованиюОбороты.СуммаФинансируемаяРаботодателем КАК АФМ_РаботодательСумма,
			|	ПособияПоСоциальномуСтрахованиюОбороты.СуммаВсего + ПособияПоСоциальномуСтрахованиюОбороты.СуммаФинансируемаяРаботодателем КАК АФМ_СуммаВсего,
			|	ПособияПоСоциальномуСтрахованиюОбороты.СуммаВсего КАК СуммаВсего,";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПособияПоСоциальномуСтрахованиюОбороты.СуммаВсего КАК СуммаВсего,", НовыеПоля);
			
			НовыеПоля = "
			|0,
			|ПособияПоУходуЗаРебенкомОбороты.СуммаВсегоПоУходуЗаПервымРебенком + ПособияПоУходуЗаРебенкомОбороты.СуммаВсегоПоУходуЗаВторымРебенком,
			|0,
			|0,
			|ПособияПоУходуЗаРебенкомОбороты.СуммаВсегоПоУходуЗаПервымРебенком + ПособияПоУходуЗаРебенкомОбороты.СуммаВсегоПоУходуЗаВторымРебенком,";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0,", НовыеПоля);
			
		ИначеЕсли СокрЛП(ЗапросПакета.ТаблицаДляПомещения)="" Тогда
			
			НовыеПоля = "ПособияСоциальномуСтрахованию.АФМ_СуммаФСС КАК АФМ_СуммаФСС,
			|	ПособияСоциальномуСтрахованию.АФМ_РаботодательДни КАК АФМ_РаботодательДни,
			|	ПособияСоциальномуСтрахованию.АФМ_РаботодательСумма КАК АФМ_РаботодательСумма,
			|	ПособияСоциальномуСтрахованию.АФМ_СуммаВсего КАК АФМ_СуммаВсего,
			|	ПособияСоциальномуСтрахованию.СуммаВсего КАК СуммаВсего,";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПособияСоциальномуСтрахованию.СуммаВсего КАК СуммаВсего,", НовыеПоля);
			
		КонецЕсли;
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаРезультат, ТекстЗапроса);	
	КонецЦикла;
	НаборДанныхДанные.Запрос = ТекстЗапросаРезультат;
	
	//добавялем дополнительные поля
	КЧ = Новый КвалификаторыЧисла(15, 2);
	Массив = Новый Массив;
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, КЧ);
	
	НовоеПоле = НаборДанныхДанные.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок 	= "АФМ_СуммаФСС";
	НовоеПоле.ПутьКДанным 	= "АФМ_СуммаФСС";
	НовоеПоле.Поле			= "АФМ_СуммаФСС";
	НовоеПоле.ТипЗначения	= Новый ОписаниеТипов(Массив, КЧ);
	
	НовоеПоле = НаборДанныхДанные.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок		= "АФМ_РаботодательДни";
	НовоеПоле.ПутьКДанным	= "АФМ_РаботодательДни";
	НовоеПоле.Поле			= "АФМ_РаботодательДни";
	НовоеПоле.ТипЗначения	= Новый ОписаниеТипов(Массив, КЧ);
	
	НовоеПоле = НаборДанныхДанные.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок		= "АФМ_РаботодательСумма";
	НовоеПоле.ПутьКДанным	= "АФМ_РаботодательСумма";
	НовоеПоле.Поле			= "АФМ_РаботодательСумма";
	НовоеПоле.ТипЗначения	= Новый ОписаниеТипов(Массив, КЧ);
	
	НовоеПоле = НаборДанныхДанные.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок		= "АФМ_СуммаВсего";
	НовоеПоле.ПутьКДанным	= "АФМ_СуммаВсего";
	НовоеПоле.Поле			= "АФМ_СуммаВсего";
	НовоеПоле.ТипЗначения	= Новый ОписаниеТипов(Массив, КЧ);
	
	//добавялем новые ресурсы
	НовыйРесурс = СхемаКомпоновки.ПоляИтога.Добавить();
	НовыйРесурс.ПутьКДанным	= "АФМ_СуммаФСС";
	НовыйРесурс.Выражение	= "АФМ_СуммаФСС";
	
	НовыйРесурс = СхемаКомпоновки.ПоляИтога.Добавить();
	НовыйРесурс.ПутьКДанным	= "АФМ_РаботодательДни";
	НовыйРесурс.Выражение	= "АФМ_РаботодательДни";
	
	НовыйРесурс = СхемаКомпоновки.ПоляИтога.Добавить();
	НовыйРесурс.ПутьКДанным	= "АФМ_РаботодательСумма";
	НовыйРесурс.Выражение	= "АФМ_РаботодательСумма";
	
	НовыйРесурс = СхемаКомпоновки.ПоляИтога.Добавить();
	НовыйРесурс.ПутьКДанным	= "АФМ_СуммаВсего";
	НовыйРесурс.Выражение	= "АФМ_СуммаВсего";
	
КонецПроцедуры
//<-- АФМ-Серверс Дебов Игорь Заявка ДМ0000007213 06.05.2016

#КонецОбласти

#Область ИзмененияВДокументах

//--> АФМ-Серверс 000000009798 Шмалюх А.Ю. 17.03.2016 г
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	                                      		
	Типы.Добавить(Метаданные.Справочники.ОбщиеДанныеИнформационногоЦентра);
	Типы.Добавить(Метаданные.Справочники.СценарииОбменовДанными);
	Типы.Добавить(Метаданные.Справочники.ОчередьЗаданий);
	Типы.Добавить(Метаданные.Справочники.ШаблоныЗаданийОчереди);
	Типы.Добавить(Метаданные.Справочники.ПолныеПутиКФормам);
	Типы.Добавить(Метаданные.Справочники.КлючевыеОперации);
	Типы.Добавить(Метаданные.Справочники.ТипыИнформацииИнформационногоЦентра);
	Типы.Добавить(Метаданные.Справочники.ИнформационныеСсылкиДляФорм);
	Типы.Добавить(Метаданные.Справочники.СообщенияСистемы);
	Типы.Добавить(Метаданные.Справочники.ПоставляемыеДополнительныеОтчетыИОбработки);
	Типы.Добавить(Метаданные.Справочники.ПоставляемыеДанные);
	Типы.Добавить(Метаданные.Справочники.НаправленияСдачиОтчетности);
	
КонецПроцедуры
//<-- АФМ-Серверс 000000009798 Шмалюх А.Ю. 17.03.2016 г

//--> АФМ-Серверс Дебов Игорь ДМ0000006316 16.08.2016

//заполнение документа принятыми сотрудниками в расчетном месяце
Процедура РаспределениеОсновногоЗаработка_ФормаДокумента_ЗаполнитьЗаМесяц(ТекущийОбъект) Экспорт
	
	ТекущийОбъект.РаспределениеОсновногоЗаработка.Очистить();
	
	ЗапросПриемНаРаботу = Новый Запрос;
	ЗапросПриемНаРаботу.УстановитьПараметр("НачалоПериода", ТекущийОбъект.ПериодРегистрации);
	ЗапросПриемНаРаботу.УстановитьПараметр("КонецПериода", КонецМесяца(ТекущийОбъект.ПериодРегистрации));
	ЗапросПриемНаРаботу.УстановитьПараметр("Организация", ТекущийОбъект.Организация);
	
	ЗапросПриемНаРаботу.Текст =
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.Сотрудник КАК АФМ_Сотрудник,
	|	1 КАК ДоляРаспределения,
	|	&НачалоПериода КАК АФМ_ПериодНачало
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.Организация = &Организация
	|	И КадроваяИсторияСотрудников.Период >= &НачалоПериода
	|	И КадроваяИсторияСотрудников.Период <= &КонецПериода
	|	И КадроваяИсторияСотрудников.Активность = ИСТИНА
	|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)";
	
	ТаблицаПрием = ЗапросПриемНаРаботу.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ТаблицаПрием Цикл
		НоваяСтрока = ТекущийОбъект.РаспределениеОсновногоЗаработка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
	КонецЦикла;
	
КонецПроцедуры

//расчет доли распределения, если было перемещение на другой проект в расчетном месяце,
//	доля расчитываается исходя из графика работы сотрудника по рабочим дням
Процедура РаспределениеОсновногоЗаработка_ФормаДокумента_РассчитатьДоли(ТекущийОбъект) Экспорт
	
	//контроль, на то есть ли уже движение за период, ситуация возникает - когда был перевод и документ
	//	формирует движение следующим месяцем
	ЗапросПроверка = Новый Запрос;
	ЗапросПроверка.УстановитьПараметр("ПериодРегистрации", ТекущийОбъект.ПериодРегистрации);
	ЗапросПроверка.УстановитьПараметр("Сотрудники", ТекущийОбъект.РаспределениеОсновногоЗаработка.ВыгрузитьКолонку("АФМ_Сотрудник"));
	ЗапросПроверка.УстановитьПараметр("ТекущийРегистратор", ТекущийОбъект.Ссылка);
	
	ЗапросПроверка.Текст =
	"ВЫБРАТЬ
	|	БухучетРаспределениеОсновногоЗаработка.Сотрудник,
	|	БухучетРаспределениеОсновногоЗаработка.Регистратор
	|ИЗ
	|	РегистрСведений.БухучетРаспределениеОсновногоЗаработка КАК БухучетРаспределениеОсновногоЗаработка
	|ГДЕ
	|	БухучетРаспределениеОсновногоЗаработка.ПериодРегистрации = &ПериодРегистрации
	|	И БухучетРаспределениеОсновногоЗаработка.Активность = ИСТИНА
	|	И БухучетРаспределениеОсновногоЗаработка.Сотрудник В(&Сотрудники)
	|	И НЕ БухучетРаспределениеОсновногоЗаработка.Регистратор = &ТекущийРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетРаспределениеОсновногоЗаработка.Сотрудник,
	|	БухучетРаспределениеОсновногоЗаработка.Регистратор";
	
	ТаблицаПроверка = ЗапросПроверка.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПроверки Из ТаблицаПроверка Цикл
		ТекстСообщения = НСтр("ru = 'ОШИБКА: Ранее по сотруднику ["+СокрЛП(СтрокаПроверки.Сотрудник)+"] за этот период вводился перевод. Документ: "+СокрЛП(СтрокаПроверки.Регистратор)+"'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	//выделим сотрудников у кого было изменение проекта
	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТЧ Из ТекущийОбъект.РаспределениеОсновногоЗаработка Цикл
		Если НЕ СтрокаТЧ.АФМ_ПериодНачало = ТекущийОбъект.ПериодРегистрации Тогда
			Если МассивСотрудников.Найти(СтрокаТЧ.АФМ_Сотрудник) = Неопределено Тогда
				МассивСотрудников.Добавить(СтрокаТЧ.АФМ_Сотрудник); //по сотруднику было перемещение
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//анализ данных
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		
		//справочно: учитывается только одно перемещение в документе
		
		//расчет параметров
		СтруктураПоиска = Новый Структура("АФМ_Сотрудник", Сотрудник);
		ПоискСтрок = ТекущийОбъект.РаспределениеОсновногоЗаработка.НайтиСтроки(СтруктураПоиска);
		
		Период1ДатаНачала = НачалоМесяца(ТекущийОбъект.ПериодРегистрации);
		Период1ДатаОкончания = Дата(1,1,1);
		Период2ДатаНачала = Дата(1,1,1);
		Период2ДатаОкончания = КонецМесяца(ТекущийОбъект.ПериодРегистрации);
		
		Для Каждого СтрокаТЧПоиск Из ПоискСтрок Цикл
			Если НЕ СтрокаТЧ.АФМ_ПериодНачало = ТекущийОбъект.ПериодРегистрации Тогда
				Период1ДатаОкончания = НачалоДня(СтрокаТЧ.АФМ_ПериодНачало) - 1;
				Период2ДатаНачала = НачалоДня(СтрокаТЧ.АФМ_ПериодНачало);
			КонецЕсли;
		КонецЦикла;
		
		//расчет доли, в зависимости от графика работы сотрудника и рабочих дней
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ТекущийОбъект.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", РегламентированнаяОтчетность.ГоловнаяОрганизация(ТекущийОбъект.Организация));
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("Период1ДатаНачала", Период1ДатаНачала);
		Запрос.УстановитьПараметр("Период1ДатаОкончания", Период1ДатаОкончания);
		Запрос.УстановитьПараметр("Период2ДатаНачала", Период2ДатаНачала);
		Запрос.УстановитьПараметр("Период2ДатаОкончания", Период2ДатаОкончания);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТГрафик
		|ИЗ
		|	РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних(
		|			&Период1ДатаНачала,
		|			Сотрудник = &Сотрудник
		|				И ГоловнаяОрганизация = &ГоловнаяОрганизация) КАК ГрафикРаботыСотрудниковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыПоВидамВремени.Дата >= &Период1ДатаНачала
		|				И ГрафикиРаботыПоВидамВремени.Дата <= &Период1ДатаОкончания
		|			ТОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РабочиеДниПериод1,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыПоВидамВремени.Дата >= &Период2ДатаНачала
		|				И ГрафикиРаботыПоВидамВремени.Дата <= &Период2ДатаОкончания
		|			ТОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РабочиеДниПериод2,
		|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК РабочиеДниМесяц
		|ПОМЕСТИТЬ ВТВыборДнейПоГрафику
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.Месяц = &Период1ДатаНачала
		|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы В
		|			(ВЫБРАТЬ
		|				ВТГрафик.ГрафикРаботы
		|			ИЗ
		|				ВТГрафик)
		|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|	И ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВыборДнейПоГрафику.ГрафикРаботы КАК ГрафикРаботы,
		|	СУММА(ВТВыборДнейПоГрафику.РабочиеДниПериод1) КАК РабочиеДниПериод1,
		|	СУММА(ВТВыборДнейПоГрафику.РабочиеДниПериод2) КАК РабочиеДниПериод2,
		|	СУММА(ВТВыборДнейПоГрафику.РабочиеДниМесяц) КАК РабочиеДниМесяц
		|ПОМЕСТИТЬ ВТДниПоГрафику
		|ИЗ
		|	ВТВыборДнейПоГрафику КАК ВТВыборДнейПоГрафику
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТВыборДнейПоГрафику.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТГрафик.Сотрудник КАК Сотрудник,
		|	ВТГрафик.ГрафикРаботы КАК ГрафикРаботы,
		|	ЕСТЬNULL(ВТДниПоГрафику.РабочиеДниПериод1, 0) КАК РабочиеДниПериод1,
		|	ЕСТЬNULL(ВТДниПоГрафику.РабочиеДниПериод2, 0) КАК РабочиеДниПериод2,
		|	ЕСТЬNULL(ВТДниПоГрафику.РабочиеДниМесяц, 0) КАК РабочиеДниМесяц
		|ИЗ
		|	ВТГрафик КАК ВТГрафик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниПоГрафику КАК ВТДниПоГрафику
		|		ПО ВТГрафик.ГрафикРаботы = ВТДниПоГрафику.ГрафикРаботы";
		
		ТаблицаРасчет = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРасчет.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//перенесем рассчетные данные в объект
		ДоляРаспределения1 = 0;
		ДоляРаспределения2 = 0;
		
		Если НЕ ТаблицаРасчет[0].РабочиеДниМесяц = 0 Тогда
			
			ДоляРаспределения1 = Окр(ТаблицаРасчет[0].РабочиеДниПериод1 /  ТаблицаРасчет[0].РабочиеДниМесяц, 3);
			ДоляРаспределения2 = Окр(ТаблицаРасчет[0].РабочиеДниПериод2 /  ТаблицаРасчет[0].РабочиеДниМесяц, 3);
			ДоляРаспределения2 = ДоляРаспределения2 + (1 - ДоляРаспределения1 - ДоляРаспределения2);
			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("АФМ_Сотрудник,АФМ_ПериодНачало", Сотрудник, Период1ДатаНачала);
		ПоискСтрок = ТекущийОбъект.РаспределениеОсновногоЗаработка.НайтиСтроки(СтруктураПоиска);
		Если ПоискСтрок.Количество() > 0 Тогда
			ПоискСтрок[0].ДоляРаспределения = ДоляРаспределения1;
			ПоискСтрок[0].АФМ_Перевод = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("АФМ_Сотрудник,АФМ_ПериодНачало", Сотрудник, Период2ДатаНачала);
		ПоискСтрок = ТекущийОбъект.РаспределениеОсновногоЗаработка.НайтиСтроки(СтруктураПоиска);
		Если ПоискСтрок.Количество() > 0 Тогда
			ПоискСтрок[0].ДоляРаспределения = ДоляРаспределения2;
			ПоискСтрок[0].АФМ_Перевод = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//изменение данных для проведения документа, т.к. сотрудник перемещен из шапки в ТЧ документа
Процедура РаспределениеОсновногоЗаработка_ДанныеДляПроведения_Изменение(Запрос) Экспорт

	//параметры
	//	Регистратор
	//	Организация
	//	Сотрудник - пусто
	//	ПериодРегистрации - пусто
	
	//меняем запрос, т.к. изменена структура данных
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Организация,
	|	МАКСИМУМ(АФМ_ПредопределенныеДанные.Значение) КАК СпособОтраженияЗарплатыВБухучете
	|ПОМЕСТИТЬ ВТОтражениеВУчете
	|ИЗ
	|	РегистрСведений.АФМ_ПредопределенныеДанные КАК АФМ_ПредопределенныеДанные
	|ГДЕ
	|	АФМ_ПредопределенныеДанные.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.АФМ_ПредопределенныеДанные.СпособОтраженияЗарплатыВБухучетеДляРаспределния)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка.Организация,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_Сотрудник КАК Сотрудник,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_СФ КАК СтатьяФинансирования,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.ОблагаетсяЕНВД,
	|	МАКСИМУМ(РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.ДоляРаспределения) КАК ДоляРаспределения,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_ПериодНачало,
	|	МАКСИМУМ(РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_ПериодОкончание) КАК АФМ_ПериодОкончание
	|ПОМЕСТИТЬ ВТДокумент
	|ИЗ
	|	Документ.РаспределениеОсновногоЗаработка.РаспределениеОсновногоЗаработка КАК РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка
	|ГДЕ
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка.Организация,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_Сотрудник,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_СФ,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.ОблагаетсяЕНВД,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_ПериодНачало,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка.ПериодРегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка.Организация,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_Сотрудник,
	|	ДОБАВИТЬКДАТЕ(РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка.ПериодРегистрации, МЕСЯЦ, 1),
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_СФ,
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.ОблагаетсяЕНВД,
	|	1,
	|	ДОБАВИТЬКДАТЕ(РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка.ПериодРегистрации, МЕСЯЦ, 1),
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|ИЗ
	|	Документ.РаспределениеОсновногоЗаработка.РаспределениеОсновногоЗаработка КАК РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка
	|ГДЕ
	|	РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка = &Регистратор
	|	И РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_Перевод = ИСТИНА
	|	И НЕ РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.Ссылка.ПериодРегистрации = РаспределениеОсновногоЗаработкаРаспределениеОсновногоЗаработка.АФМ_ПериодНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокумент.Организация,
	|	ВТДокумент.Сотрудник,
	|	ВТДокумент.ПериодРегистрации КАК ПериодРегистрации,
	|	ВТДокумент.СтатьяФинансирования,
	|	ВТОтражениеВУчете.СпособОтраженияЗарплатыВБухучете,
	|	ВТДокумент.ОблагаетсяЕНВД,
	|	ВТДокумент.ДоляРаспределения,
	|	ВТДокумент.АФМ_ПериодНачало,
	|	ВТДокумент.АФМ_ПериодОкончание
	|ИЗ
	|	ВТДокумент КАК ВТДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтражениеВУчете КАК ВТОтражениеВУчете
	|		ПО ВТДокумент.Организация = ВТОтражениеВУчете.Организация";
	
	//завершение
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры
//<-- АФМ-Серверс Дебов Игорь ДМ0000006316 16.08.2016

//--> АФМ-Серверс Дебов Игорь ДМ0000008253 26.08.2016
Функция Командировка_ПолучитьДолжностьСотрудника(Сотрудник, Организация, ДатаОтчета) Экспорт
	
	ДолжностьОтветственного = Справочники.Должности.ПустаяСсылка();
	
	СписокФизЛиц = Новый Массив;
	СписокФизЛиц.Добавить(Сотрудник);
	ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизЛиц, Истина, Организация, ДатаОтчета);
	
	Если ОсновныеСотрудникиФизическихЛиц.Количество() > 0  Тогда
		СписокСотрудников = Новый Массив;
		СписокСотрудников.Добавить(ОсновныеСотрудникиФизическихЛиц[0].Сотрудник);	
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, "Должность", ДатаОтчета);
		Если КадровыеДанные.Количество() > 0 Тогда
			ДолжностьОтветственного = КадровыеДанные[0].Должность;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДолжностьОтветственного;
	
КонецФункции
//<-- АФМ-Серверс Дебов Игорь ДМ0000008253 26.08.2016


#КонецОбласти

#КонецЕсли
