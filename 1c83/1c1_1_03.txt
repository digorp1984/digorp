общий модуль - ОФК_ИзменениеТиповыхОтчетов


#Область АнализНачисленийИУдержаний

//--> ОФК Дебов Игорь 02.12.2016 | 26.07.2017
Функция ПолучитьСправочнуюИнформациюПоОтложеннымОбязательствам(СтрокаИсходныхДанных) Экспорт
		
	//-----------------------------------------------------------------------------------------------------------------------
	//	Параметры
	//-----------------------------------------------------------------------------------------------------------------------
	
	ТекстСекции = "";
	НомерПункта = 0;
	
	Попытка
		МесяцНачисления = СтрокаИсходныхДанных.МесяцНачисления;
		Организация = СтрокаИсходныхДанных.Организация;
		Сотрудник = СтрокаИсходныхДанных.Сотрудник;
	Исключение
		МесяцНачисления = Дата(1, 1, 1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	КонецПопытки;
	
	//-----------------------------------------------------------------------------------------------------------------------
	//	Вывод данных по отложенным вознаграждениям
	//-----------------------------------------------------------------------------------------------------------------------
	
	//выбор данных
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", КонецМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОФК_СостояниеПриказовОтсроченногоВознагражденияСрезПоследних.ПриказОтсроченногоВознаграждения.Родитель КАК Приказ,
	|	СУММА(ОФК_СостояниеПриказовОтсроченногоВознагражденияСрезПоследних.БазоваяВеличина) КАК БазоваяВеличина
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	РегистрСведений.ОФК_СостояниеПриказовОтсроченногоВознаграждения.СрезПоследних(&ДатаСреза, Сотрудник = &Сотрудник) КАК ОФК_СостояниеПриказовОтсроченногоВознагражденияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ОФК_СостояниеПриказовОтсроченногоВознагражденияСрезПоследних.ПриказОтсроченногоВознаграждения.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОФК_ОбязательстваВыплаты.ПриказОтсроченногоВознаграждения.Родитель КАК Приказ,
	|	СУММА(ОФК_ОбязательстваВыплаты.СуммаВыплатыИтог) КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТВыплачено
	|ИЗ
	|	РегистрНакопления.ОФК_ОбязательстваВыплаты КАК ОФК_ОбязательстваВыплаты
	|ГДЕ
	|	ОФК_ОбязательстваВыплаты.Активность = ИСТИНА
	|	И ОФК_ОбязательстваВыплаты.Сотрудник = &Сотрудник
	|	И ОФК_ОбязательстваВыплаты.Период <= &ДатаСреза
	|
	|СГРУППИРОВАТЬ ПО
	|	ОФК_ОбязательстваВыплаты.ПриказОтсроченногоВознаграждения.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходныеДанные.Приказ,
	|	ВТИсходныеДанные.БазоваяВеличина - ЕСТЬNULL(ВТВыплачено.СуммаВыплаты, 0) КАК БазоваяВеличина
	|ПОМЕСТИТЬ ВТСводная
	|ИЗ
	|	ВТИсходныеДанные КАК ВТИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплачено КАК ВТВыплачено
	|		ПО ВТИсходныеДанные.Приказ = ВТВыплачено.Приказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСводная.Приказ КАК Приказ,
	|	ВТСводная.БазоваяВеличина
	|ИЗ
	|	ВТСводная КАК ВТСводная
	|ГДЕ
	|	ВТСводная.БазоваяВеличина > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приказ";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		НомерПункта = НомерПункта + 1;
		ТекстСекции = ТекстСекции + "Справочно:" + Символы.ПС;
		ТекстСекции = ТекстСекции + СокрЛП(НомерПункта) + ". Отложенное вознаграждение согласно:";
	КонецЕсли;
	
	//формирование текста
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Если НЕ ТекстСекции = "" Тогда
			ТекстСекции = ТекстСекции + Символы.ПС;
		КонецЕсли;
		
		ТекстСекции = ТекстСекции + "     - " + СокрЛП(СтрокаДанных.Приказ);
		ТекстСекции = ТекстСекции + " на " + НРег(Формат(КонецМесяца(МесяцНачисления), "ДФ=dd.MM.yyyy")) + "г";
		ТекстСекции = ТекстСекции + " составляет " + Формат(СтрокаДанных.БазоваяВеличина, "ЧДЦ=2; ЧГ=3,0") + " руб.;";
		
	КонецЦикла;
	
	//-----------------------------------------------------------------------------------------------------------------------
	//	Вывод данных по дополнительным доходам (суточные и т.д.), которые облагаются НДФЛ, но выплачиваются не в з/п
	//-----------------------------------------------------------------------------------------------------------------------
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСрезаНачало", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("ДатаСрезаКонец", КонецМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("ФизическоеЛицо", Сотрудник.ФизическоеЛицо);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.Ссылка.Сотрудник КАК Сотрудник,
	|	ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.Ссылка.ОФК_Начисление КАК Начисление,
	|	ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.СуммаДохода КАК СуммаДохода,
	|	ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.СуммаВычета КАК СуммаВычета
	|ПОМЕСТИТЬ ВТВыбор
	|ИЗ
	|	Документ.ОперацияНалоговогоУчетаПоНДФЛ.СведенияОДоходах КАК ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах
	|ГДЕ
	|	ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.Ссылка.ДатаОперации >= &ДатаСрезаНачало
	|	И ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.Ссылка.ДатаОперации <= &ДатаСрезаКонец
	|	И ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.Ссылка.Сотрудник = &ФизическоеЛицо
	|	И ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.Ссылка.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыбор.Начисление КАК Начисление,
	|	СУММА(ВТВыбор.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТВыбор.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	ВТВыбор КАК ВТВыбор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыбор.Начисление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисление";
	
	ТаблицаДополнительныхДоходов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДополнительныхДоходов.Количество() > 0 И ТаблицаДанных.Количество() = 0 Тогда
		ТекстСекции = ТекстСекции + "Справочно:";
	КонецЕсли;
	Если ТаблицаДополнительныхДоходов.Количество() > 0 Тогда
		НомерПункта = НомерПункта + 1;
		ТекстСекции = ТекстСекции + Символы.ПС + СокрЛП(НомерПункта) + ". Дополнительная налогооблагаемая база для НДФЛ:";
	КонецЕсли;
	
	//формирование текста
	Для Каждого СтрокаДанных Из ТаблицаДополнительныхДоходов Цикл
		
		Если НЕ ТекстСекции = "" Тогда
			ТекстСекции = ТекстСекции + Символы.ПС;
		КонецЕсли;
		
		ТекстСекции = ТекстСекции + "     -" + ?(ЗначениеЗаполнено(СтрокаДанных.Начисление), " " + СокрЛП(СтрокаДанных.Начисление) + " ->", "");
		ТекстСекции = ТекстСекции + " сумма = " + Формат(СтрокаДанных.СуммаДохода, "ЧДЦ=2; ЧН=0; ЧГ=3,0") + " руб.,";
		ТекстСекции = ТекстСекции + " вычет = " + Формат(СтрокаДанных.СуммаВычета, "ЧДЦ=2; ЧН=0; ЧГ=3,0") + " руб.;";
		
	КонецЦикла;
	
	//-----------------------------------------------------------------------------------------------------------------------
	//	Завершение
	//-----------------------------------------------------------------------------------------------------------------------
	
	Возврат ТекстСекции;
	
КонецФункции
//<-- ОФК Дебов Игорь 02.12.2016 | 26.07.2017

#КонецОбласти

#Область ОбщийМодуль_ЗарплатаКадры

//--> ОФК Дебов Игорь 06.12.2016
Процедура СоздатьВТФИООтветственныхЛицДополнительныйКонтроль(Запрос) Экспорт
		
	//справочно: не печатаются приказы под ролью кадровик, т.к.
	//	ответственное лицо бухгалтер (в подписях) относится к группе доступа физ-лиц "Москва"
	
	//выделим таблицу сотрудников
	ЗапросДоп = Новый Запрос;
	ЗапросДоп.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросДоп.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТСотрудники КАК ВТСотрудники";
	ТаблицаДоп = ЗапросДоп.Выполнить().Выгрузить();
	
	НуженДополнительныйКонтроль = Ложь;
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаДоп Из ТаблицаДоп Цикл
		Если СтрНайти(СокрЛП(СтрокаДоп.ФизическоеЛицо), "Объект не найден") > 0 Тогда
			НуженДополнительныйКонтроль = Истина;
			МассивУдаляемыхСтрок.Добавить(СтрокаДоп);
		КонецЕсли;
	КонецЦикла;
	
	Если НуженДополнительныйКонтроль = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ТаблицаДоп.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	//удалим старую таблицу
	ЗапросДоп.Текст =
	"УНИЧТОЖИТЬ ВТСотрудники";
	ЗапросДоп.Выполнить();
	
	//обновим на новые данные
	ЗапросДоп.УстановитьПараметр("ТаблицаДоп", ТаблицаДоп);
	ЗапросДоп.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДоп.*
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаДоп КАК ТаблицаДоп";
	ЗапросДоп.Выполнить();
	
КонецПроцедуры
//<-- ОФК Дебов Игорь 06.12.2016

#КонецОбласти

#Область Отчет_ОтчетыПоСотрудникам

//--> ОФК MSK-2016-00016 Дебов Игорь 16.12.2016
Процедура ВывестиМакетT2_УточнитьДанныеПоОтпускам(ДанныеЗаполнения, Сотрудник) Экспорт
	
	//выбор дополнительных данных,
	//	дополнительный анализ дней только для - увольнения,
	//	суть проблемы - в [рег.св.РеестрОтпусков] поле [КоличествоДнейОтпуска] целое число, а компенсация бывает дробной
	
	ЗапросДоп = Новый Запрос;
	ЗапросДоп.УстановитьПараметр("Сотрудник", Сотрудник);
	
	ЗапросДоп.Текст =
	"ВЫБРАТЬ
	|	Увольнение.Ссылка КАК ДокументУвольнения,
	|	Увольнение.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.Проведен = ИСТИНА
	|	И Увольнение.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрОтпусков.Регистратор КАК ДокументУвольнения,
	|	РеестрОтпусков.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(РеестрОтпусков.Основание КАК СТРОКА(254)) КАК ОснованиеОтпуска,
	|	РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодС,
	|	РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодПо,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РеестрОтпусков.ВидОтпуска КАК СТРОКА(11))) = ""Ежегодный д""
	|			ТОГДА ""Д""
	|		ИНАЧЕ ВЫРАЗИТЬ(РеестрОтпусков.ВидОтпуска КАК СТРОКА(1))
	|	КОНЕЦ КАК ВидОтпуска
	|ПОМЕСТИТЬ ВТРеестрОтпусков
	|ИЗ
	|	РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|ГДЕ
	|	РеестрОтпусков.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТДокументы.ДокументУвольнения
	|			ИЗ
	|				ВТДокументы)
	|	И РеестрОтпусков.Сотрудник = &Сотрудник
	|	И РеестрОтпусков.Активность = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Регистратор КАК ДокументУвольнения,
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.Количество КАК ДнейОтпуска,
	|	ФактическиеОтпуска.РабочийПериодС КАК РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо КАК РабочийПериодПо,
	|	ПОДСТРОКА(ФактическиеОтпуска.ВидЕжегодногоОтпуска.Наименование, 1, 1) КАК ВидОтпуска
	|ПОМЕСТИТЬ ВТФактическиеОтпуска
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|ГДЕ
	|	ФактическиеОтпуска.Активность = ИСТИНА
	|	И ФактическиеОтпуска.Сотрудник = &Сотрудник
	|	И ФактическиеОтпуска.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТДокументы.ДокументУвольнения
	|			ИЗ
	|				ВТДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРеестрОтпусков.ДокументУвольнения КАК ДокументУвольнения,
	|	ВТРеестрОтпусков.Сотрудник КАК Сотрудник,
	|	ВТРеестрОтпусков.ОснованиеОтпуска КАК ОснованиеОтпуска,
	|	ВТРеестрОтпусков.РабочийГодС КАК РабочийГодС,
	|	ВТРеестрОтпусков.РабочийГодПо КАК РабочийГодПо,
	|	0 КАК ДнейОтпуска,
	|	ВТРеестрОтпусков.ВидОтпуска
	|ПОМЕСТИТЬ ВТОбщая
	|ИЗ
	|	ВТРеестрОтпусков КАК ВТРеестрОтпусков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТФактическиеОтпуска.ДокументУвольнения,
	|	ВТФактическиеОтпуска.Сотрудник,
	|	"""",
	|	ВТФактическиеОтпуска.РабочийПериодС,
	|	ВТФактическиеОтпуска.РабочийПериодПо,
	|	ВТФактическиеОтпуска.ДнейОтпуска,
	|	ВТФактическиеОтпуска.ВидОтпуска
	|ИЗ
	|	ВТФактическиеОтпуска КАК ВТФактическиеОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбщая.ДокументУвольнения КАК ДокументУвольнения,
	|	ВТОбщая.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТОбщая.ОснованиеОтпуска) КАК ОснованиеОтпуска,
	|	ВТОбщая.РабочийГодС КАК РабочийГодС,
	|	ВТОбщая.РабочийГодПо КАК РабочийГодПо,
	|	МАКСИМУМ(ВТОбщая.ДнейОтпуска) КАК ДнейОтпуска,
	|	ВТОбщая.ВидОтпуска КАК ВидОтпуска
	|ИЗ
	|	ВТОбщая КАК ВТОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОбщая.ДокументУвольнения,
	|	ВТОбщая.Сотрудник,
	|	ВТОбщая.РабочийГодПо,
	|	ВТОбщая.РабочийГодС,
	|	ВТОбщая.ВидОтпуска";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДоп = ЗапросДоп.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаДоп.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//уточним дни отпуска при уволении (компенсация)
	Для Каждого СтрокаОтпуска Из ДанныеЗаполнения Цикл
			
		ВидОтпускаПоиск = ВРег(Лев(СокрЛП(СтрокаОтпуска.ВидОтпуска), 1));
		Если Лев(СокрЛП(СтрокаОтпуска.ВидОтпуска), 11) = "Ежегодный д" Тогда
			ВидОтпускаПоиск = "Д";
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Сотрудник", 			Сотрудник);
		СтруктураПоиска.Вставить("ОснованиеОтпуска", 	СтрокаОтпуска.ОснованиеОтпуска);
		СтруктураПоиска.Вставить("РабочийГодС", 		СтрокаОтпуска.РабочийГодС);
		СтруктураПоиска.Вставить("РабочийГодПо", 		СтрокаОтпуска.РабочийГодПо);
		СтруктураПоиска.Вставить("ВидОтпуска", 			ВидОтпускаПоиск);
		
		НайденныеУточнения = ТаблицаДоп.НайтиСтроки(СтруктураПоиска);
		Если НайденныеУточнения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДнейОтпуска = СтрокаОтпуска.ДнейОтпуска;
		Для Каждого СтрокаУточнения Из НайденныеУточнения Цикл
			ДнейОтпуска = СтрокаУточнения.ДнейОтпуска;
		КонецЦикла;
		СтрокаОтпуска.ДнейОтпуска = ДнейОтпуска;
			
	КонецЦикла;
	
КонецПроцедуры
//<-- ОФК MSK-2016-00016 Дебов Игорь 16.12.2016

//--> ОФК Дебов Игорь 05.10.2017
Процедура ВывестиМакетT2_УточнитьДанныеПоОбразованию(ДополнительныеДанные, ФизическоеЛицо) Экспорт
	
	//выбор дополнительных данных
	
	ЗапросДоп = Новый Запрос;
	ЗапросДоп.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	ЗапросДоп.Текст =
	"ВЫБРАТЬ
	|	ОбразованиеФизическихЛиц.ВидОбразования,
	|	ОбразованиеФизическихЛиц.Окончание
	|ПОМЕСТИТЬ ВТВыборДанных
	|ИЗ
	|	Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
	|ГДЕ
	|	ОбразованиеФизическихЛиц.Владелец = &ФизическоеЛицо
	|	И ОбразованиеФизическихЛиц.ПометкаУдаления = ЛОЖЬ
	|	И ОбразованиеФизическихЛиц.ВидПослевузовскогоОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка)
	|	И ОбразованиеФизическихЛиц.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТВыборДанных.Окончание) КАК Окончание
	|ПОМЕСТИТЬ ВТСрезПоследних
	|ИЗ
	|	ВТВыборДанных КАК ВТВыборДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыборДанных.ВидОбразования
	|ИЗ
	|	ВТСрезПоследних КАК ВТСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыборДанных КАК ВТВыборДанных
	|		ПО ВТСрезПоследних.Окончание = ВТВыборДанных.Окончание";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДоп = ЗапросДоп.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаДоп.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//уточним последнее образование
	ДополнительныеДанные.Вставить("ЛичныеДанныеОбразованияОбразование", ТаблицаДоп[0].ВидОбразования);
	
КонецПроцедуры
//<-- ОФК Дебов Игорь 05.10.2017

#КонецОбласти

#Область Отчет_ЛицевыеСчетаСотрудников

//--> ОФК Дебов Игорь 29.03.2018
Процедура ВывестиСтрокиОбщихДанныхТ54_ИзменитьКадровуюИсторию(ПараметрыОтчетов, СтруктураВозврата) Экспорт
	
	//параметры
	ДатаНачала = ПараметрыОтчетов.Параметры.Период.ДатаНачала;
	ДатаОкончания = ПараметрыОтчетов.Параметры.Период.ДатаОкончания;
	
	МассивОклад = Новый Массив;
	МассивОклад.Добавить(ПланыВидовРасчета.Начисления.НайтиПоКоду("00001"));
	
	МассивНадбавки = Новый Массив;
	МассивНадбавки.Добавить(ПланыВидовРасчета.Начисления.НайтиПоКоду("ДДРаб"));
	МассивНадбавки.Добавить(ПланыВидовРасчета.Начисления.НайтиПоКоду("СОВМ "));
	
	//получаем таблицу сотрудников по которым были начисления
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.Период >= &ДатаНачала
	|	И НачисленияУдержанияПоСотрудникам.Период <= &ДатаОкончания
	|	И НачисленияУдержанияПоСотрудникам.Активность = ИСТИНА
	|	И НачисленияУдержанияПоСотрудникам.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаСотрудниковСНачислениями = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	//удалим сотрудников, которые не получали доход в периоде (пустые карточки)
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаСотрудника Из СтруктураВозврата.ДанныеОтчета.Строки Цикл
		СтруктураПоиска = Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник);
		НайденныеСтроки = ТаблицаСотрудниковСНачислениями.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекущийИндекс = СтруктураВозврата.ДанныеОтчета.Строки.Индекс(СтрокаСотрудника);
			МассивУдаляемыхСтрок.Добавить(ТекущийИндекс);
		КонецЕсли;
	КонецЦикла;
	
	мСписокЗначений = Новый СписокЗначений;
	мСписокЗначений.ЗагрузитьЗначения(МассивУдаляемыхСтрок);
	мСписокЗначений.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	МассивУдаляемыхСтрок = мСписокЗначений.ВыгрузитьЗначения();
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		СтруктураВозврата.ДанныеОтчета.Строки.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	//выбор данных на начало период
	ИмяВТСотрудникиОрганизации = "ВТСотрудникиОрганизацииПредварительно";
	КадровыеДанные = "ГоловнаяОрганизация,Организация,Подразделение,Должность,ВидЗанятости";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода = ДатаНачала;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода = ДатаНачала;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные = КадровыеДанные;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций, ИмяВТСотрудникиОрганизации);
	
	//формируем таблицу кадровых данных на начало периода
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТСотрудникиОрганизацииПредварительно.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
	|	ВЫРАЗИТЬ(ВТСотрудникиОрганизацииПредварительно.ФизическоеЛицо КАК Справочник.ФизическиеЛица) КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(ВТСотрудникиОрганизацииПредварительно.ГоловнаяОрганизация КАК Справочник.Организации) КАК ГоловнаяОрганизация,
	|	ВЫРАЗИТЬ(ВТСотрудникиОрганизацииПредварительно.Организация КАК Справочник.Организации) КАК Организация,
	|	ВЫРАЗИТЬ(ВТСотрудникиОрганизацииПредварительно.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
	|	ВЫРАЗИТЬ(ВТСотрудникиОрганизацииПредварительно.Должность КАК Справочник.Должности) КАК Должность,
	|	ВЫРАЗИТЬ(ВТСотрудникиОрганизацииПредварительно.ВидЗанятости КАК Перечисление.ВидыЗанятости) КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТСотрудникиОрганизацииПредварительно КАК ВТСотрудникиОрганизацииПредварительно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСотрудники.Сотрудник,
	|	ВТСотрудники.ФизическоеЛицо,
	|	ВТСотрудники.ГоловнаяОрганизация,
	|	ВТСотрудники.Организация,
	|	ВТСотрудники.Подразделение,
	|	ВТСотрудники.Должность,
	|	ВТСотрудники.ВидЗанятости,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные) КАК ВидСобытия,
	|	&ДатаНачала КАК Период,
	|	0 КАК ПользовательскиеПоляПоле1,
	|	0 КАК ПользовательскиеПоляПоле2
	|ИЗ
	|	ВТСотрудники КАК ВТСотрудники";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	//дополним таблицу кадровых данных начислениями, которые действуют на начало периода
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков1", ДатаНачала);
	
	ОтчетАнализФОТ = Отчеты.ОФК_АнализФОТБанка.Создать();
	Запрос.Текст = ОтчетАнализФОТ.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;
	ОтчетАнализФОТ = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРасчетныхДанных = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого СтрокаРасчетныхДанных Из ТаблицаРасчетныхДанных Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", СтрокаРасчетныхДанных.Сотрудник);
		НайденныеДанные = ТаблицаИсходныхДанных.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаДанных Из НайденныеДанные Цикл
			СтрокаДанных.ПользовательскиеПоляПоле1 = СтрокаРасчетныхДанных.Оклад;
			СтрокаДанных.ПользовательскиеПоляПоле2 = СтрокаРасчетныхДанных.Прочее;
		КонецЦикла;
		
	КонецЦикла;
	
	//формируем таблицу кадровых приказов за период
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Запрос.УстановитьПараметр("МассивОклад", 	МассивОклад);
	Запрос.УстановитьПараметр("МассивНадбавки", МассивНадбавки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботу.Сотрудник,
	|	ПриемНаРаботу.Ссылка КАК Регистратор,
	|	ПриемНаРаботу.Номер КАК РегистраторНомер,
	|	ПриемНаРаботу.Дата КАК РегистраторДата,
	|	ПриемНаРаботу.Организация,
	|	ПриемНаРаботу.Подразделение,
	|	ПриемНаРаботу.Должность,
	|	ПриемНаРаботу.ВидЗанятости,
	|	ПриемНаРаботу.Номер КАК ПользовательскиеПоляПоле3,
	|	ПриемНаРаботу.Дата КАК ПользовательскиеПоляПоле4,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
	|	ПриемНаРаботу.ДатаПриема КАК Период
	|ПОМЕСТИТЬ ВТПрием
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.ПометкаУдаления = ЛОЖЬ
	|	И ПриемНаРаботу.Проведен = ИСТИНА
	|	И ПриемНаРаботу.ДатаПриема >= &ДатаНачала
	|	И ПриемНаРаботу.ДатаПриема <= &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботуНачисления.Ссылка КАК Регистратор,
	|	СУММА(ВЫБОР
	|			КОГДА ПриемНаРаботуНачисления.Начисление В (&МассивОклад)
	|				ТОГДА ПриемНаРаботуНачисления.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПользовательскиеПоляПоле1,
	|	СУММА(ВЫБОР
	|			КОГДА ПриемНаРаботуНачисления.Начисление В (&МассивНадбавки)
	|				ТОГДА ПриемНаРаботуНачисления.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПользовательскиеПоляПоле2
	|ПОМЕСТИТЬ ВТПриемНачисления
	|ИЗ
	|	Документ.ПриемНаРаботу.Начисления КАК ПриемНаРаботуНачисления
	|ГДЕ
	|	ПриемНаРаботуНачисления.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТПрием.Регистратор
	|			ИЗ
	|				ВТПрием)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриемНаРаботуНачисления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыйПеревод.Сотрудник КАК Сотрудник,
	|	КадровыйПеревод.Ссылка КАК Регистратор,
	|	КадровыйПеревод.Номер КАК РегистраторНомер,
	|	КадровыйПеревод.Дата КАК РегистраторДата,
	|	КадровыйПеревод.Организация,
	|	КадровыйПеревод.Подразделение,
	|	КадровыйПеревод.Должность,
	|	КадровыйПеревод.ВидЗанятости,
	|	0 КАК ПользовательскиеПоляПоле1,
	|	0 КАК ПользовательскиеПоляПоле2,
	|	КадровыйПеревод.Номер КАК ПользовательскиеПоляПоле3,
	|	КадровыйПеревод.Дата КАК ПользовательскиеПоляПоле4,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
	|	КадровыйПеревод.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТПереводы
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|ГДЕ
	|	КадровыйПеревод.ПометкаУдаления = ЛОЖЬ
	|	И КадровыйПеревод.Проведен = ИСТИНА
	|	И КадровыйПеревод.ДатаНачала >= &ДатаНачала
	|	И КадровыйПеревод.ДатаНачала <= &ДатаОкончания
	|	И (КадровыйПеревод.ИзменитьПодразделениеИДолжность = ИСТИНА
	|			ИЛИ КадровыйПеревод.ИзменитьНачисления = ИСТИНА)
	|	И КадровыйПеревод.ОФК_НеОтражатьВТ2 = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыйПереводНачисления.Ссылка КАК Регистратор,
	|	СУММА(ВЫБОР
	|			КОГДА КадровыйПереводНачисления.Начисление В (&МассивОклад)
	|				ТОГДА КадровыйПереводНачисления.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПользовательскиеПоляПоле1,
	|	СУММА(ВЫБОР
	|			КОГДА КадровыйПереводНачисления.Начисление В (&МассивНадбавки)
	|				ТОГДА КадровыйПереводНачисления.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПользовательскиеПоляПоле2
	|ПОМЕСТИТЬ ВТПереводыНачисления
	|ИЗ
	|	Документ.КадровыйПеревод.Начисления КАК КадровыйПереводНачисления
	|ГДЕ
	|	КадровыйПереводНачисления.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТПереводы.Регистратор
	|			ИЗ
	|				ВТПереводы)
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПереводНачисления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Увольнение.Сотрудник,
	|	Увольнение.Ссылка КАК Регистратор,
	|	Увольнение.Номер КАК РегистраторНомер,
	|	Увольнение.Дата КАК РегистраторДата,
	|	Увольнение.Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Должность,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗанятости,
	|	0 КАК ПользовательскиеПоляПоле1,
	|	0 КАК ПользовательскиеПоляПоле2,
	|	Увольнение.Номер КАК ПользовательскиеПоляПоле3,
	|	Увольнение.Дата КАК ПользовательскиеПоляПоле4,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
	|	Увольнение.ДатаУвольнения КАК Период
	|ПОМЕСТИТЬ ВТУвольнения
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.ПометкаУдаления = ЛОЖЬ
	|	И Увольнение.Проведен = ИСТИНА
	|	И Увольнение.ДокументРассчитан = ИСТИНА
	|	И Увольнение.ДатаУвольнения >= &ДатаНачала
	|	И Увольнение.ДатаУвольнения <= &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПрием.Сотрудник КАК Сотрудник,
	|	ВТПрием.Регистратор,
	|	ВТПрием.РегистраторНомер,
	|	ВТПрием.РегистраторДата,
	|	ВТПрием.Организация,
	|	ВТПрием.Подразделение,
	|	ВТПрием.Должность,
	|	ВТПрием.ВидЗанятости,
	|	ЕСТЬNULL(ВТПриемНачисления.ПользовательскиеПоляПоле1, 0) КАК ПользовательскиеПоляПоле1,
	|	ЕСТЬNULL(ВТПриемНачисления.ПользовательскиеПоляПоле2, 0) КАК ПользовательскиеПоляПоле2,
	|	ВТПрием.ПользовательскиеПоляПоле3,
	|	ВТПрием.ПользовательскиеПоляПоле4,
	|	ВТПрием.ВидСобытия,
	|	ВТПрием.Период КАК Период
	|ПОМЕСТИТЬ ВТОбщая
	|ИЗ
	|	ВТПрием КАК ВТПрием
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриемНачисления КАК ВТПриемНачисления
	|		ПО ВТПрием.Регистратор = ВТПриемНачисления.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПереводы.Сотрудник,
	|	ВТПереводы.Регистратор,
	|	ВТПереводы.РегистраторНомер,
	|	ВТПереводы.РегистраторДата,
	|	ВТПереводы.Организация,
	|	ВТПереводы.Подразделение,
	|	ВТПереводы.Должность,
	|	ВТПереводы.ВидЗанятости,
	|	ЕСТЬNULL(ВТПереводыНачисления.ПользовательскиеПоляПоле1, 0),
	|	ЕСТЬNULL(ВТПереводыНачисления.ПользовательскиеПоляПоле2, 0),
	|	ВТПереводы.ПользовательскиеПоляПоле3,
	|	ВТПереводы.ПользовательскиеПоляПоле4,
	|	ВТПереводы.ВидСобытия,
	|	ВТПереводы.Период
	|ИЗ
	|	ВТПереводы КАК ВТПереводы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереводыНачисления КАК ВТПереводыНачисления
	|		ПО ВТПереводы.Регистратор = ВТПереводыНачисления.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТУвольнения.Сотрудник,
	|	ВТУвольнения.Регистратор,
	|	ВТУвольнения.РегистраторНомер,
	|	ВТУвольнения.РегистраторДата,
	|	ВТУвольнения.Организация,
	|	ВТУвольнения.Подразделение,
	|	ВТУвольнения.Должность,
	|	ВТУвольнения.ВидЗанятости,
	|	ВТУвольнения.ПользовательскиеПоляПоле1,
	|	ВТУвольнения.ПользовательскиеПоляПоле2,
	|	ВТУвольнения.ПользовательскиеПоляПоле3,
	|	ВТУвольнения.ПользовательскиеПоляПоле4,
	|	ВТУвольнения.ВидСобытия,
	|	ВТУвольнения.Период
	|ИЗ
	|	ВТУвольнения КАК ВТУвольнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбщая.Сотрудник КАК Сотрудник,
	|	ВТОбщая.Регистратор,
	|	ВТОбщая.РегистраторНомер,
	|	ВТОбщая.РегистраторДата,
	|	ВТОбщая.Организация,
	|	ВТОбщая.Подразделение,
	|	ВТОбщая.Должность,
	|	ВТОбщая.ВидЗанятости,
	|	ВТОбщая.ПользовательскиеПоляПоле1,
	|	ВТОбщая.ПользовательскиеПоляПоле2,
	|	ВТОбщая.ПользовательскиеПоляПоле3,
	|	ВТОбщая.ПользовательскиеПоляПоле4,
	|	ВТОбщая.ВидСобытия,
	|	ВТОбщая.Период КАК Период
	|ИЗ
	|	ВТОбщая КАК ВТОбщая
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Период";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПриказов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	//обновление данных в итоговом дереве
	Для Каждого СтрокаСотрудника Из СтруктураВозврата.ДанныеОтчета.Строки Цикл
		
		//проверка
		Если СтрокаСотрудника.Сотрудник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//обнулим итоги
		СтрокаСотрудника.ПользовательскиеПоляПоле1 = 0;
		СтрокаСотрудника.ПользовательскиеПоляПоле2 = 0;
		
		//удаляем текущие строки
		СтрокаСотрудника.Строки.Очистить();
		
		//струткура поиска
		СтруктураПоиска = Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник);
		
		//добавляем данные на начало
		НайденныеСтроки = ТаблицаИсходныхДанных.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаНаНачало = СтрокаСотрудника.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНаНачало, НайденныеСтроки[0]);
			
		КонецЕсли;
		
		//добавляем кадровые приказы за период (прием, перевод, увольнение)
		НайденныеСтроки = ТаблицаПриказов.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			СтрокаНаНачало = СтрокаСотрудника.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНаНачало, НайденнаяСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
//<-- ОФК Дебов Игорь 29.03.2018

#КонецОбласти

#Область Дополнительные

//--> ОФК Дебов Игорь 01.11.2016
Функция ПолучитьСведенияОбОтветственныхЛицах(Организация, ДатаДанных) Экспорт
	
	//справочно: используется в других отчетах
	
	//параметры
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Руководитель",						Справочники.ФизическиеЛица.ПустаяСсылка());
	СтруктураПараметров.Вставить("РуководительФИО",						"");
	СтруктураПараметров.Вставить("ДолжностьРуководителя",				"");
	СтруктураПараметров.Вставить("РуководительПодпись",					"_____________________________  _____________________________  _____________________________");
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",					Справочники.ФизическиеЛица.ПустаяСсылка());
	СтруктураПараметров.Вставить("ГлавныйБухгалтерФИО",					"");
	СтруктураПараметров.Вставить("ДолжностьГлавныйБухгалтер",			"");
	СтруктураПараметров.Вставить("ГлавныйБухгалтерПодпись",				"_____________________________  _____________________________  _____________________________");
	СтруктураПараметров.Вставить("РуководительКадровойСлужбы",			Справочники.ФизическиеЛица.ПустаяСсылка());
	СтруктураПараметров.Вставить("РуководительКадровойСлужбыФИО",		"");
	СтруктураПараметров.Вставить("ДолжностьРуководителяКадровойСлужбы",	"");
	СтруктураПараметров.Вставить("РуководительКадровойСлужбыПодпись",	"_____________________________  _____________________________  _____________________________");
	
	//чтение данных
	ЗапросОтветсвенныеЛица = Новый Запрос;
	ЗапросОтветсвенныеЛица.УстановитьПараметр("Организация", Организация);
	ЗапросОтветсвенныеЛица.УстановитьПараметр("ДатаДанных", НачалоДня(ДатаДанных));
	
	ЗапросОтветсвенныеЛица.Текст =
	"ВЫБРАТЬ
	|	СведенияОбОтветственныхЛицахСрезПоследних.Руководитель,
	|	СведенияОбОтветственныхЛицахСрезПоследних.ДолжностьРуководителя,
	|	СведенияОбОтветственныхЛицахСрезПоследних.ГлавныйБухгалтер,
	|	СведенияОбОтветственныхЛицахСрезПоследних.РуководительКадровойСлужбы,
	|	СведенияОбОтветственныхЛицахСрезПоследних.ДолжностьРуководителяКадровойСлужбы
	|ПОМЕСТИТЬ ВТОтветсвенныеЛица
	|ИЗ
	|	РегистрСведений.СведенияОбОтветственныхЛицах.СрезПоследних(&ДатаДанных, Организация = &Организация) КАК СведенияОбОтветственныхЛицахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо,
	|	МАКСИМУМ(КадроваяИсторияСотрудниковСрезПоследних.Должность) КАК Должность
	|ПОМЕСТИТЬ ВТКадровыеДанные
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|			&ДатаДанных,
	|			Организация = &Организация
	|				И ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						ВТОтветсвенныеЛица.ГлавныйБухгалтер
	|					ИЗ
	|						ВТОтветсвенныеЛица)) КАК КадроваяИсторияСотрудниковСрезПоследних
	|ГДЕ
	|	КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|
	|СГРУППИРОВАТЬ ПО
	|	КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтветсвенныеЛица.Руководитель,
	|	ВТОтветсвенныеЛица.ДолжностьРуководителя,
	|	ВТОтветсвенныеЛица.ГлавныйБухгалтер,
	|	ЕСТЬNULL(ВТКадровыеДанные.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ДолжностьГлавныйБухгалтер,
	|	ВТОтветсвенныеЛица.РуководительКадровойСлужбы,
	|	ВТОтветсвенныеЛица.ДолжностьРуководителяКадровойСлужбы
	|ИЗ
	|	ВТОтветсвенныеЛица КАК ВТОтветсвенныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанные КАК ВТКадровыеДанные
	|		ПО ВТОтветсвенныеЛица.ГлавныйБухгалтер = ВТКадровыеДанные.ФизическоеЛицо";
	
	ТаблицаОтветсвенных = ЗапросОтветсвенныеЛица.Выполнить().Выгрузить();
	
	Если ТаблицаОтветсвенных.Количество() > 0 Тогда
		
		СтрокаОтветсвенныеЛица = ТаблицаОтветсвенных[0];
		
		МассивФизЛиц=Новый Массив;
		МассивФизЛиц.Добавить(СтрокаОтветсвенныеЛица.Руководитель);
		МассивФизЛиц.Добавить(СтрокаОтветсвенныеЛица.ГлавныйБухгалтер);
		МассивФизЛиц.Добавить(СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы);
		СоответствиеФИО=ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(НачалоДня(ДатаДанных), МассивФизЛиц);
		
		Если НЕ СтрокаОтветсвенныеЛица.Руководитель = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			
			РуководительФИО = СокрЛП(СтрокаОтветсвенныеЛица.Руководитель);
			СоответствиеФИОЗначение = СоответствиеФИО.Получить(СтрокаОтветсвенныеЛица.Руководитель);
			Если НЕ СоответствиеФИОЗначение = Неопределено Тогда
				РуководительФИО = ВРег(Лев(СоответствиеФИОЗначение.Имя,1))+"."+ВРег(Лев(СоответствиеФИОЗначение.Отчество,1))+". "+СоответствиеФИОЗначение.Фамилия;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("Руководитель", СтрокаОтветсвенныеЛица.Руководитель);
			СтруктураПараметров.Вставить("РуководительФИО", РуководительФИО);
			СтруктураПараметров.Вставить("ДолжностьРуководителя", СокрЛП(СтрокаОтветсвенныеЛица.ДолжностьРуководителя));
			СтруктураПараметров.Вставить("РуководительПодпись", СтруктураПараметров.ДолжностьРуководителя + "  _____________________________  " + СтруктураПараметров.РуководительФИО);
			
		КонецЕсли;
		
		Если НЕ СтрокаОтветсвенныеЛица.ГлавныйБухгалтер = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			
			ГлавныйБухгалтерФИО = СокрЛП(СтрокаОтветсвенныеЛица.ГлавныйБухгалтер);
			СоответствиеФИОЗначение = СоответствиеФИО.Получить(СтрокаОтветсвенныеЛица.ГлавныйБухгалтер);
			Если НЕ СоответствиеФИОЗначение = Неопределено Тогда
				ГлавныйБухгалтерФИО = ВРег(Лев(СоответствиеФИОЗначение.Имя,1))+"."+ВРег(Лев(СоответствиеФИОЗначение.Отчество,1))+". "+СоответствиеФИОЗначение.Фамилия;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("ГлавныйБухгалтер", СтрокаОтветсвенныеЛица.ГлавныйБухгалтер);
			СтруктураПараметров.Вставить("ГлавныйБухгалтерФИО", ГлавныйБухгалтерФИО);
			СтруктураПараметров.Вставить("ДолжностьГлавныйБухгалтер", СокрЛП(СтрокаОтветсвенныеЛица.ДолжностьГлавныйБухгалтер));
			СтруктураПараметров.Вставить("ГлавныйБухгалтерПодпись", СтруктураПараметров.ДолжностьГлавныйБухгалтер + "  _____________________________  " + СтруктураПараметров.ГлавныйБухгалтерФИО);
			
		КонецЕсли;
		
		Если НЕ СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			
			РуководительКадровойСлужбыФИО = СокрЛП(СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы);
			СоответствиеФИОЗначение = СоответствиеФИО.Получить(СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы);
			Если НЕ СоответствиеФИОЗначение = Неопределено Тогда
				РуководительКадровойСлужбыФИО = ВРег(Лев(СоответствиеФИОЗначение.Имя,1))+"."+ВРег(Лев(СоответствиеФИОЗначение.Отчество,1))+". "+СоответствиеФИОЗначение.Фамилия;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("РуководительКадровойСлужбы", СтрокаОтветсвенныеЛица.РуководительКадровойСлужбы);
			СтруктураПараметров.Вставить("РуководительКадровойСлужбыФИО", РуководительКадровойСлужбыФИО);
			СтруктураПараметров.Вставить("ДолжностьРуководителяКадровойСлужбы", СокрЛП(СтрокаОтветсвенныеЛица.ДолжностьРуководителяКадровойСлужбы));
			СтруктураПараметров.Вставить("РуководительКадровойСлужбыПодпись", СтруктураПараметров.ДолжностьРуководителяКадровойСлужбы + "  _____________________________  " + СтруктураПараметров.РуководительКадровойСлужбыФИО);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//завершение
	Возврат СтруктураПараметров;
	
КонецФункции
//<-- ОФК Дебов Игорь 01.11.2016

#КонецОбласти
