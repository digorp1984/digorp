общий модуль - ОФК_МенеджерРасчетаЗарплаты


#Область РАСЧЕТЫ

//--> ОФК Дебов Игорь 20.12.2016
//	процедура предназначена для дополнения или изменения итогов типового расчета
Процедура РассчитатьНачисленияДополнить(Зарплата, ПараметрыРасчета) Экспорт
	
	// расчет аванса
	Если ТипЗнч(ПараметрыРасчета.ДокументСсылка) = Тип("ДокументСсылка.НачислениеЗаПервуюПоловинуМесяца") Тогда
		
		//изменим параметры расчета
		ПараметрыРасчета.НастройкиРасчета.РассчитыватьВзносы = Ложь;
		ПараметрыРасчета.НастройкиРасчета.РассчитыватьДоговорыПодряда = Ложь;
		ПараметрыРасчета.НастройкиРасчета.РассчитыватьЗаймы = Ложь;
		ПараметрыРасчета.НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Ложь;
		ПараметрыРасчета.НастройкиРасчета.РассчитыватьНДФЛ = Ложь;
		ПараметрыРасчета.НастройкиРасчета.РассчитыватьУдержания = Ложь;
		
		//очистка таблиц
		Зарплата.Взносы.Очистить();
		Зарплата.ДоговорыПодряда.Очистить();
		Зарплата.КорректировкиВыплаты.Очистить();
		Зарплата.НДФЛ.Очистить();
		Зарплата.ПогашениеЗаймов.Очистить();
		Зарплата.Удержания.Очистить();
		
		//переход в процедуру расчета аванса
		РассчитатьАвансСотруднику(Зарплата.Начисления, ПараметрыРасчета);
		
	КонецЕсли;
	
	// расчет больничного листа
	Если ТипЗнч(ПараметрыРасчета.ДокументСсылка) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		
		//справочно: в менеджер расчета были добавлены дополнительные реквизиты,
		//	а так же перед основным расчетом обновляется - средний (по правилам ОФК) для расчета доплаты.
		
		ОФК_ДоплатаДоПолногоСреднего = Ложь;
		Если ПараметрыРасчета.НастройкиРасчета.Свойство("ОФК_ДоплатаДоПолногоСреднего") = Истина Тогда
			ОФК_ДоплатаДоПолногоСреднего = ПараметрыРасчета.НастройкиРасчета.ОФК_ДоплатаДоПолногоСреднего;
		КонецЕсли;
		
		Если ОФК_ДоплатаДоПолногоСреднего = Истина И Зарплата.Начисления.Количество() > 0 Тогда
			РасчетДоплатыДоПолногоСреднего(Зарплата.Начисления, ПараметрыРасчета)
		КонецЕсли;
		
	КонецЕсли;
	
	//........

КонецПроцедуры
//<-- ОФК Дебов Игорь 20.12.2016

#КонецОбласти

#Область Документ_БольничныйЛист

//--> ОФК Дебов Игорь 17.01.2017
Процедура РасчетСреднегоДляРасчетаДоплаты(Объект) Экспорт
	
	//проверка
	Если Объект.ОФК_ДоплатаДоПолногоСреднего = Ложь Тогда
		Возврат;
	КонецЕсли;
	Если Объект.СреднийЗаработокОбщий.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	//параметры
	ВидРасчетаОтпуска = ПланыВидовРасчета.Начисления.НайтиПоКоду("00041");
	ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(Объект.ДатаНачалаСобытия, Объект.Сотрудник, ВидРасчетаОтпуска);
	
	//расчет среднего
	УчетСреднегоЗаработка.ОбновитьДанныеОбщегоСреднегоЗаработка(
		Новый Структура("ДанныеОНачислениях, ДанныеОВремени", 
		Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий), 
		Объект.ДатаНачалаСобытия, 
		ПериодРасчетаСреднего.ДатаНачала, 
		ПериодРасчетаСреднего.ДатаОкончания,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), , 
		Объект.Ссылка);
	
	//уберем начислениям учитываемые частично в расчете среднего (квартальная премия, годовая премия, вознаграждение членом правления)
	Сч = Объект.СреднийЗаработокОбщий.Количество()-1;
	Пока Сч >= 0 Цикл			
		СтрокаСреднийЗаработок = Объект.СреднийЗаработокОбщий[Сч];
					
		Если СтрокаСреднийЗаработок.КоличествоМесяцев = 12 ИЛИ СтрокаСреднийЗаработок.КоличествоМесяцев = 3 
			ИЛИ СтрокаСреднийЗаработок.СоставнаяЧасть=Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой 
			ИЛИ СтрокаСреднийЗаработок.СоставнаяЧасть=Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом Тогда
			Объект.СреднийЗаработокОбщий.Удалить(Сч);
		КонецЕсли;
			
		Сч = Сч - 1;		
	КонецЦикла;
		
	ДанныеОбИндексации = Новый ТаблицаЗначений;
	
	ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	ДополнительныеПараметры.НачалоПериода = ПериодРасчетаСреднего.ДатаНачала;
	ДополнительныеПараметры.ОкончаниеПериода = ПериодРасчетаСреднего.ДатаОкончания;
	ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
	ДополнительныеПараметры.ПоЧасам = Ложь;
	ДополнительныеПараметры.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ДополнительныеПараметры.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням;
	
	Объект.ОФК_СреднийДневнойЗаработокФактический = УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработокОбщий(
				Объект.СреднийЗаработокОбщий, 
		        Объект.ОтработанноеВремяДляСреднегоОбщий, 
                ДополнительныеПараметры);
	
КонецПроцедуры
//<-- ОФК Дебов Игорь 17.01.2017

//--> ОФК Дебов Игорь 28.12.2016 | 18.01.2017
Процедура РасчетДоплатыДоПолногоСреднего(Начисления, ПараметрыРасчета)
	
	//параметры
	ВидРасчетаБЛРаботодатель = ПланыВидовРасчета.Начисления.НайтиПоКоду("00025"); // Больничный за счет работодателя
	ВидРасчетаБЛФСС = ПланыВидовРасчета.Начисления.НайтиПоКоду("00021"); // больничный за счет ФСС
	ВидРасчетаДоплата = ПланыВидовРасчета.Начисления.НайтиПоКоду("00026"); // доплата за дни болезни
	
	Показатель1 = Справочники.ПоказателиРасчетаЗарплаты.КалендарныеДни;
	Показатель2 = Справочники.ПоказателиРасчетаЗарплаты.РасчетнаяБаза;
	Показатель3 = Справочники.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС;
	Показатель4 = Справочники.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаДниНетрудоспособности;
	
	//удаление предыдущих начислений по доплате
	УдаляемыеСтроки = Начисления.НайтиСтроки(Новый Структура("Начисление", ВидРасчетаДоплата));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Начисления.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	//определим базовое значение строки
	БазоваяСтрока = Начисления[0];
	
	//определим сотрудник + подразделение
	Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	Для Каждого СтрокаНачисления Из Начисления Цикл
		Если ЗначениеЗаполнено(СтрокаНачисления.Сотрудник) Тогда
			Сотрудник  = СтрокаНачисления.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	//определим суммы начислений работ + за счет ФСС
	НачисленоРаботодатель = 0;
	НачисленоФСС = 0;
	Для Каждого СтрокаНачисления Из Начисления Цикл
		Если СтрокаНачисления.Начисление = ВидРасчетаБЛРаботодатель Тогда
			НачисленоРаботодатель = НачисленоРаботодатель + СтрокаНачисления.Результат;
		КонецЕсли;
		Если СтрокаНачисления.Начисление = ВидРасчетаБЛФСС Тогда
			НачисленоФСС = НачисленоФСС + СтрокаНачисления.Результат;
		КонецЕсли;
	КонецЦикла;
	
	//контроль дней оплаты (в рамках года компенсировать не более 28 дней)
	ЛимитДнейОплаты = 28;
	ОплаченоДнейРанее = 0;
	ПревышениеЛимитаДней = 0;
	ИтогоОплаченоДней = (ПараметрыРасчета.НастройкиРасчета.ДатаОкончанияОплаты - ПараметрыРасчета.НастройкиРасчета.ДатаНачалаОплаты) / 86400 + 1;
	
	ЭтоПереходящийБЛ = Ложь;
	Если НЕ Год(ПараметрыРасчета.НастройкиРасчета.ДатаНачалаОплаты) = Год(ПараметрыРасчета.НастройкиРасчета.ДатаОкончанияОплаты) Тогда
		ЭтоПереходящийБЛ = Истина;
	КонецЕсли;
	
	ЗапросОплачено = Новый Запрос;
	ЗапросОплачено.УстановитьПараметр("БЛТекущий", 			ПараметрыРасчета.ДокументСсылка);
	ЗапросОплачено.УстановитьПараметр("ВидРасчетаДоплата", 	ВидРасчетаДоплата);
	ЗапросОплачено.УстановитьПараметр("Организация", 		ПараметрыРасчета.Организация);
	ЗапросОплачено.УстановитьПараметр("Сотрудник", 			Сотрудник);
	ЗапросОплачено.УстановитьПараметр("ДатаНачало", 		НачалоГода(ПараметрыРасчета.НастройкиРасчета.ДатаНачалаОплаты));
	ЗапросОплачено.УстановитьПараметр("ДатаКонец", 			КонецДня(ПараметрыРасчета.НастройкиРасчета.ДатаНачалаОплаты));
	
	ЗапросОплачено.Текст =
	"ВЫБРАТЬ
	|	СУММА(ОтработанноеВремяПоСотрудникам.ОплаченоДней) КАК ОплаченоДней,
	|	ОтработанноеВремяПоСотрудникам.Сотрудник
	|ИЗ
	|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
	|ГДЕ
	|	ОтработанноеВремяПоСотрудникам.Активность = ИСТИНА
	|	И ОтработанноеВремяПоСотрудникам.Организация = &Организация
	|	И ОтработанноеВремяПоСотрудникам.Сотрудник = &Сотрудник
	|	И ОтработанноеВремяПоСотрудникам.Начисление = &ВидРасчетаДоплата
	|	И ОтработанноеВремяПоСотрудникам.Регистратор <> &БЛТекущий
	|	И ОтработанноеВремяПоСотрудникам.ПериодДействия >= &ДатаНачало
	|	И ОтработанноеВремяПоСотрудникам.ПериодДействия <= &ДатаКонец
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработанноеВремяПоСотрудникам.Сотрудник";
	
	ТаблицаОплаченоДней = ЗапросОплачено.Выполнить().Выгрузить();
	Если ТаблицаОплаченоДней.Количество() > 0 Тогда
		ОплаченоДнейРанее = ТаблицаОплаченоДней[0].ОплаченоДней;
	КонецЕсли;
	
	Если (ОплаченоДнейРанее + ИтогоОплаченоДней) > ЛимитДнейОплаты И ЭтоПереходящийБЛ = Ложь Тогда
		
		//расчет превышения
		ПревышениеЛимитаДней = ОплаченоДнейРанее + ИтогоОплаченоДней - ЛимитДнейОплаты;
		ИтогоОплаченоДней  = ИтогоОплаченоДней - ПревышениеЛимитаДней;
		Если ИтогоОплаченоДней < 0 Тогда
			ИтогоОплаченоДней = 0;
		КонецЕсли;
		
		//инф. сообщение
		ТекстСообщения = НСтр("ru = 'Превышен лимит дней (всего 28) доплаты до полного среднего за " + Формат(Год(ПараметрыРасчета.НастройкиРасчета.ДатаНачалаОплаты), "ЧДЦ=; ЧГ=0") + " год. Дней превышения: " + СокрЛП(ПревышениеЛимитаДней) + "'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Если ИтогоОплаченоДней = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//определение максимального значения идентификатора строки
	ИдентификаторСтроки = 0;
	Для Каждого СтрокаНачисления Из Начисления Цикл
		ИдентификаторСтроки = Макс(ИдентификаторСтроки, СтрокаНачисления.ИдентификаторСтроки);
	КонецЦикла;
	
	//установим значение фиксированного расчета для типовых начислений,
	//	для того что бы при перерасчете не слетали суммы
	ИдентификаторСтроки = 0;
	Для Каждого СтрокаНачисления Из Начисления Цикл
		СтрокаНачисления.ФиксРасчет = Истина;
	КонецЦикла;
	
	//формирование строк доплаты
	Коэффициенты = Новый Массив;
	СтрокиДоплаты = Новый Массив;
	
	Если ПревышениеЛимитаДней = 0 Тогда
		//доплата исходя из общих сумм
		ДоплатаДоПолногоСреднего = (ПараметрыРасчета.НастройкиРасчета.ОФК_СреднийДневнойЗаработокФактический * ИтогоОплаченоДней) - НачисленоРаботодатель - НачисленоФСС;
	Иначе
		//высчитываем разницу на определенное кол-во дней
		ДоплатаДоПолногоСреднего = (ПараметрыРасчета.НастройкиРасчета.ОФК_СреднийДневнойЗаработокФактический - ПараметрыРасчета.НастройкиРасчета.СреднийДневнойЗаработок) * ИтогоОплаченоДней;
	КонецЕсли;
	Если ДоплатаДоПолногоСреднего <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПериодДатаНачала = КонецДня(ПараметрыРасчета.НастройкиРасчета.ДатаНачалаОплаты);
	Пока ИтогоОплаченоДней > 0 Цикл
		
		//расчет дней оплаты в строке (может быть несколько строк в зависимости от периода)
		ПериодДатаОкончания = ПериодДатаНачала + ((ИтогоОплаченоДней - 1) * 86400);
		Если ПериодДатаОкончания > КонецМесяца(ПериодДатаНачала) Тогда
			ПериодДатаОкончания = КонецМесяца(ПериодДатаНачала);
		КонецЕсли;
		ОплаченоДнейВСтроке = (ПериодДатаОкончания - ПериодДатаНачала) / 86400 + 1;
		
		//добавим данные по начислению
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		СтрокаДоплаты = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоплаты, БазоваяСтрока, , "Дополнительно,ИзвестныеПоказатели,Категория,РаспределениеПоСтатьям,ТерриторииУсловияТруда");
		СтрокаДоплаты.Показатели.Очистить();
		СтрокаДоплаты.ИдентификаторСтроки = ИдентификаторСтроки;
		
		СтрокаДоплаты.Начисление = 		ВидРасчетаДоплата;
		СтрокаДоплаты.ДатаНачала = 		ПериодДатаНачала;			
		СтрокаДоплаты.ДатаОкончания = 	ПериодДатаОкончания;
		СтрокаДоплаты.ОплаченоДней = 	ОплаченоДнейВСтроке;
		СтрокаДоплаты.ОплаченоЧасов = 	0;
		СтрокаДоплаты.ФиксРасчет = 		Истина;
		
		//добавим данные по показателям, т.к. используется типовый вид расчета, а для него в менеджере расчета заложена логика расчета и перерасчетов,
		//	и если нет показателей, то вылетает в ошибку
		НовыйПоказатель = СтрокаДоплаты.Показатели.Добавить();
		НовыйПоказатель.Показатель = Показатель1;
		НовыйПоказатель.Значение = ОплаченоДнейВСтроке;
		НовыйПоказатель.ИдентификаторСтроки = СтрокаДоплаты.ИдентификаторСтроки;
		
		НовыйПоказатель = СтрокаДоплаты.Показатели.Добавить();
		НовыйПоказатель.Показатель = Показатель2;
		НовыйПоказатель.Значение = 0;
		НовыйПоказатель.ИдентификаторСтроки = СтрокаДоплаты.ИдентификаторСтроки;
		
		НовыйПоказатель = СтрокаДоплаты.Показатели.Добавить();
		НовыйПоказатель.Показатель = Показатель4;
		НовыйПоказатель.Значение = 100;
		НовыйПоказатель.ИдентификаторСтроки = СтрокаДоплаты.ИдентификаторСтроки;
		
		//сдвиг
		ПериодДатаНачала = КонецДня(ПериодДатаОкончания + 1);
		ИтогоОплаченоДней = ИтогоОплаченоДней - ОплаченоДнейВСтроке;
		
		//запись коэф. что бы потом распределить сумму по нескольким строкам (разные периоды)
		Коэффициенты.Добавить(ОплаченоДнейВСтроке);
		СтрокиДоплаты.Добавить(СтрокаДоплаты);
		
	КонецЦикла;
	
	//запись сумм доплаты
	МассивСуммДоплаты = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДоплатаДоПолногоСреднего, Коэффициенты);
	Для Счетчик = 0 По (Коэффициенты.Количество() - 1) Цикл
		
		СтрокиДоплаты[Счетчик].Результат = МассивСуммДоплаты[Счетчик];
		
		НовыйПоказатель = СтрокиДоплаты[Счетчик].Показатели.Добавить();
		НовыйПоказатель.Показатель = Показатель3;
		НовыйПоказатель.Значение = ?(СтрокиДоплаты[Счетчик].ОплаченоДней = 0, 0, Окр(МассивСуммДоплаты[Счетчик] / СтрокиДоплаты[Счетчик].ОплаченоДней, 2));
		НовыйПоказатель.ИдентификаторСтроки = СтрокаДоплаты.ИдентификаторСтроки;
		
	КонецЦикла;
	
КонецПроцедуры
//<-- ОФК Дебов Игорь 28.12.2016 | 18.01.2017

#КонецОбласти

#Область Аванс

//--> ОФК MSK-2016-00076 Дебов Игорь 20.12.2016 | 22.12.2016
//	расчет аванса, алгоритм ОФК
Процедура РассчитатьАвансСотруднику(Начисления, ПараметрыРасчета)
	
	//----------------------------------------------------------------------------------
	//1. параметры
	//----------------------------------------------------------------------------------
	Организация = ПараметрыРасчета.Организация;
	ДатаНачала = ПараметрыРасчета.МесяцНачисления;
	ДатаОкончания = КонецДня(ПараметрыРасчета.ДокументСсылка.ОкончаниеПериодаНачисления);
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.ДокументСсылка) Тогда
		ДатаОкончания = Дата(Год(ДатаНачала), Месяц(ДатаНачала), 15, 23, 59, 59);
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	КоэфАванса = РассчитатьАвансСотруднику_ПолучитьПроцентРасчетаАванса(Организация, ДатаНачала);
	
	//----------------------------------------------------------------------------------
	//2. обработка исходных данных
	//----------------------------------------------------------------------------------
	
	//удаление повторов (бывает, что система разбивает период начисления и аванс задваивается)
	ТаблицаКонтроля = Новый ТаблицаЗначений;
	ТаблицаКонтроля.Колонки.Добавить("Сотрудник");
	ТаблицаКонтроля.Колонки.Добавить("Подразделение");
	ТаблицаКонтроля.Колонки.Добавить("Начисление");
	ТаблицаКонтроля.Колонки.Добавить("Колво");
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаДанных Из Начисления Цикл
		НоваяСтрока = ТаблицаКонтроля.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.Колво = 1;
	КонецЦикла;
	
	ТаблицаКонтроля.Свернуть("Сотрудник, Подразделение, Начисление", "Колво");
	Для Каждого СтрокаКонтроля Из ТаблицаКонтроля Цикл
		
		Если СтрокаКонтроля.Колво = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		КолвоСтрокУдалить = СтрокаКонтроля.Колво - 1;
		Для Каждого СтрокаДанных Из Начисления Цикл
			
			Если НЕ СтрокаКонтроля.Сотрудник = СтрокаДанных.Сотрудник ИЛИ НЕ СтрокаКонтроля.Начисление = СтрокаДанных.Начисление
				ИЛИ НЕ СтрокаКонтроля.Начисление = СтрокаДанных.Начисление Тогда
				Продолжить;
			КонецЕсли;
			
			Если КолвоСтрокУдалить > 0 Тогда
				КолвоСтрокУдалить = КолвоСтрокУдалить - 1;
				МассивУдаляемыхСтрок.Добавить(СтрокаДанных);
			Иначе
				СтрокаДанных.НачалоБазовогоПериода = ДатаНачала;
				СтрокаДанных.ОкончаниеБазовогоПериода = ДатаОкончания;
				СтрокаДанных.ДатаНачала = ДатаНачала;
				СтрокаДанных.ДатаОкончания = ДатаОкончания;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		Начисления.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	МассивУдаляемыхСтрок.Очистить();
	
	//удаление уволенных в первой половине (иногда ошибочно попадают в аванс)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начало", 			ДатаНачала);
	Запрос.УстановитьПараметр("Окончание", 			ДатаОкончания);
	Запрос.УстановитьПараметр("ОкончаниеМесяца", 	КонецМесяца(ДатаНачала));
	Запрос.УстановитьПараметр("Сотрудники", 		Начисления.ВыгрузитьКолонку("Сотрудник"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСостоянийСотрудников.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|ГДЕ
	|	ДанныеСостоянийСотрудников.Активность = ИСТИНА
	|	И ДанныеСостоянийСотрудников.Сотрудник В(&Сотрудники)
	|	И ДанныеСостоянийСотрудников.Сторно = ЛОЖЬ
	|	И ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение)
	|	И ДанныеСостоянийСотрудников.Начало >= &Начало
	|	И ДанныеСостоянийСотрудников.Начало <= &Окончание
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСостоянийСотрудников.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	ТаблицаУволенных = Запрос.Выполнить().Выгрузить();
	Для Каждого УволенныйСотрудник Из ТаблицаУволенных Цикл
		
		СтруктураПоиска = Новый Структура("Сотрудник", УволенныйСотрудник.Сотрудник);
		НайденныеСтроки = Начисления.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			МассивУдаляемыхСтрок.Добавить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		Начисления.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	//очистка показателей
	Для Каждого СтрокаДанных Из Начисления Цикл
		СтрокаДанных.Результат = 0;
		СтрокаДанных.КодВычета = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();
		СтрокаДанных.КоличествоДетей = 0;
		СтрокаДанных.СуммаВычета = 0;
		МассивСотрудников.Добавить(СтрокаДанных.Сотрудник);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	//----------------------------------------------------------------------------------
	//3. расчет
	//----------------------------------------------------------------------------------
	
	//расчет отклонений
	Запрос.Текст = РассчитатьАвансСотруднику_ПолучитьЗапросПоОтклонениям();
	ТаблицаОтклонений = Запрос.Выполнить().Выгрузить();
	
	//расчет нормы за первую половину
	Запрос.Текст = РассчитатьАвансСотруднику_ПолучитьЗапросПоНормеВремениЗаПервуюПоловину();
	ТаблицаНормаЗаПервуюПоловину = Запрос.Выполнить().Выгрузить();
	
	//получение списка сотрудников находящихся в простое
	МассивСотрудниковВПростое = ОФК_ОбщегоНазначенияСервер.ПолучитьСотрудниковВПростое(ДатаНачала, ДатаОкончания, Истина);
	
	//настройка состава показателей для расчета
	МассивБаза = Новый Массив;
	МассивБаза.Добавить(Справочники.ПоказателиРасчетаЗарплаты.Оклад);
	МассивБаза.Добавить(Справочники.ПоказателиРасчетаЗарплаты.РазмерДоплатыЗаСовмещение);
	МассивБаза.Добавить(Справочники.ПоказателиРасчетаЗарплаты.НайтиПоРеквизиту("Идентификатор", "СовмещениеДолжностей"));
	
	МассивПервичныйРасчет = Новый Массив;
	МассивПервичныйРасчет.Добавить(Справочники.ПоказателиРасчетаЗарплаты.НайтиПоРеквизиту("Идентификатор", "ДоплатаДопРаботу"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПервичныйРасчет, МассивБаза);
	
	ПоказательРК = Справочники.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент;
	ПоказательСН = Справочники.ПоказателиРасчетаЗарплаты.СевернаяНадбавка;
	
	МассивВторичныйРасчет = Новый Массив;
	МассивВторичныйРасчет.Добавить(ПоказательРК);
	МассивВторичныйРасчет.Добавить(ПоказательСН);
	
	//3.1. первичный расчет - [оклад], [Доплата за дополнительную работу], [совмещение]
	ТаблицаБаза = Новый ТаблицаЗначений;
	ТаблицаБаза.Колонки.Добавить("Сотрудник");
	ТаблицаБаза.Колонки.Добавить("Результат");
	
	Для Каждого СтрокаДанных Из Начисления Цикл
		
		//определим показатели
		Показатель1 = Неопределено;
		Значение1 = 0;
		Попытка
			Показатель1 = СтрокаДанных.Показатели[0].Показатель;
			Значение1 = СтрокаДанных.Показатели[0].Значение;
		Исключение
		КонецПопытки;
		
		Показатель2 = Неопределено;
		Значение2 = 0;
		Попытка
			Показатель2 = СтрокаДанных.Показатели[1].Показатель;
			Значение2 = СтрокаДанных.Показатели[1].Значение;
		Исключение
		КонецПопытки;
		
		//проверка
		Если МассивПервичныйРасчет.Найти(Показатель1) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//уточним значение оклада с учетом возможного простоя
		Если НЕ МассивСотрудниковВПростое.Найти(СтрокаДанных.Сотрудник) = Неопределено Тогда
			Значение1 = Окр((Значение1 * 2) / 3, 2);
		КонецЕсли;
		
		//расчет ставки
		//	может быть отклонение, если сотрудник работает по своему графику, а норма считается по другому
		Ставка = 1;
		Если Значение2 > 0 И Значение2 <= 2 Тогда
			Ставка = Значение2;
		КонецЕсли;
		
		//структура доп. поиска
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", СтрокаДанных.Сотрудник);
		
		//поиск отклонений
		СтрокиОтклонений = ТаблицаОтклонений.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОтклонений.Количество() > 0 Тогда
			
			//работал частично первую половину
			СтрокаОтклонения = СтрокиОтклонений[0];
			
			СуммаЗаДень = ?(СтрокаДанных.НормаДней = 0, 0, Значение1 * Ставка / СтрокаДанных.НормаДней);
			ОтработаноДней = СтрокаОтклонения.НормаСводно - СтрокаОтклонения.Отклонение;
			ОтработаноДней = ?(ОтработаноДней < 0, 0, ОтработаноДней);
			СтрокаДанных.Результат = Окр(СуммаЗаДень * ОтработаноДней, 2);
			
			СтрокаДанных.ОплаченоДней = ОтработаноДней;
			СтрокаДанных.ОплаченоЧасов = ?(СтрокаДанных.НормаДней = 0, 0, (СтрокаДанных.НормаЧасов * ОтработаноДней) / СтрокаДанных.НормаДней);
			СтрокаДанных.ОтработаноДней = СтрокаДанных.ОплаченоДней;
			СтрокаДанных.ОтработаноЧасов = СтрокаДанных.ОплаченоЧасов;
			
		Иначе
			
			//работал полностью первую половину
			СтрокаДанных.Результат = Окр(Значение1 * Ставка * КоэфАванса, 2);
			
			СтрокиНормыЗаПервуюПоловину = ТаблицаНормаЗаПервуюПоловину.НайтиСтроки(СтруктураПоиска);
			Если СтрокиНормыЗаПервуюПоловину.Количество() > 0 Тогда
				СтрокаДанных.ОплаченоДней = СтрокиНормыЗаПервуюПоловину[0].ПерваяПоловинаДни;
				СтрокаДанных.ОплаченоЧасов = СтрокиНормыЗаПервуюПоловину[0].ПерваяПоловинаЧасы;
				СтрокаДанных.ОтработаноДней = СтрокиНормыЗаПервуюПоловину[0].ПерваяПоловинаДни;
				СтрокаДанных.ОтработаноЧасов = СтрокиНормыЗаПервуюПоловину[0].ПерваяПоловинаЧасы;
			КонецЕсли;
			
		КонецЕсли;
		
		//запись суммы в базу
		Если НЕ МассивБаза.Найти(Показатель1) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаБаза.Добавить(), СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	//итоги по базе
	ТаблицаБаза.Свернуть("Сотрудник", "Результат");
	
	//3.2. вторичный расчет - [районный коэф], [сев. надбавка]	
	Для Каждого СтрокаДанных Из Начисления Цикл
		
		//определим показатели
		Показатель1 = Неопределено;
		Значение1 = 0;
		Попытка
			Показатель1 = СтрокаДанных.Показатели[0].Показатель;
			Значение1 = СтрокаДанных.Показатели[0].Значение;
		Исключение
		КонецПопытки;
		
		Показатель2 = Неопределено;
		Значение2 = 0;
		Попытка
			Показатель2 = СтрокаДанных.Показатели[1].Показатель;
			Значение2 = СтрокаДанных.Показатели[1].Значение;
		Исключение
		КонецПопытки;
		
		//проверка
		Если МассивВторичныйРасчет.Найти(Показатель1) = Неопределено И
			МассивВторичныйРасчет.Найти(Показатель2) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//определение индекса показателя и расчетной базы
		ВидЗначения = 1;
		ВидРасчетнойБазы = 2;
		Если Показатель2 = ПоказательСН Тогда
			ВидЗначения = 2;
			ВидРасчетнойБазы = 1;
		КонецЕсли;
		
		//структура доп. поиска
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", СтрокаДанных.Сотрудник);
		
		//определение базы
		СуммаБазы = 0;
		СтрокиБазы = ТаблицаБаза.НайтиСтроки(СтруктураПоиска);
		Если СтрокиБазы.Количество() > 0 Тогда
			СуммаБазы = СтрокиБазы[0].Результат;
		КонецЕсли;
		
		СтрокаДанных.Показатели[ВидРасчетнойБазы - 1].Значение = СуммаБазы;
		
		//норма времени за первую половину
		СтрокиНормыЗаПервуюПоловину = ТаблицаНормаЗаПервуюПоловину.НайтиСтроки(СтруктураПоиска);
		Если СтрокиНормыЗаПервуюПоловину.Количество() > 0 Тогда
			СтрокаДанных.ОплаченоДней = СтрокиНормыЗаПервуюПоловину[0].ПерваяПоловинаДни;
			СтрокаДанных.ОплаченоЧасов = СтрокиНормыЗаПервуюПоловину[0].ПерваяПоловинаЧасы;
			СтрокаДанных.ОтработаноДней = СтрокиНормыЗаПервуюПоловину[0].ПерваяПоловинаДни;
			СтрокаДанных.ОтработаноЧасов = СтрокиНормыЗаПервуюПоловину[0].ПерваяПоловинаЧасы;
		КонецЕсли;
		
		//уточним было ли отклонение за первую половину
		СтрокиОтклонений = ТаблицаОтклонений.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОтклонений.Количество() > 0 Тогда
			ОтработаноДней = СтрокиОтклонений[0].НормаСводно - СтрокиОтклонений[0].Отклонение;
			СтрокаДанных.ОплаченоДней = ОтработаноДней;
			СтрокаДанных.ОплаченоЧасов = 0;
			СтрокаДанных.ОтработаноДней = ОтработаноДней;
			СтрокаДанных.ОтработаноЧасов = 0;
		КонецЕсли;
		
		//расчет
		Процент = СтрокаДанных.Показатели[ВидЗначения - 1].Значение;
		Если Показатель1 = ПоказательРК Тогда
			Если Процент <= 0 Тогда
				Процент = 1.5;
			КонецЕсли;
			Процент = Процент - 1;
		Иначе
			Процент = Процент / 100;
		КонецЕсли;
		
		СтрокаДанных.Результат = Окр(СуммаБазы * Процент, 2);
		
	КонецЦикла;
	
КонецПроцедуры
//<-- ОФК Дебов Игорь 20.12.2016 | 22.12.2016

//--> ОФК Дебов Игорь 20.12.2016
Функция РассчитатьАвансСотруднику_ПолучитьЗапросПоОтклонениям()
	
	//----------------------------------------------------------------------------------
	//1. Запрос текущий
	//----------------------------------------------------------------------------------
	
	//справочно: в основе запроса выбор периодов отклонений (ВТСостоянияСотрудников), по которым далее расчитывается кол-во дней отклонения от нормы.
	//	первая часть - отклонения такие как отпуска, больничные и т.д.
	//	вторая часть - если период работы начался не с первого числа месяца, например сотрудник принят 07.02.2017, отсюда получается период отклонения 01.02.2017...06.02.2017.
	//	третья часть - декретники (из РегистрСведений.СостоянияСотрудников)
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	ДанныеСостоянийСотрудников.Сотрудник КАК Сотрудник,
	|	ДанныеСостоянийСотрудников.Начало КАК Начало,
	|	ВЫБОР
	|		КОГДА ДанныеСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И НЕ ДанныеСостоянийСотрудников.ОкончаниеПредположительно = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеСостоянийСотрудников.ОкончаниеПредположительно
	|		ИНАЧЕ ДанныеСостоянийСотрудников.Окончание
	|	КОНЕЦ КАК Окончание
	|ПОМЕСТИТЬ ВТСостоянияСотрудников
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|ГДЕ
	|	ДанныеСостоянийСотрудников.Активность = ИСТИНА
	|	И ДанныеСостоянийСотрудников.Сторно = ЛОЖЬ
	|	И ДанныеСостоянийСотрудников.Сотрудник В(&Сотрудники)
	|	И НЕ ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)
	|	И НЕ ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника)
	|	И НЕ ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение)
	|	И НЕ ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком)
	|	И НЕ ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Командировка)
	|	И НЕ ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ДополнительныеВыходныеДниНеОплачиваемые)
	|	И НЕ ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам)
	|	И НЕ ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСостоянийСотрудников.Сотрудник,
	|	&Начало,
	|	ДОБАВИТЬКДАТЕ(ДанныеСостоянийСотрудников.Начало, ДЕНЬ, -1)
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|ГДЕ
	|	ДанныеСостоянийСотрудников.Активность = ИСТИНА
	|	И ДанныеСостоянийСотрудников.Сторно = ЛОЖЬ
	|	И ДанныеСостоянийСотрудников.Сотрудник В(&Сотрудники)
	|	И ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)
	|	И ДанныеСостоянийСотрудников.Начало >= &Начало
	|	И ДанныеСостоянийСотрудников.Начало <= &ОкончаниеМесяца
	|	И ДЕНЬ(ДанныеСостоянийСотрудников.Начало) > 1
	|	И ДЕНЬ(ДанныеСостоянийСотрудников.Начало) < 16
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияСотрудников.Сотрудник,
	|	СостоянияСотрудников.Период,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И НЕ СостоянияСотрудников.ОкончаниеПредположительно = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СостоянияСотрудников.ОкончаниеПредположительно
	|		ИНАЧЕ СостоянияСотрудников.ДействуетДо
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
	|ГДЕ
	|	СостоянияСотрудников.Сотрудник В(&Сотрудники)
	|	И (СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам)
	|			ИЛИ СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСостоянийСотрудников.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ДанныеСостоянийСотрудников.Начало < &Начало
	|			ТОГДА &Начало
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеСостоянийСотрудников.Начало, ДЕНЬ)
	|	КОНЕЦ КАК Начало,
	|	ВЫБОР
	|		КОГДА ДанныеСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &Окончание
	|		КОГДА ДанныеСостоянийСотрудников.Окончание > &Окончание
	|			ТОГДА &Окончание
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеСостоянийСотрудников.Окончание, ДЕНЬ)
	|	КОНЕЦ КАК Окончание
	|ПОМЕСТИТЬ ВТОтклонения
	|ИЗ
	|	ВТСостоянияСотрудников КАК ДанныеСостоянийСотрудников
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДанныеСостоянийСотрудников.Начало >= &Начало
	|					И ДанныеСостоянийСотрудников.Начало <= &Окончание
	|				ТОГДА ИСТИНА
	|			КОГДА ДанныеСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеСостоянийСотрудников.Начало <= &Начало
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ДанныеСостоянийСотрудников.Окончание >= &Начало
	|							И ДанныеСостоянийСотрудников.Окончание <= &Окончание
	|						ТОГДА ИСТИНА
	|					КОГДА ДанныеСостоянийСотрудников.Начало >= &Начало
	|							И ДанныеСостоянийСотрудников.Окончание <= &Окончание
	|						ТОГДА ИСТИНА
	|					КОГДА ДанныеСостоянийСотрудников.Начало <= &Начало
	|							И ДанныеСостоянийСотрудников.Окончание >= &Окончание
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтклонения.Сотрудник КАК Сотрудник,
	|	ВТОтклонения.Начало КАК Начало,
	|	ВТОтклонения.Окончание КАК Окончание
	|ПОМЕСТИТЬ ВТОтклоненияИтог
	|ИЗ
	|	ВТОтклонения КАК ВТОтклонения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтклонения.Сотрудник,
	|	ВТОтклонения.Начало,
	|	ВТОтклонения.Окончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних(
	|			&Окончание,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТОтклоненияИтог.Сотрудник
	|				ИЗ
	|					ВТОтклоненияИтог)) КАК ГрафикРаботыСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК ПериодДень,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыПоВидамВремени.Дата <= &Окончание
	|			ТОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Норма,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК НормаМес
	|ПОМЕСТИТЬ ВТНормаПоГрафику
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы В
	|			(ВЫБРАТЬ
	|				ВТГрафики.ГрафикРаботы
	|			ИЗ
	|				ВТГрафики)
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &Начало
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
	|	И ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ
	|	И ГрафикиРаботыПоВидамВремени.Дата <= КОНЕЦПЕРИОДА(&Окончание, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНормаПоГрафику.ГрафикРаботы КАК ГрафикРаботы,
	|	СУММА(ВТНормаПоГрафику.Норма) КАК Норма,
	|	СУММА(ВТНормаПоГрафику.НормаМес) КАК НормаМес
	|ПОМЕСТИТЬ ВТНормаСводно
	|ИЗ
	|	ВТНормаПоГрафику КАК ВТНормаПоГрафику
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНормаПоГрафику.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТГрафики.Сотрудник КАК Сотрудник,
	|	ВТНормаПоГрафику.ПериодДень КАК ПериодДень,
	|	ЕСТЬNULL(ВТНормаПоГрафику.Норма, 0) КАК Норма,
	|	ЕСТЬNULL(ВТНормаСводно.Норма, 0) КАК НормаСводно,
	|	ЕСТЬNULL(ВТНормаСводно.НормаМес, 0) КАК НормаМес
	|ПОМЕСТИТЬ ВТСотрудникиГрафики
	|ИЗ
	|	ВТГрафики КАК ВТГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаПоГрафику КАК ВТНормаПоГрафику
	|		ПО ВТГрафики.ГрафикРаботы = ВТНормаПоГрафику.ГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаСводно КАК ВТНормаСводно
	|		ПО ВТГрафики.ГрафикРаботы = ВТНормаСводно.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтклоненияИтог.Сотрудник КАК Сотрудник,
	|	ВТОтклоненияИтог.Начало КАК Начало,
	|	ВТОтклоненияИтог.Окончание КАК Окончание,
	|	ВТСотрудникиГрафики.ПериодДень КАК ПериодДень,
	|	ЕСТЬNULL(ВТСотрудникиГрафики.Норма, 0) КАК Отклонение,
	|	ЕСТЬNULL(ВТСотрудникиГрафики.НормаСводно, 0) КАК НормаСводно,
	|	ЕСТЬNULL(ВТСотрудникиГрафики.НормаМес, 0) КАК НормаМес
	|ПОМЕСТИТЬ ВТСводная
	|ИЗ
	|	ВТОтклоненияИтог КАК ВТОтклоненияИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиГрафики КАК ВТСотрудникиГрафики
	|		ПО ВТОтклоненияИтог.Сотрудник = ВТСотрудникиГрафики.Сотрудник
	|			И ВТОтклоненияИтог.Начало <= ВТСотрудникиГрафики.ПериодДень
	|			И ВТОтклоненияИтог.Окончание >= ВТСотрудникиГрафики.ПериодДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСводная.Сотрудник КАК Сотрудник,
	|	ВТСводная.ПериодДень КАК ПериодДень,
	|	МАКСИМУМ(ВТСводная.Отклонение) КАК Отклонение,
	|	МАКСИМУМ(ВТСводная.НормаСводно) КАК НормаСводно,
	|	МАКСИМУМ(ВТСводная.НормаМес) КАК НормаМес
	|ПОМЕСТИТЬ ВТСверткаПоДням
	|ИЗ
	|	ВТСводная КАК ВТСводная
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСводная.Сотрудник,
	|	ВТСводная.ПериодДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСверткаПоДням.Сотрудник КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(ВТСверткаПоДням.Отклонение, 0)) КАК Отклонение,
	|	МАКСИМУМ(ЕСТЬNULL(ВТСверткаПоДням.НормаСводно, 0)) КАК НормаСводно,
	|	МАКСИМУМ(ЕСТЬNULL(ВТСверткаПоДням.НормаМес, 0)) КАК НормаМес
	|ИЗ
	|	ВТСверткаПоДням КАК ВТСверткаПоДням
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСверткаПоДням.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(ВТСверткаПоДням.Отклонение, 0)) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	Возврат ЗапросТекст;

КонецФункции
//<-- ОФК Дебов Игорь 20.12.2016

//--> ОФК Дебов Игорь 21.12.2016
Функция РассчитатьАвансСотруднику_ПолучитьЗапросПоНормеВремениЗаПервуюПоловину()
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних(&Окончание, Сотрудник В (&Сотрудники)) КАК ГрафикРаботыСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ
	|			ТОГДА ВЫБОР
	|					КОГДА ГрафикиРаботыПоВидамВремени.Дата <= &Окончание
	|						ТОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПерваяПоловинаДни,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА ГрафикиРаботыПоВидамВремени.Дата <= &Окончание
	|						ТОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПерваяПоловинаЧасы
	|ПОМЕСТИТЬ ВТНормаПоГрафику
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы В
	|			(ВЫБРАТЬ
	|				ВТГрафики.ГрафикРаботы
	|			ИЗ
	|				ВТГрафики)
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &Начало
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
	|	И ГрафикиРаботыПоВидамВремени.Дата <= КОНЕЦПЕРИОДА(&Окончание, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНормаПоГрафику.ГрафикРаботы КАК ГрафикРаботы,
	|	СУММА(ВТНормаПоГрафику.ПерваяПоловинаДни) КАК ПерваяПоловинаДни,
	|	СУММА(ВТНормаПоГрафику.ПерваяПоловинаЧасы) КАК ПерваяПоловинаЧасы
	|ПОМЕСТИТЬ ВТГрафикСводно
	|ИЗ
	|	ВТНормаПоГрафику КАК ВТНормаПоГрафику
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНормаПоГрафику.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТГрафики.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(ВТГрафикСводно.ПерваяПоловинаДни, 0) КАК ПерваяПоловинаДни,
	|	ЕСТЬNULL(ВТГрафикСводно.ПерваяПоловинаЧасы, 0) КАК ПерваяПоловинаЧасы
	|ИЗ
	|	ВТГрафики КАК ВТГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикСводно КАК ВТГрафикСводно
	|		ПО ВТГрафики.ГрафикРаботы = ВТГрафикСводно.ГрафикРаботы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	Возврат ЗапросТекст;
	
КонецФункции
//<-- ОФК Дебов Игорь 21.12.2016

//--> ОФК Дебов Игорь 22.12.2016
Функция РассчитатьАвансСотруднику_ПолучитьПроцентРасчетаАванса(Организация, ДатаНачала)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ДатаНачала));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОФК_ПроцентРасчетаАвансаСрезПоследних.ПроцентРасчетаАванса
	|ИЗ
	|	РегистрСведений.ОФК_ПроцентРасчетаАванса.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК ОФК_ПроцентРасчетаАвансаСрезПоследних";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ПроцентРасчетаАванса = 0;
	Если ТаблицаДанных.Количество() > 0 Тогда
		ПроцентРасчетаАванса = ТаблицаДанных[0].ПроцентРасчетаАванса;
	КонецЕсли;
	
	Возврат ПроцентРасчетаАванса;
	
КонецФункции
//<-- ОФК Дебов Игорь 22.12.2016

#КонецОбласти
