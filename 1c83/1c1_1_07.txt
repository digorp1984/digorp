----------------------------------------
запрос
----------------------------------------

ВЫБРАТЬ РАЗРЕШЕННЫЕ
	НачальныеОстаткиОтпусков.Сотрудник,
	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	МАКСИМУМ(НачальныеОстаткиОтпусков.ДатаОстатка) КАК ДатаОстатка
ПОМЕСТИТЬ ВТНачальныеОстатки
ИЗ
	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков

СГРУППИРОВАТЬ ПО
	НачальныеОстаткиОтпусков.Сотрудник,
	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗРЕШЕННЫЕ
	1 КАК Порядок,
	ОФК_ЗакрытыеРабочиеПериодыОтпусков.Сотрудник,
	ОФК_ЗакрытыеРабочиеПериодыОтпусков.ВидЕжегодногоОтпуска,
	ОФК_ЗакрытыеРабочиеПериодыОтпусков.ДатаНачала,
	ОФК_ЗакрытыеРабочиеПериодыОтпусков.ДатаОкончания
ПОМЕСТИТЬ ВТЗакрытыеПериоды
ИЗ
	РегистрСведений.ОФК_ЗакрытыеРабочиеПериодыОтпусков КАК ОФК_ЗакрытыеРабочиеПериодыОтпусков
ГДЕ
	ОФК_ЗакрытыеРабочиеПериодыОтпусков.ДатаОкончания <= &ДатаОтчета
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗРЕШЕННЫЕ
	ЗаработанныеПраваНаОтпуска.Сотрудник,
	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска,
	ЗаработанныеПраваНаОтпуска.ДатаНачала,
	ЗаработанныеПраваНаОтпуска.ДатаОкончания,
	СУММА(ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод) КАК ЗаработанноДней
ПОМЕСТИТЬ ВТЗаработаноДней
ИЗ
	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
ГДЕ
	ЗаработанныеПраваНаОтпуска.Период <= &ДатаОтчета

СГРУППИРОВАТЬ ПО
	ЗаработанныеПраваНаОтпуска.Сотрудник,
	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска,
	ЗаработанныеПраваНаОтпуска.ДатаНачала,
	ЗаработанныеПраваНаОтпуска.ДатаОкончания
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗЛИЧНЫЕ
	ВТЗаработаноДней.Сотрудник,
	&ДатаОтчета КАК Период
ПОМЕСТИТЬ ВТСотрудники
ИЗ
	ВТЗаработаноДней КАК ВТЗаработаноДней
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗРЕШЕННЫЕ
	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка) КАК Должность,
	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка) КАК ВидЗанятости,
	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПриема,
	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаУвольнения
ПОМЕСТИТЬ Представления_КадровыеДанныеСотрудников
ИЗ
	ВТСотрудники КАК ВТСотрудники
ГДЕ
	"ТолькоРазрешенные" = ИСТИНА
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	2 КАК Порядок,
	ВТЗаработаноДней.Сотрудник,
	ВТЗаработаноДней.ВидЕжегодногоОтпуска,
	ВТЗаработаноДней.ДатаНачала,
	ВТЗаработаноДней.ДатаОкончания,
	ВТЗаработаноДней.ЗаработанноДней
ПОМЕСТИТЬ ВТОткрытыеПериодыИтог
ИЗ
	ВТЗаработаноДней КАК ВТЗаработаноДней
ГДЕ
	ВТЗаработаноДней.ДатаОкончания > &ДатаОтчета
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТЗакрытыеПериоды.Порядок,
	ВТЗакрытыеПериоды.Сотрудник,
	ВТЗакрытыеПериоды.ВидЕжегодногоОтпуска,
	ВТЗакрытыеПериоды.ДатаНачала,
	ВТЗакрытыеПериоды.ДатаОкончания,
	ЕСТЬNULL(ВТЗаработаноДней.ЗаработанноДней, 0) КАК ЗаработанноДней
ПОМЕСТИТЬ ВТЗакрытыеПериодыИтог
ИЗ
	ВТЗакрытыеПериоды КАК ВТЗакрытыеПериоды
		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаработаноДней КАК ВТЗаработаноДней
		ПО ВТЗакрытыеПериоды.Сотрудник = ВТЗаработаноДней.Сотрудник
			И ВТЗакрытыеПериоды.ВидЕжегодногоОтпуска = ВТЗаработаноДней.ВидЕжегодногоОтпуска
			И (ВЫБОР
				КОГДА РАЗНОСТЬДАТ(ВТЗакрытыеПериоды.ДатаНачала, ВТЗаработаноДней.ДатаНачала, ДЕНЬ) >= -1 * &ДельтаДней
						И РАЗНОСТЬДАТ(ВТЗакрытыеПериоды.ДатаНачала, ВТЗаработаноДней.ДатаНачала, ДЕНЬ) <= &ДельтаДней
					ТОГДА ИСТИНА
				ИНАЧЕ ЛОЖЬ
			КОНЕЦ)
			И (ВЫБОР
				КОГДА РАЗНОСТЬДАТ(ВТЗакрытыеПериоды.ДатаОкончания, ВТЗаработаноДней.ДатаОкончания, ДЕНЬ) >= -1 * &ДельтаДней
						И РАЗНОСТЬДАТ(ВТЗакрытыеПериоды.ДатаОкончания, ВТЗаработаноДней.ДатаОкончания, ДЕНЬ) <= &ДельтаДней
					ТОГДА ИСТИНА
				ИНАЧЕ ЛОЖЬ
			КОНЕЦ)
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТЗакрытыеПериодыИтог.Порядок,
	ВТЗакрытыеПериодыИтог.Сотрудник,
	ВТЗакрытыеПериодыИтог.ВидЕжегодногоОтпуска,
	ВТЗакрытыеПериодыИтог.ДатаНачала,
	ВТЗакрытыеПериодыИтог.ДатаОкончания,
	ВТЗакрытыеПериодыИтог.ЗаработанноДней
ПОМЕСТИТЬ ВТРабочиеПериоды
ИЗ
	ВТЗакрытыеПериодыИтог КАК ВТЗакрытыеПериодыИтог

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	ВТОткрытыеПериодыИтог.Порядок,
	ВТОткрытыеПериодыИтог.Сотрудник,
	ВТОткрытыеПериодыИтог.ВидЕжегодногоОтпуска,
	ВТОткрытыеПериодыИтог.ДатаНачала,
	ВТОткрытыеПериодыИтог.ДатаОкончания,
	ВТОткрытыеПериодыИтог.ЗаработанноДней
ИЗ
	ВТОткрытыеПериодыИтог КАК ВТОткрытыеПериодыИтог
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТРабочиеПериоды.Порядок,
	ВТРабочиеПериоды.Сотрудник,
	ВТРабочиеПериоды.ВидЕжегодногоОтпуска,
	ВТРабочиеПериоды.ДатаНачала,
	ВТРабочиеПериоды.ДатаОкончания,
	ВЫРАЗИТЬ(ВТРабочиеПериоды.ЗаработанноДней КАК ЧИСЛО(15, 2)) КАК ЗаработанноДней,
	Представления_КадровыеДанныеСотрудников.ФизическоеЛицо,
	Представления_КадровыеДанныеСотрудников.Организация,
	Представления_КадровыеДанныеСотрудников.Подразделение,
	Представления_КадровыеДанныеСотрудников.Должность,
	Представления_КадровыеДанныеСотрудников.ВидЗанятости,
	Представления_КадровыеДанныеСотрудников.ДатаПриема,
	Представления_КадровыеДанныеСотрудников.ДатаУвольнения,
	ЕСТЬNULL(ВТНачальныеОстатки.ДатаОстатка, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОстатка
ИЗ
	ВТРабочиеПериоды КАК ВТРабочиеПериоды
		ЛЕВОЕ СОЕДИНЕНИЕ Представления_КадровыеДанныеСотрудников КАК Представления_КадровыеДанныеСотрудников
		ПО ВТРабочиеПериоды.Сотрудник = Представления_КадровыеДанныеСотрудников.Сотрудник
		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачальныеОстатки КАК ВТНачальныеОстатки
		ПО ВТРабочиеПериоды.Сотрудник = ВТНачальныеОстатки.Сотрудник
			И ВТРабочиеПериоды.ВидЕжегодногоОтпуска = ВТНачальныеОстатки.ВидЕжегодногоОтпуска
      
      
      
----------------------------------------
код
----------------------------------------

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// Получаем виртуальную таблицу Представления_КадровыеДанныеСотрудников.
	ИнициализироватьОтчет();
	
	// Очистка результата
	СтандартнаяОбработка = ложь;
	ДокументРезультат.Очистить();
	
	// Чтение параметров из настроек
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	МассивСотрудников = Неопределено;
	Для Каждого ЭлементОтбора Из НастройкиОтчета.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник")
			И ЭлементОтбора.Использование Тогда
			
			МассивСотрудников = Новый Массив;
			МассивСотрудников.Добавить(ЭлементОтбора.ПравоеЗначение);
			
		КонецЕсли;
	КонецЦикла; 
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ДатаОтчета");
	Если НЕ ЗначениеПараметра.Использование Тогда
		ЗначениеПараметра.Значение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
	ДатаОтчета = ЗначениеПараметра.Значение.Дата;
	
	ДельтаДней = 10;
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДельтаДней"));
	Если ЗначениеПараметра <> Неопределено Тогда
		ДельтаДней = ЗначениеПараметра.Значение;
	КонецЕсли;
	
	// Чтение параметров при рассылке отпусков (из обработки)
	НеобходимоИзрасходовать = Неопределено;
	Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("НеобходимоИзрасходовать") Тогда
		НеобходимоИзрасходовать = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.НеобходимоИзрасходовать;
	КонецЕсли;
	
	// Чтение параметров при получении таблицы остатков (из модуля)
	ИсключаемыеРегистраторы = Неопределено;
	Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ИсключаемыеРегистраторы") Тогда
		ИсключаемыеРегистраторы = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ИсключаемыеРегистраторы;
	КонецЕсли;
	
	// Заполняем регистр ЗаработанныеПраваНаОтпуска.
    ОстаткиОтпусков.РасчетЗаработанныхОтпусков(МассивСотрудников, ДатаОтчета);
	
	// Актуализируем регистр ОФК_ЗакрытыеРабочиеПериодыОтпусков.
	Обработки.ОФК_АктуализацияЗакрытыхРабочихПериодов.ВыполнитьАктуализациюЗРП(ДатаОтчета, , Ложь);
	
	// Описание дополнительной таблицы данных
	РаспределенныйРеестр = Новый ТаблицаЗначений;
	РаспределенныйРеестр.Колонки.Добавить("Сотрудник", 						Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РаспределенныйРеестр.Колонки.Добавить("ВидЕжегодногоОтпуска", 			Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	РаспределенныйРеестр.Колонки.Добавить("ДатаНачала",						ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РаспределенныйРеестр.Колонки.Добавить("ДатаОкончания",					ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РаспределенныйРеестр.Колонки.Добавить("ДатаНачалаПериодаОтсутствия",	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РаспределенныйРеестр.Колонки.Добавить("ДатаОкончанияПериодаОтсутствия",	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РаспределенныйРеестр.Колонки.Добавить("РасходДней",						ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	РаспределенныйРеестр.Колонки.Добавить("ЗаработанноДнейПоСтроке",		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	РаспределенныйРеестр.Колонки.Добавить("Документ", 						Новый ОписаниеТипов("ДокументСсылка.Отпуск"));
	РаспределенныйРеестр.Колонки.Добавить("НеобходимоИзрасходовать",		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	// Первый этап. Генерируем таблицу периодов без реестра отпусков
	НастройкиОтчета.Структура.Очистить();
	
	Группировка = НастройкиОтчета.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.ПоляГруппировки.Элементы.Очистить();
	Группировка.Выбор.Элементы.Очистить();
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	НастройкиОтчета.Выбор.Элементы.Очистить();
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "Сотрудник");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "ВидЕжегодногоОтпуска");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "ДатаНачала");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "ДатаОкончания");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "ЗаработанноДней");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "ДатаОстатка");
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("РаспределенныйРеестр", РаспределенныйРеестр);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаРабочихПериодов =  Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРабочихПериодов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Второй этап. Формируем таблицу реестра отпусков с распределением по периодам.
	Если ТаблицаРабочихПериодов.Количество() > 0 Тогда
		РассчитатьДополнительныеДанные(ТаблицаРабочихПериодов, РаспределенныйРеестр, ДатаОтчета, ДельтаДней, НеобходимоИзрасходовать, ИсключаемыеРегистраторы);
	КонецЕсли;
	
	// Третий этап. Фомируем итоговый отчет в СКД.
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("РаспределенныйРеестр", РаспределенныйРеестр);
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ТипЗнч(ДокументРезультат) = Тип("ТаблицаЗначений") Тогда
		
		//эта ветка отрабатывает, если нужно выгрузить результат в таблицу значений, например вызов из модуля и дальнейшая обработка.
		
		//модификация структуры данных, так как выводим отчет в таблицу значений 
		НастройкиКомпоновки.Структура.Очистить();
		
		Группировка = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Группировка.ПоляГруппировки.Элементы.Очистить();
		Группировка.Выбор.Элементы.Очистить();
		Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		НастройкиКомпоновки.Выбор.Элементы.Очистить();
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновки.Выбор, "Сотрудник");
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновки.Выбор, "ВидЕжегодногоОтпуска");
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновки.Выбор, "ДатаНачала");
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновки.Выбор, "ДатаОкончания");
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновки.Выбор, "ЗаработанноДней");
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновки.Выбор, "РасходДней");
		
		//создадим и инициализируем процессор компоновки.
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДокументРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	Иначе
		
		//вывод в табличный документ, например отчет или рассылка
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиКомпоновки, ДанныеРасшифровки);
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	КонецЕсли;

КонецПроцедуры



----------------------------------------
код 2
----------------------------------------

Процедура РассчитатьДополнительныеДанные(ТаблицаРабочихПериодов, РаспределенныйРеестр, ДатаОтчета, ДельтаДней, НеобходимоИзрасходовать, ИсключаемыеРегистраторы)
	
	//-------------------------------------------------------------------------------------------------------------------------
	// Параметры
	//-------------------------------------------------------------------------------------------------------------------------
	
	ДельтаДнейПлюс = ДельтаДней;
	ДельтаДнейМинус = -1 * ДельтаДней;
	
	МассивСотрудников = ТаблицаРабочихПериодов.ВыгрузитьКолонку("Сотрудник");
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСотрудников);
	
	//-------------------------------------------------------------------------------------------------------------------------
	// Подготовка
	//-------------------------------------------------------------------------------------------------------------------------
	
	// для распределения по периодам важно отсортировать периоды по возрастанию
	ТаблицаРабочихПериодов.Сортировать("Сотрудник, ДатаНачала");
	
	//добавим заработанные дни в таблицу распределния (нужно для расчета общих итогов по остаткам в СКД)
	Для Каждого СтрокаПериод Из ТаблицаРабочихПериодов Цикл
		НоваяСтрока = РаспределенныйРеестр.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод);
		НоваяСтрока.ЗаработанноДнейПоСтроке = СтрокаПериод.ЗаработанноДней;
	КонецЦикла;	
	
	//добавим колнку для распределния
	ТаблицаРабочихПериодов.Колонки.Добавить("ЗаработанноДнейРаспределено");
	Для Каждого СтрокаПериод Из ТаблицаРабочихПериодов Цикл
		СтрокаПериод.ЗаработанноДнейРаспределено = 0;
	КонецЦикла;	
	
	//-------------------------------------------------------------------------------------------------------------------------
	// Выбор данных из реестра отпусков
	//-------------------------------------------------------------------------------------------------------------------------
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСотрудников", 			МассивСотрудников);
	Запрос.УстановитьПараметр("ДатаОтчета", 				ДатаОтчета);
	Запрос.УстановитьПараметр("ОтборПоРегистратору", 		?(ИсключаемыеРегистраторы = Неопределено, Ложь, Истина));
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", 	ИсключаемыеРегистраторы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрОтпусков.Сотрудник,
	|	РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК ДатаНачала,
	|	РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА РеестрОтпусков.ДатаНачалаПериодаОтсутствия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РеестрОтпусков.Регистратор.Дата
	|		ИНАЧЕ РеестрОтпусков.ДатаНачалаПериодаОтсутствия
	|	КОНЕЦ КАК ДатаНачалаПериодаОтсутствия,
	|	РеестрОтпусков.ДатаОкончанияПериодаОтсутствия КАК ДатаОкончанияПериодаОтсутствия,
	|	РеестрОтпусков.Регистратор КАК Документ,
	|	РеестрОтпусков.ВидОтпуска,
	|	РеестрОтпусков.КоличествоДнейОтпуска КАК РасходДней,
	|	РеестрОтпусков.КоличествоДнейОтпуска КАК РасходДнейОстаток,
	|	РАЗНОСТЬДАТ(РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, ДЕНЬ) КАК РазностьВДнях,
	|	РеестрОтпусков.Регистратор.ИсправленныйДокумент КАК ИсправленныйДокумент,
	|	РеестрОтпусков.Регистратор.Дата КАК ДокументДата
	|ПОМЕСТИТЬ ВТВыборДокументов
	|ИЗ
	|	РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|ГДЕ
	|	РеестрОтпусков.Активность = ИСТИНА
	|	И РеестрОтпусков.Сотрудник В(&МассивСотрудников)
	|	И РеестрОтпусков.Регистратор ССЫЛКА Документ.Отпуск
	|	И ВЫБОР
	|			КОГДА РеестрОтпусков.ДатаНачалаПериодаОтсутствия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА РеестрОтпусков.Регистратор.Дата < &ДатаОтчета
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОГДА РеестрОтпусков.ДатаНачалаПериодаОтсутствия < &ДатаОтчета
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоРегистратору = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РеестрОтпусков.Регистратор В (&ИсключаемыеРегистраторы)
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыборДокументов.ИсправленныйДокумент КАК Документ,
	|	ИСТИНА КАК ДокументИсправлен
	|ПОМЕСТИТЬ ВТИсправленныеДокументы
	|ИЗ
	|	ВТВыборДокументов КАК ВТВыборДокументов
	|ГДЕ
	|	НЕ ВТВыборДокументов.Документ = ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыборДокументов.ИсправленныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактическиеОтпуска.Регистратор КАК Документ,
	|	ИСТИНА КАК УчтенВРегНакопления
	|ПОМЕСТИТЬ ВТФактическиеОтпуска
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|ГДЕ
	|	ФактическиеОтпуска.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТВыборДокументов.Документ
	|			ИЗ
	|				ВТВыборДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыборДокументов.Сотрудник КАК Сотрудник,
	|	ВТВыборДокументов.ДатаНачала,
	|	ВТВыборДокументов.ДатаОкончания,
	|	ВТВыборДокументов.ДатаНачалаПериодаОтсутствия КАК ДатаНачалаПериодаОтсутствия,
	|	ВТВыборДокументов.ДатаОкончанияПериодаОтсутствия,
	|	ВТВыборДокументов.Документ,
	|	ВТВыборДокументов.ВидОтпуска,
	|	ВТВыборДокументов.РасходДней,
	|	ВТВыборДокументов.РасходДнейОстаток,
	|	ВТВыборДокументов.РазностьВДнях,
	|	ВТВыборДокументов.ИсправленныйДокумент
	|ИЗ
	|	ВТВыборДокументов КАК ВТВыборДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсправленныеДокументы КАК ВТИсправленныеДокументы
	|		ПО ВТВыборДокументов.Документ = ВТИсправленныеДокументы.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическиеОтпуска КАК ВТФактическиеОтпуска
	|		ПО ВТВыборДокументов.Документ = ВТФактическиеОтпуска.Документ
	|ГДЕ
	|	НЕ ЕСТЬNULL(ВТИсправленныеДокументы.ДокументИсправлен, ЛОЖЬ)
	|	И ВЫБОР
	|			КОГДА ВТВыборДокументов.ДокументДата > ДАТАВРЕМЯ(2017, 1, 1, 0, 0, 0)
	|				ТОГДА ЕСТЬNULL(ВТФактическиеОтпуска.УчтенВРегНакопления, ЛОЖЬ)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаНачалаПериодаОтсутствия";
	
	ТаблицаРеестрОтпусков = Запрос.Выполнить().Выгрузить();
	
	//-------------------------------------------------------------------------------------------------------------------------
	// Добавление стыковочного признака для вида отпусков, т.к. разные типпы измерения
	//-------------------------------------------------------------------------------------------------------------------------
	
	//добавим общий вид отпуска для стыковки двух разных регистров
	ТаблицаРабочихПериодов.Колонки.Добавить("ВидОтпускаСтыковка");
	Для Каждого СтрокаПериод Из ТаблицаРабочихПериодов Цикл
		Если СтрНайти(НРег(СокрЛП(СтрокаПериод.ВидЕжегодногоОтпуска)), "основно") > 0 Тогда
			СтрокаПериод.ВидОтпускаСтыковка = "О";
		Иначе
			СтрокаПериод.ВидОтпускаСтыковка = "Д";
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРеестрОтпусков.Колонки.Добавить("ВидОтпускаСтыковка");
	Для Каждого СтрокаРеестра Из ТаблицаРеестрОтпусков Цикл
		Если СтрНайти(НРег(СокрЛП(СтрокаРеестра.ВидОтпуска)), "основно") > 0 Тогда
			СтрокаРеестра.ВидОтпускаСтыковка = "О";
		Иначе
			СтрокаРеестра.ВидОтпускаСтыковка = "Д";
		КонецЕсли;
	КонецЦикла;
	
	//-------------------------------------------------------------------------------------------------------------------------
	// Распределим реестр отпусков у которых рабочий период 1 год.
	//-------------------------------------------------------------------------------------------------------------------------
	
	Для Каждого СтрокаПериод Из ТаблицаРабочихПериодов Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", СтрокаПериод.Сотрудник);
		СтруктураПоиска.Вставить("ВидОтпускаСтыковка", СтрокаПериод.ВидОтпускаСтыковка);
		СтрокиРеестра = ТаблицаРеестрОтпусков.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаРеестра Из СтрокиРеестра Цикл
			
			//проверка
			Если СтрокаРеестра.РасходДнейОстаток <= 0 Тогда
				//документ отпуска уже распределен в рабочем периоде, или не требуется его распределять
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПериод.ДатаОстатка) Тогда
				Если СтрокаРеестра.ДатаНачалаПериодаОтсутствия < СтрокаПериод.ДатаОстатка Тогда
					//в отчет берем только те документы, которые больше даты начала ввода остатков по сотрднику
					СтрокаРеестра.РасходДнейОстаток = 0;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПериод.Сотрудник) Тогда
				//лишня строчка после первой компановки СКД
				СтрокаРеестра.РасходДнейОстаток = 0;
				Продолжить;
			КонецЕсли;
			
			Если СтрокаРеестра.РазностьВДнях < 363 ИЛИ СтрокаРеестра.РазностьВДнях > 366 Тогда
				//кривой рабочий период, вариант распределения - математический
				Продолжить;
			КонецЕсли;
			
			//анализ равнозначности периода
			ПериодРавнозначен = Ложь;
			
			ДатаНачалаРазностьДней = ОФК_ОбщегоНазначенияСервер.ПолучитьРазностьДат(СтрокаПериод.ДатаНачала, СтрокаРеестра.ДатаНачала, "ДЕНЬ");
			ДатаОкончанияРазностьДней = ОФК_ОбщегоНазначенияСервер.ПолучитьРазностьДат(СтрокаПериод.ДатаОкончания, СтрокаРеестра.ДатаОкончания, "ДЕНЬ");
			
			Если (ДатаНачалаРазностьДней >= ДельтаДнейМинус И ДатаНачалаРазностьДней <= ДельтаДнейПлюс)
				И (ДатаОкончанияРазностьДней >= ДельтаДнейМинус И ДатаОкончанияРазностьДней <= ДельтаДнейПлюс) Тогда
				ПериодРавнозначен = Истина;
			КонецЕсли;
			Если (ДатаНачалаРазностьДней >= ДельтаДнейМинус И ДатаНачалаРазностьДней <= ДельтаДнейПлюс)
				И (СтрокаПериод.ДатаОкончания <= СтрокаРеестра.ДатаОкончания) Тогда
				ПериодРавнозначен = Истина;
			КонецЕсли;
			
			//добавление документа в отчет
			Если ПериодРавнозначен = Истина Тогда
				
				НоваяСтрока = РаспределенныйРеестр.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод, "Сотрудник,ВидЕжегодногоОтпуска,ДатаНачала,ДатаОкончания");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеестра, "ДатаНачалаПериодаОтсутствия,ДатаОкончанияПериодаОтсутствия,РасходДней,Документ");
				
				СтрокаПериод.ЗаработанноДнейРаспределено = СтрокаПериод.ЗаработанноДнейРаспределено + СтрокаРеестра.РасходДней;
				СтрокаРеестра.РасходДнейОстаток = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	//-------------------------------------------------------------------------------------------------------------------------
	// Распределим "математически" реестр отпусков по таблице рабочих периодов, т.е.
	//		могут быть ситуации когда в отпуске указывают рабочий период за котрый берутся заработанные дни сразу за 2, 3 года или больше.
	//-------------------------------------------------------------------------------------------------------------------------
	
	Для Каждого СтрокаРеестра Из ТаблицаРеестрОтпусков Цикл
		
		//проверка
		Если СтрокаРеестра.РасходДнейОстаток <= 0 Тогда
			//документ отпуска уже распределен в рабочем периоде, или не требуется его распределять
			Продолжить;
		КонецЕсли;
		
		//параметры
		ДнейКРаспределению = СтрокаРеестра.РасходДнейОстаток;
		
		//распределение по рабочим периодам
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", СтрокаРеестра.Сотрудник);
		СтруктураПоиска.Вставить("ВидОтпускаСтыковка", СтрокаРеестра.ВидОтпускаСтыковка);
		СтрокиПериодов = ТаблицаРабочихПериодов.НайтиСтроки(СтруктураПоиска);
		
		КолвоСтрок = СтрокиПериодов.Количество();
		НомерСтроки = 0;
		
		Для Каждого СтрокаПериод Из СтрокиПериодов Цикл
			
			//важно: таблица рабочих периодов отсортированна по - сотруднику \ дате начала
			
			//первая проверка - начинаем распределять только, если
			//	начало рабочего периода из рееестра пересекается с началом рабочего периода из таблицы рабочих периодов с остатками заработанных дней.
			
			НомерСтроки = НомерСтроки + 1;
			
			ДатаНачалаРазностьДней = ОФК_ОбщегоНазначенияСервер.ПолучитьРазностьДат(СтрокаРеестра.ДатаНачала, СтрокаПериод.ДатаНачала, "ДЕНЬ");
			Если ДатаНачалаРазностьДней < ДельтаДнейМинус Тогда
				Продолжить;
			КонецЕсли;
			
			//вторая проверка - если рабочий период последний,
			//	то весь отпуск относим к нему, независимо от того сколько осталось заработанных дней в периоде
			
			РаспределитьДнейВЭтомПериоде = 0;
			
			Если НомерСтроки = КолвоСтрок Тогда
				
				РаспределитьДнейВЭтомПериоде = ДнейКРаспределению;
				
			Иначе
				
				ОстатокДнейВПериоде = СтрокаПериод.ЗаработанноДней - СтрокаПериод.ЗаработанноДнейРаспределено;
				Если ОстатокДнейВПериоде <= 0 Тогда
					РаспределитьДнейВЭтомПериоде = 0;
				Иначе
					РаспределитьДнейВЭтомПериоде = Мин(ОстатокДнейВПериоде, ДнейКРаспределению);
				КонецЕсли;
				
			КонецЕсли;
			
			//проверка, нужно ли обрабатывать рабочий период дальше
			Если РаспределитьДнейВЭтомПериоде = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//скорректируем дней к распределению
			СтрокаПериод.ЗаработанноДнейРаспределено = СтрокаПериод.ЗаработанноДнейРаспределено + РаспределитьДнейВЭтомПериоде;
			ДнейКРаспределению = ДнейКРаспределению - РаспределитьДнейВЭтомПериоде;
			
			//добавление документа в отчет
			НоваяСтрока = РаспределенныйРеестр.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод, "Сотрудник,ВидЕжегодногоОтпуска,ДатаНачала,ДатаОкончания");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеестра, "ДатаНачалаПериодаОтсутствия,ДатаОкончанияПериодаОтсутствия,Документ");
			НоваяСтрока.РасходДней = РаспределитьДнейВЭтомПериоде;
			
		КонецЦикла;
		
		//проверка распределен ли отпуск из рееестра - окончательно,
		//	т.е. пройдя все возможные контроли и анализы отпуск всеравно никуда не был распределен.
		
		Если ДнейКРаспределению > 0 Тогда
			
			НоваяСтрока = РаспределенныйРеестр.Добавить();
			
			Если КолвоСтрок > 0 Тогда
				
				//добавим в последний рабочий период не распределенный отпуск
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод, "Сотрудник,ВидЕжегодногоОтпуска,ДатаНачала,ДатаОкончания");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеестра, "ДатаНачалаПериодаОтсутствия,ДатаОкончанияПериодаОтсутствия,Документ");
				
			Иначе
				
				//рабочего периода нет, добавим строчку, но в отчете она не покажется, т.к. таблица периодов соединяется с реестром отпусков
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеестра);
				
			КонецЕсли;
			
			НоваяСтрока.РасходДней = ДнейКРаспределению;
			
		КонецЕсли;
		
		СтрокаРеестра.РасходДнейОстаток = 0;
		
	КонецЦикла;
	
	//-------------------------------------------------------------------------------------------------------------------------
	// Заполним поле "необходимо израсходовать" (заполняется при рассылке отпусков)
	//-------------------------------------------------------------------------------------------------------------------------
	
	Если НЕ НеобходимоИзрасходовать = Неопределено И РаспределенныйРеестр.Количество() > 0 Тогда
		
		ТаблицаРеестрОтпусковКопия = РаспределенныйРеестр.Скопировать();
		ТаблицаРеестрОтпусковКопия.Свернуть("Сотрудник,ВидЕжегодногоОтпуска,ДатаНачала,ДатаОкончания", "РасходДней,ЗаработанноДнейПоСтроке");
		ТаблицаРеестрОтпусковКопия.Сортировать("Сотрудник,ВидЕжегодногоОтпуска,ДатаНачала");
		
		Для Каждого СтрокаСотрудника Из НеобходимоИзрасходовать Цикл
			
			ДнейКРаспределению = СтрокаСотрудника.Значение;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Сотрудник", СтрокаСотрудника.Ключ);
			НайденныеСтроки = ТаблицаРеестрОтпусковКопия.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СводнаяСтрока Из НайденныеСтроки Цикл
				
				//проверка
				Если ДнейКРаспределению = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрНайти(СокрЛП(СводнаяСтрока.ВидЕжегодногоОтпуска), "Основной") = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОстатокДней = СводнаяСтрока.ЗаработанноДнейПоСтроке - СводнаяСтрока.РасходДней;
				Если ОстатокДней <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				//распределение
				ДнейРаспределено = Мин(ДнейКРаспределению, ОстатокДней);
				ДнейКРаспределению = ДнейКРаспределению - ДнейРаспределено;
				
				//запишем значение в основную таблицу
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("Сотрудник", 						СводнаяСтрока.Сотрудник);
				СтруктураПоиска.Вставить("ВидЕжегодногоОтпуска", 			СводнаяСтрока.ВидЕжегодногоОтпуска);
				СтруктураПоиска.Вставить("ДатаНачала", 						СводнаяСтрока.ДатаНачала);
				СтруктураПоиска.Вставить("ДатаОкончания", 					СводнаяСтрока.ДатаОкончания);
				СтруктураПоиска.Вставить("ДатаНачалаПериодаОтсутствия", 	Дата(1,1,1));
				СтруктураПоиска.Вставить("ДатаОкончанияПериодаОтсутствия", 	Дата(1,1,1));
				
				ИсходныеСтроки = РаспределенныйРеестр.НайтиСтроки(СтруктураПоиска);
				Если ИсходныеСтроки.Количество() > 0 Тогда
					ИсходныеСтроки[0].НеобходимоИзрасходовать = ДнейРаспределено;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
